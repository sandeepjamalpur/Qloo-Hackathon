"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@genkit-ai";
exports.ids = ["vendor-chunks/@genkit-ai"];
exports.modules = {

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/chat.js":
/*!************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/chat.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar chat_exports = {};\n__export(chat_exports, {\n  Chat: () => Chat,\n  MAIN_THREAD: () => MAIN_THREAD,\n  SESSION_ID_ATTR: () => SESSION_ID_ATTR,\n  THREAD_NAME_ATTR: () => THREAD_NAME_ATTR\n});\nmodule.exports = __toCommonJS(chat_exports);\nvar import_async = __webpack_require__(/*! @genkit-ai/core/async */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async.js\");\nvar import_tracing = __webpack_require__(/*! @genkit-ai/core/tracing */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_index = __webpack_require__(/*! ./index.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/index.js\");\nvar import_session = __webpack_require__(/*! ./session.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/session.js\");\nconst MAIN_THREAD = \"main\";\nconst SESSION_ID_ATTR = `${import_tracing.ATTR_PREFIX}:sessionId`;\nconst THREAD_NAME_ATTR = `${import_tracing.ATTR_PREFIX}:threadName`;\nclass Chat {\n  constructor(session, requestBase, options) {\n    this.session = session;\n    this.sessionId = options.id;\n    this.threadName = options.thread;\n    this.requestBase = requestBase?.then((rb) => {\n      const requestBase2 = { ...rb };\n      if (requestBase2 && requestBase2[\"prompt\"]) {\n        const basePrompt = requestBase2[\"prompt\"];\n        let promptMessage;\n        if (typeof basePrompt === \"string\") {\n          promptMessage = {\n            role: \"user\",\n            content: [{ text: basePrompt }]\n          };\n        } else if (Array.isArray(basePrompt)) {\n          promptMessage = {\n            role: \"user\",\n            content: basePrompt\n          };\n        } else {\n          promptMessage = {\n            role: \"user\",\n            content: [basePrompt]\n          };\n        }\n        requestBase2.messages = [...requestBase2.messages ?? [], promptMessage];\n      }\n      if (hasPreamble(requestBase2.messages)) {\n        requestBase2.messages = [\n          // if request base contains a preamble, always put it first\n          ...getPreamble(requestBase2.messages) ?? [],\n          // strip out the preamble from history\n          ...stripPreamble(options.messages) ?? [],\n          // add whatever non-preamble remains from request\n          ...stripPreamble(requestBase2.messages) ?? []\n        ];\n      } else {\n        requestBase2.messages = [\n          ...options.messages ?? [],\n          ...requestBase2.messages ?? []\n        ];\n      }\n      this._messages = requestBase2.messages;\n      return requestBase2;\n    });\n    this._messages = options.messages;\n  }\n  requestBase;\n  sessionId;\n  _messages;\n  threadName;\n  async send(options) {\n    return (0, import_session.runWithSession)(\n      this.session.registry,\n      this.session,\n      () => (0, import_tracing.runInNewSpan)(\n        this.session.registry,\n        {\n          metadata: {\n            name: \"send\"\n          },\n          labels: {\n            [import_tracing.SPAN_TYPE_ATTR]: \"helper\",\n            [SESSION_ID_ATTR]: this.session.id,\n            [THREAD_NAME_ATTR]: this.threadName\n          }\n        },\n        async (metadata) => {\n          const resolvedOptions = resolveSendOptions(options);\n          let streamingCallback = void 0;\n          if (resolvedOptions.onChunk || resolvedOptions.streamingCallback) {\n            streamingCallback = resolvedOptions.onChunk ?? resolvedOptions.streamingCallback;\n          }\n          const request = {\n            ...await this.requestBase,\n            messages: this.messages,\n            ...resolvedOptions\n          };\n          metadata.input = resolvedOptions;\n          const response = await (0, import_index.generate)(this.session.registry, {\n            ...request,\n            onChunk: streamingCallback\n          });\n          this.requestBase = Promise.resolve({\n            ...await this.requestBase,\n            // these things may get changed by tools calling within generate.\n            tools: response?.request?.tools?.map((td) => td.name),\n            toolChoice: response?.request?.toolChoice,\n            config: response?.request?.config\n          });\n          await this.updateMessages(response.messages);\n          metadata.output = JSON.stringify(response);\n          return response;\n        }\n      )\n    );\n  }\n  sendStream(options) {\n    const channel = new import_async.Channel();\n    const resolvedOptions = resolveSendOptions(options);\n    const sent = this.send({\n      ...resolvedOptions,\n      onChunk: (chunk) => channel.send(chunk)\n    });\n    sent.then(\n      () => channel.close(),\n      (err) => channel.error(err)\n    );\n    return {\n      response: sent,\n      stream: channel\n    };\n  }\n  get messages() {\n    return this._messages ?? [];\n  }\n  async updateMessages(messages) {\n    this._messages = messages;\n    await this.session.updateMessages(this.threadName, messages);\n  }\n}\nfunction hasPreamble(msgs) {\n  return !!msgs?.find((m) => m.metadata?.preamble);\n}\nfunction getPreamble(msgs) {\n  return msgs?.filter((m) => m.metadata?.preamble);\n}\nfunction stripPreamble(msgs) {\n  return msgs?.filter((m) => !m.metadata?.preamble);\n}\nfunction resolveSendOptions(options) {\n  let resolvedOptions;\n  if (typeof options === \"string\") {\n    resolvedOptions = {\n      prompt: options\n    };\n  } else if (Array.isArray(options)) {\n    resolvedOptions = {\n      prompt: options\n    };\n  } else {\n    resolvedOptions = options;\n  }\n  return resolvedOptions;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=chat.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/chat.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/check-operation.js":
/*!***********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/check-operation.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar check_operation_exports = {};\n__export(check_operation_exports, {\n  checkOperation: () => checkOperation\n});\nmodule.exports = __toCommonJS(check_operation_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nasync function checkOperation(registry, operation) {\n  if (!operation.action) {\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: \"Provided operation is missing original request information\"\n    });\n  }\n  const backgroundAction = await registry.lookupBackgroundAction(\n    operation.action\n  );\n  if (!backgroundAction) {\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: `Failed to resolve background action from original request: ${operation.action}`\n    });\n  }\n  return await backgroundAction.check(operation);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=check-operation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9jaGVjay1vcGVyYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxrQkFBa0IsbUJBQU8sQ0FBQyxxRkFBaUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZFQUE2RSxpQkFBaUI7QUFDOUYsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUVMO0FBQ0QiLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvc3R1ZGlvL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9jaGVjay1vcGVyYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGNoZWNrX29wZXJhdGlvbl9leHBvcnRzID0ge307XG5fX2V4cG9ydChjaGVja19vcGVyYXRpb25fZXhwb3J0cywge1xuICBjaGVja09wZXJhdGlvbjogKCkgPT4gY2hlY2tPcGVyYXRpb25cbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoY2hlY2tfb3BlcmF0aW9uX2V4cG9ydHMpO1xudmFyIGltcG9ydF9jb3JlID0gcmVxdWlyZShcIkBnZW5raXQtYWkvY29yZVwiKTtcbmFzeW5jIGZ1bmN0aW9uIGNoZWNrT3BlcmF0aW9uKHJlZ2lzdHJ5LCBvcGVyYXRpb24pIHtcbiAgaWYgKCFvcGVyYXRpb24uYWN0aW9uKSB7XG4gICAgdGhyb3cgbmV3IGltcG9ydF9jb3JlLkdlbmtpdEVycm9yKHtcbiAgICAgIHN0YXR1czogXCJJTlZBTElEX0FSR1VNRU5UXCIsXG4gICAgICBtZXNzYWdlOiBcIlByb3ZpZGVkIG9wZXJhdGlvbiBpcyBtaXNzaW5nIG9yaWdpbmFsIHJlcXVlc3QgaW5mb3JtYXRpb25cIlxuICAgIH0pO1xuICB9XG4gIGNvbnN0IGJhY2tncm91bmRBY3Rpb24gPSBhd2FpdCByZWdpc3RyeS5sb29rdXBCYWNrZ3JvdW5kQWN0aW9uKFxuICAgIG9wZXJhdGlvbi5hY3Rpb25cbiAgKTtcbiAgaWYgKCFiYWNrZ3JvdW5kQWN0aW9uKSB7XG4gICAgdGhyb3cgbmV3IGltcG9ydF9jb3JlLkdlbmtpdEVycm9yKHtcbiAgICAgIHN0YXR1czogXCJJTlZBTElEX0FSR1VNRU5UXCIsXG4gICAgICBtZXNzYWdlOiBgRmFpbGVkIHRvIHJlc29sdmUgYmFja2dyb3VuZCBhY3Rpb24gZnJvbSBvcmlnaW5hbCByZXF1ZXN0OiAke29wZXJhdGlvbi5hY3Rpb259YFxuICAgIH0pO1xuICB9XG4gIHJldHVybiBhd2FpdCBiYWNrZ3JvdW5kQWN0aW9uLmNoZWNrKG9wZXJhdGlvbik7XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2hlY2tPcGVyYXRpb25cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hlY2stb3BlcmF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/check-operation.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/document.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar document_exports = {};\n__export(document_exports, {\n  CustomPartSchema: () => CustomPartSchema,\n  DataPartSchema: () => DataPartSchema,\n  Document: () => Document,\n  DocumentDataSchema: () => DocumentDataSchema,\n  MediaPartSchema: () => MediaPartSchema,\n  MediaSchema: () => MediaSchema,\n  PartSchema: () => PartSchema,\n  ReasoningPartSchema: () => ReasoningPartSchema,\n  TextPartSchema: () => TextPartSchema,\n  ToolRequestPartSchema: () => ToolRequestPartSchema,\n  ToolRequestSchema: () => ToolRequestSchema,\n  ToolResponsePartSchema: () => ToolResponsePartSchema,\n  ToolResponseSchema: () => ToolResponseSchema,\n  checkUniqueDocuments: () => checkUniqueDocuments\n});\nmodule.exports = __toCommonJS(document_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nconst EmptyPartSchema = import_core.z.object({\n  text: import_core.z.never().optional(),\n  media: import_core.z.never().optional(),\n  toolRequest: import_core.z.never().optional(),\n  toolResponse: import_core.z.never().optional(),\n  data: import_core.z.unknown().optional(),\n  metadata: import_core.z.record(import_core.z.unknown()).optional(),\n  custom: import_core.z.record(import_core.z.unknown()).optional(),\n  reasoning: import_core.z.never().optional()\n});\nconst TextPartSchema = EmptyPartSchema.extend({\n  /** The text of the message. */\n  text: import_core.z.string()\n});\nconst ReasoningPartSchema = EmptyPartSchema.extend({\n  /** The reasoning text of the message. */\n  reasoning: import_core.z.string()\n});\nconst MediaSchema = import_core.z.object({\n  /** The media content type. Inferred from data uri if not provided. */\n  contentType: import_core.z.string().optional(),\n  /** A `data:` or `https:` uri containing the media content.  */\n  url: import_core.z.string()\n});\nconst MediaPartSchema = EmptyPartSchema.extend({\n  media: MediaSchema\n});\nconst ToolRequestSchema = import_core.z.object({\n  /** The call id or reference for a specific request. */\n  ref: import_core.z.string().optional(),\n  /** The name of the tool to call. */\n  name: import_core.z.string(),\n  /** The input parameters for the tool, usually a JSON object. */\n  input: import_core.z.unknown().optional()\n});\nconst ToolRequestPartSchema = EmptyPartSchema.extend({\n  /** A request for a tool to be executed, usually provided by a model. */\n  toolRequest: ToolRequestSchema\n});\nconst ToolResponseSchema = import_core.z.object({\n  /** The call id or reference for a specific request. */\n  ref: import_core.z.string().optional(),\n  /** The name of the tool. */\n  name: import_core.z.string(),\n  /** The output data returned from the tool, usually a JSON object. */\n  output: import_core.z.unknown().optional()\n});\nconst ToolResponsePartSchema = EmptyPartSchema.extend({\n  /** A provided response to a tool call. */\n  toolResponse: ToolResponseSchema\n});\nconst DataPartSchema = EmptyPartSchema.extend({\n  data: import_core.z.unknown()\n});\nconst CustomPartSchema = EmptyPartSchema.extend({\n  custom: import_core.z.record(import_core.z.any())\n});\nconst PartSchema = import_core.z.union([TextPartSchema, MediaPartSchema]);\nconst DocumentDataSchema = import_core.z.object({\n  content: import_core.z.array(PartSchema),\n  metadata: import_core.z.record(import_core.z.string(), import_core.z.any()).optional()\n});\nfunction deepCopy(value) {\n  if (value === void 0) {\n    return value;\n  }\n  return JSON.parse(JSON.stringify(value));\n}\nclass Document {\n  content;\n  metadata;\n  constructor(data) {\n    this.content = deepCopy(data.content);\n    this.metadata = deepCopy(data.metadata);\n  }\n  static fromText(text, metadata) {\n    return new Document({\n      content: [{ text }],\n      metadata\n    });\n  }\n  // Construct a Document from a single media item\n  static fromMedia(url, contentType, metadata) {\n    return new Document({\n      content: [\n        {\n          media: {\n            contentType,\n            url\n          }\n        }\n      ],\n      metadata\n    });\n  }\n  // Construct a Document from content\n  static fromData(data, dataType, metadata) {\n    if (dataType === \"text\") {\n      return this.fromText(data, metadata);\n    }\n    return this.fromMedia(data, dataType, metadata);\n  }\n  /**\n   * Concatenates all `text` parts present in the document with no delimiter.\n   * @returns A string of all concatenated text parts.\n   */\n  get text() {\n    return this.content.map((part) => part.text || \"\").join(\"\");\n  }\n  /**\n   * Media array getter.\n   * @returns the array of media parts.\n   */\n  get media() {\n    return this.content.filter((part) => part.media && !part.text).map((part) => part.media);\n  }\n  /**\n   * Gets the first item in the document. Either text or media url.\n   */\n  get data() {\n    if (this.text) {\n      return this.text;\n    }\n    if (this.media) {\n      return this.media[0].url;\n    }\n    return \"\";\n  }\n  /**\n   * Gets the contentType of the data that is returned by data()\n   */\n  get dataType() {\n    if (this.text) {\n      return \"text\";\n    }\n    if (this.media && this.media[0].contentType) {\n      return this.media[0].contentType;\n    }\n    return void 0;\n  }\n  toJSON() {\n    return {\n      content: deepCopy(this.content),\n      metadata: deepCopy(this.metadata)\n    };\n  }\n  /**\n   * Embedders may return multiple embeddings for a single document.\n   * But storage still requires a 1:1 relationship. So we create an\n   * array of Documents from a single document - one per embedding.\n   * @param embeddings The embeddings to create the documents from.\n   * @returns an array of documents based on this document and the embeddings.\n   */\n  getEmbeddingDocuments(embeddings) {\n    const documents = [];\n    for (const embedding of embeddings) {\n      const jsonDoc = this.toJSON();\n      if (embedding.metadata) {\n        if (!jsonDoc.metadata) {\n          jsonDoc.metadata = {};\n        }\n        jsonDoc.metadata.embedMetadata = embedding.metadata;\n      }\n      documents.push(new Document(jsonDoc));\n    }\n    checkUniqueDocuments(documents);\n    return documents;\n  }\n}\nfunction checkUniqueDocuments(documents) {\n  const seen = /* @__PURE__ */ new Set();\n  for (const doc of documents) {\n    const serialized = JSON.stringify(doc);\n    if (seen.has(serialized)) {\n      console.warn(\n        \"Warning: embedding documents are not unique. Are you missing embed metadata?\"\n      );\n      return false;\n    }\n    seen.add(serialized);\n  }\n  return true;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=document.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/embedder.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/embedder.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar embedder_exports = {};\n__export(embedder_exports, {\n  EmbedderInfoSchema: () => EmbedderInfoSchema,\n  EmbeddingSchema: () => EmbeddingSchema,\n  defineEmbedder: () => defineEmbedder,\n  embed: () => embed,\n  embedMany: () => embedMany,\n  embedderActionMetadata: () => embedderActionMetadata,\n  embedderRef: () => embedderRef\n});\nmodule.exports = __toCommonJS(embedder_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nconst EmbeddingSchema = import_core.z.object({\n  embedding: import_core.z.array(import_core.z.number()),\n  metadata: import_core.z.record(import_core.z.string(), import_core.z.unknown()).optional()\n});\nconst EmbedRequestSchema = import_core.z.object({\n  input: import_core.z.array(import_document.DocumentDataSchema),\n  options: import_core.z.any().optional()\n});\nconst EmbedResponseSchema = import_core.z.object({\n  embeddings: import_core.z.array(EmbeddingSchema)\n  // TODO: stats, etc.\n});\nfunction withMetadata(embedder, configSchema) {\n  const withMeta = embedder;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nfunction defineEmbedder(registry, options, runner) {\n  const embedder = (0, import_core.defineAction)(\n    registry,\n    {\n      actionType: \"embedder\",\n      name: options.name,\n      inputSchema: options.configSchema ? EmbedRequestSchema.extend({\n        options: options.configSchema.optional()\n      }) : EmbedRequestSchema,\n      outputSchema: EmbedResponseSchema,\n      metadata: {\n        type: \"embedder\",\n        info: options.info,\n        embedder: {\n          customOptions: options.configSchema ? (0, import_schema.toJsonSchema)({ schema: options.configSchema }) : void 0\n        }\n      }\n    },\n    (i) => runner(\n      i.input.map((dd) => new import_document.Document(dd)),\n      i.options\n    )\n  );\n  const ewm = withMetadata(\n    embedder,\n    options.configSchema\n  );\n  return ewm;\n}\nasync function embed(registry, params) {\n  const embedder = await resolveEmbedder(registry, params);\n  if (!embedder.embedderAction) {\n    let embedderId;\n    if (typeof params.embedder === \"string\") {\n      embedderId = params.embedder;\n    } else if (params.embedder?.__action?.name) {\n      embedderId = params.embedder.__action.name;\n    } else {\n      embedderId = params.embedder.name;\n    }\n    throw new Error(`Unable to resolve embedder ${embedderId}`);\n  }\n  const response = await embedder.embedderAction({\n    input: typeof params.content === \"string\" ? [import_document.Document.fromText(params.content, params.metadata)] : [params.content],\n    options: {\n      version: embedder.version,\n      ...embedder.config,\n      ...params.options\n    }\n  });\n  return response.embeddings;\n}\nasync function resolveEmbedder(registry, params) {\n  if (typeof params.embedder === \"string\") {\n    return {\n      embedderAction: await registry.lookupAction(\n        `/embedder/${params.embedder}`\n      )\n    };\n  } else if (Object.hasOwnProperty.call(params.embedder, \"__action\")) {\n    return {\n      embedderAction: params.embedder\n    };\n  } else if (Object.hasOwnProperty.call(params.embedder, \"name\")) {\n    const ref = params.embedder;\n    return {\n      embedderAction: await registry.lookupAction(\n        `/embedder/${params.embedder.name}`\n      ),\n      config: {\n        ...ref.config\n      },\n      version: ref.version\n    };\n  }\n  throw new Error(`failed to resolve embedder ${params.embedder}`);\n}\nasync function embedMany(registry, params) {\n  let embedder;\n  if (typeof params.embedder === \"string\") {\n    embedder = await registry.lookupAction(`/embedder/${params.embedder}`);\n  } else if (Object.hasOwnProperty.call(params.embedder, \"info\")) {\n    embedder = await registry.lookupAction(\n      `/embedder/${params.embedder.name}`\n    );\n  } else {\n    embedder = params.embedder;\n  }\n  if (!embedder) {\n    throw new Error(\"Unable to utilize the provided embedder\");\n  }\n  const response = await embedder({\n    input: params.content.map(\n      (i) => typeof i === \"string\" ? import_document.Document.fromText(i, params.metadata) : i\n    ),\n    options: params.options\n  });\n  return response.embeddings;\n}\nconst EmbedderInfoSchema = import_core.z.object({\n  /** Friendly label for this model (e.g. \"Google AI - Gemini Pro\") */\n  label: import_core.z.string().optional(),\n  /** Supported model capabilities. */\n  supports: import_core.z.object({\n    /** Model can input this type of data. */\n    input: import_core.z.array(import_core.z.enum([\"text\", \"image\", \"video\"])).optional(),\n    /** Model can support multiple languages */\n    multilingual: import_core.z.boolean().optional()\n  }).optional(),\n  /** Embedding dimension */\n  dimensions: import_core.z.number().optional()\n});\nfunction embedderRef(options) {\n  return { ...options };\n}\nfunction embedderActionMetadata({\n  name,\n  info,\n  configSchema\n}) {\n  return {\n    actionType: \"embedder\",\n    name,\n    inputJsonSchema: (0, import_schema.toJsonSchema)({ schema: EmbedRequestSchema }),\n    outputJsonSchema: (0, import_schema.toJsonSchema)({ schema: EmbedResponseSchema }),\n    metadata: {\n      embedder: {\n        ...info,\n        customOptions: configSchema ? (0, import_schema.toJsonSchema)({ schema: configSchema }) : void 0\n      }\n    }\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=embedder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/embedder.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/evaluator.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/evaluator.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar evaluator_exports = {};\n__export(evaluator_exports, {\n  ATTR_PREFIX: () => ATTR_PREFIX,\n  BaseDataPointSchema: () => BaseDataPointSchema,\n  BaseEvalDataPointSchema: () => BaseEvalDataPointSchema,\n  EVALUATOR_METADATA_KEY_DEFINITION: () => EVALUATOR_METADATA_KEY_DEFINITION,\n  EVALUATOR_METADATA_KEY_DISPLAY_NAME: () => EVALUATOR_METADATA_KEY_DISPLAY_NAME,\n  EVALUATOR_METADATA_KEY_IS_BILLED: () => EVALUATOR_METADATA_KEY_IS_BILLED,\n  EvalResponseSchema: () => EvalResponseSchema,\n  EvalResponsesSchema: () => EvalResponsesSchema,\n  EvalStatusEnum: () => EvalStatusEnum,\n  EvaluatorInfoSchema: () => EvaluatorInfoSchema,\n  SPAN_STATE_ATTR: () => SPAN_STATE_ATTR,\n  ScoreSchema: () => ScoreSchema,\n  defineEvaluator: () => defineEvaluator,\n  evaluate: () => evaluate,\n  evaluatorRef: () => evaluatorRef\n});\nmodule.exports = __toCommonJS(evaluator_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_logging = __webpack_require__(/*! @genkit-ai/core/logging */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! @genkit-ai/core/tracing */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst ATTR_PREFIX = \"genkit\";\nconst SPAN_STATE_ATTR = ATTR_PREFIX + \":state\";\nconst BaseDataPointSchema = import_core.z.object({\n  input: import_core.z.unknown(),\n  output: import_core.z.unknown().optional(),\n  context: import_core.z.array(import_core.z.unknown()).optional(),\n  reference: import_core.z.unknown().optional(),\n  testCaseId: import_core.z.string().optional(),\n  traceIds: import_core.z.array(import_core.z.string()).optional()\n});\nconst BaseEvalDataPointSchema = BaseDataPointSchema.extend({\n  testCaseId: import_core.z.string()\n});\nconst EvalStatusEnumSchema = import_core.z.enum([\"UNKNOWN\", \"PASS\", \"FAIL\"]);\nvar EvalStatusEnum = /* @__PURE__ */ ((EvalStatusEnum2) => {\n  EvalStatusEnum2[\"UNKNOWN\"] = \"UNKNOWN\";\n  EvalStatusEnum2[\"PASS\"] = \"PASS\";\n  EvalStatusEnum2[\"FAIL\"] = \"FAIL\";\n  return EvalStatusEnum2;\n})(EvalStatusEnum || {});\nconst ScoreSchema = import_core.z.object({\n  id: import_core.z.string().describe(\n    \"Optional ID to differentiate different scores if applying in a single evaluation\"\n  ).optional(),\n  score: import_core.z.union([import_core.z.number(), import_core.z.string(), import_core.z.boolean()]).optional(),\n  status: EvalStatusEnumSchema.optional(),\n  error: import_core.z.string().optional(),\n  details: import_core.z.object({\n    reasoning: import_core.z.string().optional()\n  }).passthrough().optional()\n});\nconst EVALUATOR_METADATA_KEY_DISPLAY_NAME = \"evaluatorDisplayName\";\nconst EVALUATOR_METADATA_KEY_DEFINITION = \"evaluatorDefinition\";\nconst EVALUATOR_METADATA_KEY_IS_BILLED = \"evaluatorIsBilled\";\nconst EvalResponseSchema = import_core.z.object({\n  sampleIndex: import_core.z.number().optional(),\n  testCaseId: import_core.z.string(),\n  traceId: import_core.z.string().optional(),\n  spanId: import_core.z.string().optional(),\n  evaluation: import_core.z.union([ScoreSchema, import_core.z.array(ScoreSchema)])\n});\nconst EvalResponsesSchema = import_core.z.array(EvalResponseSchema);\nfunction withMetadata(evaluator, dataPointType, configSchema) {\n  const withMeta = evaluator;\n  withMeta.__dataPointType = dataPointType;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nconst EvalRequestSchema = import_core.z.object({\n  dataset: import_core.z.array(BaseDataPointSchema),\n  evalRunId: import_core.z.string(),\n  options: import_core.z.unknown()\n});\nfunction defineEvaluator(registry, options, runner) {\n  const evalMetadata = {};\n  evalMetadata[EVALUATOR_METADATA_KEY_IS_BILLED] = options.isBilled == void 0 ? true : options.isBilled;\n  evalMetadata[EVALUATOR_METADATA_KEY_DISPLAY_NAME] = options.displayName;\n  evalMetadata[EVALUATOR_METADATA_KEY_DEFINITION] = options.definition;\n  if (options.configSchema) {\n    evalMetadata[\"customOptions\"] = (0, import_schema.toJsonSchema)({\n      schema: options.configSchema\n    });\n  }\n  const evaluator = (0, import_core.defineAction)(\n    registry,\n    {\n      actionType: \"evaluator\",\n      name: options.name,\n      inputSchema: EvalRequestSchema.extend({\n        dataset: options.dataPointType ? import_core.z.array(options.dataPointType) : import_core.z.array(BaseDataPointSchema),\n        options: options.configSchema ?? import_core.z.unknown(),\n        evalRunId: import_core.z.string(),\n        batchSize: import_core.z.number().optional()\n      }),\n      outputSchema: EvalResponsesSchema,\n      metadata: {\n        type: \"evaluator\",\n        evaluator: evalMetadata\n      }\n    },\n    async (i) => {\n      const evalResponses = [];\n      const batches = getBatchedArray(i.dataset, i.batchSize);\n      for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {\n        const batch = batches[batchIndex];\n        try {\n          await (0, import_tracing.runInNewSpan)(\n            registry,\n            {\n              metadata: {\n                name: i.batchSize ? `Batch ${batchIndex}` : `Test Case ${batch[0].testCaseId}`,\n                metadata: { \"evaluator:evalRunId\": i.evalRunId }\n              },\n              labels: {\n                [import_tracing.SPAN_TYPE_ATTR]: \"evaluator\"\n              }\n            },\n            async (metadata, otSpan) => {\n              const spanId = otSpan.spanContext().spanId;\n              const traceId = otSpan.spanContext().traceId;\n              const evalRunPromises = batch.map((d, index) => {\n                const sampleIndex = i.batchSize ? i.batchSize * batchIndex + index : batchIndex;\n                const datapoint = d;\n                metadata.input = {\n                  input: datapoint.input,\n                  output: datapoint.output,\n                  context: datapoint.context\n                };\n                const evalOutputPromise = runner(datapoint, i.options).then((result) => ({\n                  ...result,\n                  traceId,\n                  spanId,\n                  sampleIndex\n                })).catch((error) => {\n                  return {\n                    sampleIndex,\n                    spanId,\n                    traceId,\n                    testCaseId: datapoint.testCaseId,\n                    evaluation: {\n                      error: `Evaluation of test case ${datapoint.testCaseId} failed: \n${error}`\n                    }\n                  };\n                });\n                return evalOutputPromise;\n              });\n              const allResults = await Promise.all(evalRunPromises);\n              metadata.output = allResults.length === 1 ? allResults[0] : allResults;\n              allResults.map((result) => {\n                evalResponses.push(result);\n              });\n            }\n          );\n        } catch (e) {\n          import_logging.logger.error(\n            `Evaluation of batch ${batchIndex} failed: \n${e.stack}`\n          );\n          continue;\n        }\n      }\n      return evalResponses;\n    }\n  );\n  const ewm = withMetadata(\n    evaluator,\n    options.dataPointType,\n    options.configSchema\n  );\n  return ewm;\n}\nasync function evaluate(registry, params) {\n  let evaluator;\n  if (typeof params.evaluator === \"string\") {\n    evaluator = await registry.lookupAction(`/evaluator/${params.evaluator}`);\n  } else if (Object.hasOwnProperty.call(params.evaluator, \"info\")) {\n    evaluator = await registry.lookupAction(\n      `/evaluator/${params.evaluator.name}`\n    );\n  } else {\n    evaluator = params.evaluator;\n  }\n  if (!evaluator) {\n    throw new Error(\"Unable to utilize the provided evaluator\");\n  }\n  return await evaluator({\n    dataset: params.dataset,\n    options: params.options,\n    evalRunId: params.evalRunId ?? (0, import_crypto.randomUUID)()\n  });\n}\nconst EvaluatorInfoSchema = import_core.z.object({\n  /** Friendly label for this evaluator */\n  label: import_core.z.string().optional(),\n  metrics: import_core.z.array(import_core.z.string())\n});\nfunction evaluatorRef(options) {\n  return { ...options };\n}\nfunction getBatchedArray(arr, batchSize) {\n  let size;\n  if (!batchSize) {\n    size = 1;\n  } else {\n    size = batchSize;\n  }\n  const batches = [];\n  for (var i = 0; i < arr.length; i += size) {\n    batches.push(\n      arr.slice(i, i + size).map((d) => ({\n        ...d,\n        testCaseId: d.testCaseId ?? (0, import_crypto.randomUUID)()\n      }))\n    );\n  }\n  return batches;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=evaluator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/evaluator.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/extract.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar extract_exports = {};\n__export(extract_exports, {\n  extractItems: () => extractItems,\n  extractJson: () => extractJson,\n  parsePartialJson: () => parsePartialJson\n});\nmodule.exports = __toCommonJS(extract_exports);\nvar import_json5 = __toESM(__webpack_require__(/*! json5 */ \"(action-browser)/./node_modules/json5/dist/index.mjs\"));\nvar import_partial_json = __webpack_require__(/*! partial-json */ \"(action-browser)/./node_modules/partial-json/dist/index.js\");\nfunction parsePartialJson(jsonString) {\n  return import_json5.default.parse(JSON.stringify((0, import_partial_json.parse)(jsonString, import_partial_json.Allow.ALL)));\n}\nfunction extractJson(text, throwOnBadJson) {\n  let openingChar;\n  let closingChar;\n  let startPos;\n  let nestingCount = 0;\n  let inString = false;\n  let escapeNext = false;\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i].replace(/\\u00A0/g, \" \");\n    if (escapeNext) {\n      escapeNext = false;\n      continue;\n    }\n    if (char === \"\\\\\") {\n      escapeNext = true;\n      continue;\n    }\n    if (char === '\"') {\n      inString = !inString;\n      continue;\n    }\n    if (inString) {\n      continue;\n    }\n    if (!openingChar && (char === \"{\" || char === \"[\")) {\n      openingChar = char;\n      closingChar = char === \"{\" ? \"}\" : \"]\";\n      startPos = i;\n      nestingCount++;\n    } else if (char === openingChar) {\n      nestingCount++;\n    } else if (char === closingChar) {\n      nestingCount--;\n      if (!nestingCount) {\n        return import_json5.default.parse(text.substring(startPos || 0, i + 1));\n      }\n    }\n  }\n  if (startPos !== void 0 && nestingCount > 0) {\n    try {\n      return parsePartialJson(text.substring(startPos));\n    } catch {\n      if (throwOnBadJson) {\n        throw new Error(`Invalid JSON extracted from model output: ${text}`);\n      }\n      return null;\n    }\n  }\n  if (throwOnBadJson) {\n    throw new Error(`Invalid JSON extracted from model output: ${text}`);\n  }\n  return null;\n}\nfunction extractItems(text, cursor = 0) {\n  const items = [];\n  let currentCursor = cursor;\n  if (cursor === 0) {\n    const arrayStart = text.indexOf(\"[\");\n    if (arrayStart === -1) {\n      return { items: [], cursor: text.length };\n    }\n    currentCursor = arrayStart + 1;\n  }\n  let objectStart = -1;\n  let braceCount = 0;\n  let inString = false;\n  let escapeNext = false;\n  for (let i = currentCursor; i < text.length; i++) {\n    const char = text[i];\n    if (escapeNext) {\n      escapeNext = false;\n      continue;\n    }\n    if (char === \"\\\\\") {\n      escapeNext = true;\n      continue;\n    }\n    if (char === '\"') {\n      inString = !inString;\n      continue;\n    }\n    if (inString) {\n      continue;\n    }\n    if (char === \"{\") {\n      if (braceCount === 0) {\n        objectStart = i;\n      }\n      braceCount++;\n    } else if (char === \"}\") {\n      braceCount--;\n      if (braceCount === 0 && objectStart !== -1) {\n        try {\n          const obj = import_json5.default.parse(text.substring(objectStart, i + 1));\n          items.push(obj);\n          currentCursor = i + 1;\n          objectStart = -1;\n        } catch {\n        }\n      }\n    } else if (char === \"]\" && braceCount === 0) {\n      break;\n    }\n  }\n  return {\n    items,\n    cursor: currentCursor\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=extract.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/array.js":
/*!*********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/formats/array.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar array_exports = {};\n__export(array_exports, {\n  arrayFormatter: () => arrayFormatter\n});\nmodule.exports = __toCommonJS(array_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_extract = __webpack_require__(/*! ../extract */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\");\nconst arrayFormatter = {\n  name: \"array\",\n  config: {\n    contentType: \"application/json\",\n    constrained: true\n  },\n  handler: (schema) => {\n    if (schema && schema.type !== \"array\") {\n      throw new import_core.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: `Must supply an 'array' schema type when using the 'items' parser format.`\n      });\n    }\n    let instructions;\n    if (schema) {\n      instructions = `Output should be a JSON array conforming to the following schema:\n    \n\\`\\`\\`\n${JSON.stringify(schema)}\n\\`\\`\\`\n    `;\n    }\n    return {\n      parseChunk: (chunk) => {\n        const cursor = chunk.previousChunks?.length ? (0, import_extract.extractItems)(chunk.previousText).cursor : 0;\n        const { items } = (0, import_extract.extractItems)(chunk.accumulatedText, cursor);\n        return items;\n      },\n      parseMessage: (message) => {\n        const { items } = (0, import_extract.extractItems)(message.text, 0);\n        return items;\n      },\n      instructions\n    };\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=array.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2FycmF5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMscUZBQWlCO0FBQzNDLHFCQUFxQixtQkFBTyxDQUFDLGdGQUFZO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQSxPQUFPO0FBQ1A7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUVMO0FBQ0QiLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvc3R1ZGlvL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2FycmF5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBhcnJheV9leHBvcnRzID0ge307XG5fX2V4cG9ydChhcnJheV9leHBvcnRzLCB7XG4gIGFycmF5Rm9ybWF0dGVyOiAoKSA9PiBhcnJheUZvcm1hdHRlclxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhhcnJheV9leHBvcnRzKTtcbnZhciBpbXBvcnRfY29yZSA9IHJlcXVpcmUoXCJAZ2Vua2l0LWFpL2NvcmVcIik7XG52YXIgaW1wb3J0X2V4dHJhY3QgPSByZXF1aXJlKFwiLi4vZXh0cmFjdFwiKTtcbmNvbnN0IGFycmF5Rm9ybWF0dGVyID0ge1xuICBuYW1lOiBcImFycmF5XCIsXG4gIGNvbmZpZzoge1xuICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICBjb25zdHJhaW5lZDogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiAoc2NoZW1hKSA9PiB7XG4gICAgaWYgKHNjaGVtYSAmJiBzY2hlbWEudHlwZSAhPT0gXCJhcnJheVwiKSB7XG4gICAgICB0aHJvdyBuZXcgaW1wb3J0X2NvcmUuR2Vua2l0RXJyb3Ioe1xuICAgICAgICBzdGF0dXM6IFwiSU5WQUxJRF9BUkdVTUVOVFwiLFxuICAgICAgICBtZXNzYWdlOiBgTXVzdCBzdXBwbHkgYW4gJ2FycmF5JyBzY2hlbWEgdHlwZSB3aGVuIHVzaW5nIHRoZSAnaXRlbXMnIHBhcnNlciBmb3JtYXQuYFxuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCBpbnN0cnVjdGlvbnM7XG4gICAgaWYgKHNjaGVtYSkge1xuICAgICAgaW5zdHJ1Y3Rpb25zID0gYE91dHB1dCBzaG91bGQgYmUgYSBKU09OIGFycmF5IGNvbmZvcm1pbmcgdG8gdGhlIGZvbGxvd2luZyBzY2hlbWE6XG4gICAgXG5cXGBcXGBcXGBcbiR7SlNPTi5zdHJpbmdpZnkoc2NoZW1hKX1cblxcYFxcYFxcYFxuICAgIGA7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBwYXJzZUNodW5rOiAoY2h1bmspID0+IHtcbiAgICAgICAgY29uc3QgY3Vyc29yID0gY2h1bmsucHJldmlvdXNDaHVua3M/Lmxlbmd0aCA/ICgwLCBpbXBvcnRfZXh0cmFjdC5leHRyYWN0SXRlbXMpKGNodW5rLnByZXZpb3VzVGV4dCkuY3Vyc29yIDogMDtcbiAgICAgICAgY29uc3QgeyBpdGVtcyB9ID0gKDAsIGltcG9ydF9leHRyYWN0LmV4dHJhY3RJdGVtcykoY2h1bmsuYWNjdW11bGF0ZWRUZXh0LCBjdXJzb3IpO1xuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgICB9LFxuICAgICAgcGFyc2VNZXNzYWdlOiAobWVzc2FnZSkgPT4ge1xuICAgICAgICBjb25zdCB7IGl0ZW1zIH0gPSAoMCwgaW1wb3J0X2V4dHJhY3QuZXh0cmFjdEl0ZW1zKShtZXNzYWdlLnRleHQsIDApO1xuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgICB9LFxuICAgICAgaW5zdHJ1Y3Rpb25zXG4gICAgfTtcbiAgfVxufTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBhcnJheUZvcm1hdHRlclxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcnJheS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/array.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/enum.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/formats/enum.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar enum_exports = {};\n__export(enum_exports, {\n  enumFormatter: () => enumFormatter\n});\nmodule.exports = __toCommonJS(enum_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nconst enumFormatter = {\n  name: \"enum\",\n  config: {\n    contentType: \"text/enum\",\n    constrained: true\n  },\n  handler: (schema) => {\n    if (schema && schema.type !== \"string\" && schema.type !== \"enum\") {\n      throw new import_core.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: `Must supply a 'string' or 'enum' schema type when using the enum parser format.`\n      });\n    }\n    let instructions;\n    if (schema?.enum) {\n      instructions = `Output should be ONLY one of the following enum values. Do not output any additional information or add quotes.\n\n${schema.enum.map((v) => v.toString()).join(\"\\n\")}`;\n    }\n    return {\n      parseMessage: (message) => {\n        return message.text.replace(/['\"]/g, \"\").trim();\n      },\n      instructions\n    };\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=enum.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2VudW0uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxrQkFBa0IsbUJBQU8sQ0FBQyxxRkFBaUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEVBQUUsZ0RBQWdEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsiL2hvbWUvdXNlci9zdHVkaW8vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbGliL2Zvcm1hdHMvZW51bS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgZW51bV9leHBvcnRzID0ge307XG5fX2V4cG9ydChlbnVtX2V4cG9ydHMsIHtcbiAgZW51bUZvcm1hdHRlcjogKCkgPT4gZW51bUZvcm1hdHRlclxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhlbnVtX2V4cG9ydHMpO1xudmFyIGltcG9ydF9jb3JlID0gcmVxdWlyZShcIkBnZW5raXQtYWkvY29yZVwiKTtcbmNvbnN0IGVudW1Gb3JtYXR0ZXIgPSB7XG4gIG5hbWU6IFwiZW51bVwiLFxuICBjb25maWc6IHtcbiAgICBjb250ZW50VHlwZTogXCJ0ZXh0L2VudW1cIixcbiAgICBjb25zdHJhaW5lZDogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiAoc2NoZW1hKSA9PiB7XG4gICAgaWYgKHNjaGVtYSAmJiBzY2hlbWEudHlwZSAhPT0gXCJzdHJpbmdcIiAmJiBzY2hlbWEudHlwZSAhPT0gXCJlbnVtXCIpIHtcbiAgICAgIHRocm93IG5ldyBpbXBvcnRfY29yZS5HZW5raXRFcnJvcih7XG4gICAgICAgIHN0YXR1czogXCJJTlZBTElEX0FSR1VNRU5UXCIsXG4gICAgICAgIG1lc3NhZ2U6IGBNdXN0IHN1cHBseSBhICdzdHJpbmcnIG9yICdlbnVtJyBzY2hlbWEgdHlwZSB3aGVuIHVzaW5nIHRoZSBlbnVtIHBhcnNlciBmb3JtYXQuYFxuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCBpbnN0cnVjdGlvbnM7XG4gICAgaWYgKHNjaGVtYT8uZW51bSkge1xuICAgICAgaW5zdHJ1Y3Rpb25zID0gYE91dHB1dCBzaG91bGQgYmUgT05MWSBvbmUgb2YgdGhlIGZvbGxvd2luZyBlbnVtIHZhbHVlcy4gRG8gbm90IG91dHB1dCBhbnkgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBvciBhZGQgcXVvdGVzLlxuXG4ke3NjaGVtYS5lbnVtLm1hcCgodikgPT4gdi50b1N0cmluZygpKS5qb2luKFwiXFxuXCIpfWA7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBwYXJzZU1lc3NhZ2U6IChtZXNzYWdlKSA9PiB7XG4gICAgICAgIHJldHVybiBtZXNzYWdlLnRleHQucmVwbGFjZSgvWydcIl0vZywgXCJcIikudHJpbSgpO1xuICAgICAgfSxcbiAgICAgIGluc3RydWN0aW9uc1xuICAgIH07XG4gIH1cbn07XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZW51bUZvcm1hdHRlclxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnVtLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/enum.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/formats/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar formats_exports = {};\n__export(formats_exports, {\n  DEFAULT_FORMATS: () => DEFAULT_FORMATS,\n  configureFormats: () => configureFormats,\n  defineFormat: () => defineFormat,\n  injectInstructions: () => injectInstructions,\n  resolveFormat: () => resolveFormat,\n  resolveInstructions: () => resolveInstructions\n});\nmodule.exports = __toCommonJS(formats_exports);\nvar import_array = __webpack_require__(/*! ./array.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/array.js\");\nvar import_enum = __webpack_require__(/*! ./enum.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/enum.js\");\nvar import_json = __webpack_require__(/*! ./json.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/json.js\");\nvar import_jsonl = __webpack_require__(/*! ./jsonl.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/jsonl.js\");\nvar import_text = __webpack_require__(/*! ./text.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/text.js\");\nfunction defineFormat(registry, options, handler) {\n  const { name, ...config } = options;\n  const formatter = { config, handler };\n  registry.registerValue(\"format\", name, formatter);\n  return formatter;\n}\nasync function resolveFormat(registry, outputOpts) {\n  if (!outputOpts) return void 0;\n  if ((outputOpts.jsonSchema || outputOpts.schema) && !outputOpts.format) {\n    return registry.lookupValue(\"format\", \"json\");\n  }\n  if (outputOpts.format) {\n    return registry.lookupValue(\"format\", outputOpts.format);\n  }\n  return void 0;\n}\nfunction resolveInstructions(format, schema, instructionsOption) {\n  if (typeof instructionsOption === \"string\") return instructionsOption;\n  if (instructionsOption === false) return void 0;\n  if (!format) return void 0;\n  return format.handler(schema).instructions;\n}\nfunction injectInstructions(messages, instructions) {\n  if (!instructions) return messages;\n  if (messages.find(\n    (m2) => m2.content.find(\n      (p) => p.metadata?.purpose === \"output\" && !p.metadata?.pending\n    )\n  )) {\n    return messages;\n  }\n  const newPart = {\n    text: instructions,\n    metadata: { purpose: \"output\" }\n  };\n  let targetIndex = messages.findIndex((m2) => m2.role === \"system\");\n  if (targetIndex < 0)\n    targetIndex = messages.map((m2) => m2.role).lastIndexOf(\"user\");\n  if (targetIndex < 0) return messages;\n  const m = {\n    ...messages[targetIndex],\n    content: [...messages[targetIndex].content]\n  };\n  const partIndex = m.content.findIndex(\n    (p) => p.metadata?.purpose === \"output\" && p.metadata?.pending\n  );\n  if (partIndex > 0) {\n    m.content.splice(partIndex, 1, newPart);\n  } else {\n    m.content.push(newPart);\n  }\n  const outMessages = [...messages];\n  outMessages.splice(targetIndex, 1, m);\n  return outMessages;\n}\nconst DEFAULT_FORMATS = [\n  import_json.jsonFormatter,\n  import_array.arrayFormatter,\n  import_text.textFormatter,\n  import_enum.enumFormatter,\n  import_jsonl.jsonlFormatter\n];\nfunction configureFormats(registry) {\n  for (const format of DEFAULT_FORMATS) {\n    defineFormat(\n      registry,\n      { name: format.name, ...format.config },\n      format.handler\n    );\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG1CQUFtQixtQkFBTyxDQUFDLHNGQUFZO0FBQ3ZDLGtCQUFrQixtQkFBTyxDQUFDLG9GQUFXO0FBQ3JDLGtCQUFrQixtQkFBTyxDQUFDLG9GQUFXO0FBQ3JDLG1CQUFtQixtQkFBTyxDQUFDLHNGQUFZO0FBQ3ZDLGtCQUFrQixtQkFBTyxDQUFDLG9GQUFXO0FBQ3JDO0FBQ0EsVUFBVSxrQkFBa0I7QUFDNUIsc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHFDQUFxQztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQU9MO0FBQ0QiLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvc3R1ZGlvL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBmb3JtYXRzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGZvcm1hdHNfZXhwb3J0cywge1xuICBERUZBVUxUX0ZPUk1BVFM6ICgpID0+IERFRkFVTFRfRk9STUFUUyxcbiAgY29uZmlndXJlRm9ybWF0czogKCkgPT4gY29uZmlndXJlRm9ybWF0cyxcbiAgZGVmaW5lRm9ybWF0OiAoKSA9PiBkZWZpbmVGb3JtYXQsXG4gIGluamVjdEluc3RydWN0aW9uczogKCkgPT4gaW5qZWN0SW5zdHJ1Y3Rpb25zLFxuICByZXNvbHZlRm9ybWF0OiAoKSA9PiByZXNvbHZlRm9ybWF0LFxuICByZXNvbHZlSW5zdHJ1Y3Rpb25zOiAoKSA9PiByZXNvbHZlSW5zdHJ1Y3Rpb25zXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGZvcm1hdHNfZXhwb3J0cyk7XG52YXIgaW1wb3J0X2FycmF5ID0gcmVxdWlyZShcIi4vYXJyYXkuanNcIik7XG52YXIgaW1wb3J0X2VudW0gPSByZXF1aXJlKFwiLi9lbnVtLmpzXCIpO1xudmFyIGltcG9ydF9qc29uID0gcmVxdWlyZShcIi4vanNvbi5qc1wiKTtcbnZhciBpbXBvcnRfanNvbmwgPSByZXF1aXJlKFwiLi9qc29ubC5qc1wiKTtcbnZhciBpbXBvcnRfdGV4dCA9IHJlcXVpcmUoXCIuL3RleHQuanNcIik7XG5mdW5jdGlvbiBkZWZpbmVGb3JtYXQocmVnaXN0cnksIG9wdGlvbnMsIGhhbmRsZXIpIHtcbiAgY29uc3QgeyBuYW1lLCAuLi5jb25maWcgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGZvcm1hdHRlciA9IHsgY29uZmlnLCBoYW5kbGVyIH07XG4gIHJlZ2lzdHJ5LnJlZ2lzdGVyVmFsdWUoXCJmb3JtYXRcIiwgbmFtZSwgZm9ybWF0dGVyKTtcbiAgcmV0dXJuIGZvcm1hdHRlcjtcbn1cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVGb3JtYXQocmVnaXN0cnksIG91dHB1dE9wdHMpIHtcbiAgaWYgKCFvdXRwdXRPcHRzKSByZXR1cm4gdm9pZCAwO1xuICBpZiAoKG91dHB1dE9wdHMuanNvblNjaGVtYSB8fCBvdXRwdXRPcHRzLnNjaGVtYSkgJiYgIW91dHB1dE9wdHMuZm9ybWF0KSB7XG4gICAgcmV0dXJuIHJlZ2lzdHJ5Lmxvb2t1cFZhbHVlKFwiZm9ybWF0XCIsIFwianNvblwiKTtcbiAgfVxuICBpZiAob3V0cHV0T3B0cy5mb3JtYXQpIHtcbiAgICByZXR1cm4gcmVnaXN0cnkubG9va3VwVmFsdWUoXCJmb3JtYXRcIiwgb3V0cHV0T3B0cy5mb3JtYXQpO1xuICB9XG4gIHJldHVybiB2b2lkIDA7XG59XG5mdW5jdGlvbiByZXNvbHZlSW5zdHJ1Y3Rpb25zKGZvcm1hdCwgc2NoZW1hLCBpbnN0cnVjdGlvbnNPcHRpb24pIHtcbiAgaWYgKHR5cGVvZiBpbnN0cnVjdGlvbnNPcHRpb24gPT09IFwic3RyaW5nXCIpIHJldHVybiBpbnN0cnVjdGlvbnNPcHRpb247XG4gIGlmIChpbnN0cnVjdGlvbnNPcHRpb24gPT09IGZhbHNlKSByZXR1cm4gdm9pZCAwO1xuICBpZiAoIWZvcm1hdCkgcmV0dXJuIHZvaWQgMDtcbiAgcmV0dXJuIGZvcm1hdC5oYW5kbGVyKHNjaGVtYSkuaW5zdHJ1Y3Rpb25zO1xufVxuZnVuY3Rpb24gaW5qZWN0SW5zdHJ1Y3Rpb25zKG1lc3NhZ2VzLCBpbnN0cnVjdGlvbnMpIHtcbiAgaWYgKCFpbnN0cnVjdGlvbnMpIHJldHVybiBtZXNzYWdlcztcbiAgaWYgKG1lc3NhZ2VzLmZpbmQoXG4gICAgKG0yKSA9PiBtMi5jb250ZW50LmZpbmQoXG4gICAgICAocCkgPT4gcC5tZXRhZGF0YT8ucHVycG9zZSA9PT0gXCJvdXRwdXRcIiAmJiAhcC5tZXRhZGF0YT8ucGVuZGluZ1xuICAgIClcbiAgKSkge1xuICAgIHJldHVybiBtZXNzYWdlcztcbiAgfVxuICBjb25zdCBuZXdQYXJ0ID0ge1xuICAgIHRleHQ6IGluc3RydWN0aW9ucyxcbiAgICBtZXRhZGF0YTogeyBwdXJwb3NlOiBcIm91dHB1dFwiIH1cbiAgfTtcbiAgbGV0IHRhcmdldEluZGV4ID0gbWVzc2FnZXMuZmluZEluZGV4KChtMikgPT4gbTIucm9sZSA9PT0gXCJzeXN0ZW1cIik7XG4gIGlmICh0YXJnZXRJbmRleCA8IDApXG4gICAgdGFyZ2V0SW5kZXggPSBtZXNzYWdlcy5tYXAoKG0yKSA9PiBtMi5yb2xlKS5sYXN0SW5kZXhPZihcInVzZXJcIik7XG4gIGlmICh0YXJnZXRJbmRleCA8IDApIHJldHVybiBtZXNzYWdlcztcbiAgY29uc3QgbSA9IHtcbiAgICAuLi5tZXNzYWdlc1t0YXJnZXRJbmRleF0sXG4gICAgY29udGVudDogWy4uLm1lc3NhZ2VzW3RhcmdldEluZGV4XS5jb250ZW50XVxuICB9O1xuICBjb25zdCBwYXJ0SW5kZXggPSBtLmNvbnRlbnQuZmluZEluZGV4KFxuICAgIChwKSA9PiBwLm1ldGFkYXRhPy5wdXJwb3NlID09PSBcIm91dHB1dFwiICYmIHAubWV0YWRhdGE/LnBlbmRpbmdcbiAgKTtcbiAgaWYgKHBhcnRJbmRleCA+IDApIHtcbiAgICBtLmNvbnRlbnQuc3BsaWNlKHBhcnRJbmRleCwgMSwgbmV3UGFydCk7XG4gIH0gZWxzZSB7XG4gICAgbS5jb250ZW50LnB1c2gobmV3UGFydCk7XG4gIH1cbiAgY29uc3Qgb3V0TWVzc2FnZXMgPSBbLi4ubWVzc2FnZXNdO1xuICBvdXRNZXNzYWdlcy5zcGxpY2UodGFyZ2V0SW5kZXgsIDEsIG0pO1xuICByZXR1cm4gb3V0TWVzc2FnZXM7XG59XG5jb25zdCBERUZBVUxUX0ZPUk1BVFMgPSBbXG4gIGltcG9ydF9qc29uLmpzb25Gb3JtYXR0ZXIsXG4gIGltcG9ydF9hcnJheS5hcnJheUZvcm1hdHRlcixcbiAgaW1wb3J0X3RleHQudGV4dEZvcm1hdHRlcixcbiAgaW1wb3J0X2VudW0uZW51bUZvcm1hdHRlcixcbiAgaW1wb3J0X2pzb25sLmpzb25sRm9ybWF0dGVyXG5dO1xuZnVuY3Rpb24gY29uZmlndXJlRm9ybWF0cyhyZWdpc3RyeSkge1xuICBmb3IgKGNvbnN0IGZvcm1hdCBvZiBERUZBVUxUX0ZPUk1BVFMpIHtcbiAgICBkZWZpbmVGb3JtYXQoXG4gICAgICByZWdpc3RyeSxcbiAgICAgIHsgbmFtZTogZm9ybWF0Lm5hbWUsIC4uLmZvcm1hdC5jb25maWcgfSxcbiAgICAgIGZvcm1hdC5oYW5kbGVyXG4gICAgKTtcbiAgfVxufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIERFRkFVTFRfRk9STUFUUyxcbiAgY29uZmlndXJlRm9ybWF0cyxcbiAgZGVmaW5lRm9ybWF0LFxuICBpbmplY3RJbnN0cnVjdGlvbnMsXG4gIHJlc29sdmVGb3JtYXQsXG4gIHJlc29sdmVJbnN0cnVjdGlvbnNcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/json.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/formats/json.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar json_exports = {};\n__export(json_exports, {\n  jsonFormatter: () => jsonFormatter\n});\nmodule.exports = __toCommonJS(json_exports);\nvar import_extract = __webpack_require__(/*! ../extract */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\");\nconst jsonFormatter = {\n  name: \"json\",\n  config: {\n    format: \"json\",\n    contentType: \"application/json\",\n    constrained: true,\n    defaultInstructions: false\n  },\n  handler: (schema) => {\n    let instructions;\n    if (schema) {\n      instructions = `Output should be in JSON format and conform to the following schema:\n\n\\`\\`\\`\n${JSON.stringify(schema)}\n\\`\\`\\`\n`;\n    }\n    return {\n      parseChunk: (chunk) => {\n        return (0, import_extract.extractJson)(chunk.accumulatedText);\n      },\n      parseMessage: (message) => {\n        return (0, import_extract.extractJson)(message.text);\n      },\n      instructions\n    };\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=json.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2pzb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxxQkFBcUIsbUJBQU8sQ0FBQyxnRkFBWTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUVMO0FBQ0QiLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvc3R1ZGlvL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2pzb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGpzb25fZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoanNvbl9leHBvcnRzLCB7XG4gIGpzb25Gb3JtYXR0ZXI6ICgpID0+IGpzb25Gb3JtYXR0ZXJcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoanNvbl9leHBvcnRzKTtcbnZhciBpbXBvcnRfZXh0cmFjdCA9IHJlcXVpcmUoXCIuLi9leHRyYWN0XCIpO1xuY29uc3QganNvbkZvcm1hdHRlciA9IHtcbiAgbmFtZTogXCJqc29uXCIsXG4gIGNvbmZpZzoge1xuICAgIGZvcm1hdDogXCJqc29uXCIsXG4gICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIGNvbnN0cmFpbmVkOiB0cnVlLFxuICAgIGRlZmF1bHRJbnN0cnVjdGlvbnM6IGZhbHNlXG4gIH0sXG4gIGhhbmRsZXI6IChzY2hlbWEpID0+IHtcbiAgICBsZXQgaW5zdHJ1Y3Rpb25zO1xuICAgIGlmIChzY2hlbWEpIHtcbiAgICAgIGluc3RydWN0aW9ucyA9IGBPdXRwdXQgc2hvdWxkIGJlIGluIEpTT04gZm9ybWF0IGFuZCBjb25mb3JtIHRvIHRoZSBmb2xsb3dpbmcgc2NoZW1hOlxuXG5cXGBcXGBcXGBcbiR7SlNPTi5zdHJpbmdpZnkoc2NoZW1hKX1cblxcYFxcYFxcYFxuYDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhcnNlQ2h1bms6IChjaHVuaykgPT4ge1xuICAgICAgICByZXR1cm4gKDAsIGltcG9ydF9leHRyYWN0LmV4dHJhY3RKc29uKShjaHVuay5hY2N1bXVsYXRlZFRleHQpO1xuICAgICAgfSxcbiAgICAgIHBhcnNlTWVzc2FnZTogKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuICgwLCBpbXBvcnRfZXh0cmFjdC5leHRyYWN0SnNvbikobWVzc2FnZS50ZXh0KTtcbiAgICAgIH0sXG4gICAgICBpbnN0cnVjdGlvbnNcbiAgICB9O1xuICB9XG59O1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGpzb25Gb3JtYXR0ZXJcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9anNvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/json.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/jsonl.js":
/*!*********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/formats/jsonl.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar jsonl_exports = {};\n__export(jsonl_exports, {\n  jsonlFormatter: () => jsonlFormatter\n});\nmodule.exports = __toCommonJS(jsonl_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_json5 = __toESM(__webpack_require__(/*! json5 */ \"(action-browser)/./node_modules/json5/dist/index.mjs\"));\nvar import_extract = __webpack_require__(/*! ../extract */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\");\nfunction objectLines(text) {\n  return text.split(\"\\n\").map((line) => line.trim()).filter((line) => line.startsWith(\"{\"));\n}\nconst jsonlFormatter = {\n  name: \"jsonl\",\n  config: {\n    contentType: \"application/jsonl\"\n  },\n  handler: (schema) => {\n    if (schema && (schema.type !== \"array\" || schema.items?.type !== \"object\")) {\n      throw new import_core.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: `Must supply an 'array' schema type containing 'object' items when using the 'jsonl' parser format.`\n      });\n    }\n    let instructions;\n    if (schema?.items) {\n      instructions = `Output should be JSONL format, a sequence of JSON objects (one per line) separated by a newline \\`\\\\n\\` character. Each line should be a JSON object conforming to the following schema:\n\n\\`\\`\\`\n${JSON.stringify(schema.items)}\n\\`\\`\\`\n    `;\n    }\n    return {\n      parseChunk: (chunk) => {\n        const results = [];\n        const text = chunk.accumulatedText;\n        let startIndex = 0;\n        if (chunk.previousChunks?.length) {\n          const lastNewline = chunk.previousText.lastIndexOf(\"\\n\");\n          if (lastNewline !== -1) {\n            startIndex = lastNewline + 1;\n          }\n        }\n        const lines = text.slice(startIndex).split(\"\\n\");\n        for (const line of lines) {\n          const trimmed = line.trim();\n          if (trimmed.startsWith(\"{\")) {\n            try {\n              const result = import_json5.default.parse(trimmed);\n              if (result) {\n                results.push(result);\n              }\n            } catch (e) {\n              break;\n            }\n          }\n        }\n        return results;\n      },\n      parseMessage: (message) => {\n        const items = objectLines(message.text).map((l) => (0, import_extract.extractJson)(l)).filter((l) => !!l);\n        return items;\n      },\n      instructions\n    };\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=jsonl.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL2pzb25sLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0EsbUdBQW1HO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLDhCQUE4QjtBQUN2RztBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLGtCQUFrQixtQkFBTyxDQUFDLHFGQUFpQjtBQUMzQywyQkFBMkIsbUJBQU8sQ0FBQyxtRUFBTztBQUMxQyxxQkFBcUIsbUJBQU8sQ0FBQyxnRkFBWTtBQUN6QztBQUNBLHdGQUF3RjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsiL2hvbWUvdXNlci9zdHVkaW8vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbGliL2Zvcm1hdHMvanNvbmwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLy8gSWYgdGhlIGltcG9ydGVyIGlzIGluIG5vZGUgY29tcGF0aWJpbGl0eSBtb2RlIG9yIHRoaXMgaXMgbm90IGFuIEVTTVxuICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLVxuICAvLyBjb21wYXRpYmxlIHRyYW5zZm9ybSAoaS5lLiBcIl9fZXNNb2R1bGVcIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXRcbiAgLy8gXCJkZWZhdWx0XCIgdG8gdGhlIENvbW1vbkpTIFwibW9kdWxlLmV4cG9ydHNcIiBmb3Igbm9kZSBjb21wYXRpYmlsaXR5LlxuICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgXCJkZWZhdWx0XCIsIHsgdmFsdWU6IG1vZCwgZW51bWVyYWJsZTogdHJ1ZSB9KSA6IHRhcmdldCxcbiAgbW9kXG4pKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGpzb25sX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGpzb25sX2V4cG9ydHMsIHtcbiAganNvbmxGb3JtYXR0ZXI6ICgpID0+IGpzb25sRm9ybWF0dGVyXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGpzb25sX2V4cG9ydHMpO1xudmFyIGltcG9ydF9jb3JlID0gcmVxdWlyZShcIkBnZW5raXQtYWkvY29yZVwiKTtcbnZhciBpbXBvcnRfanNvbjUgPSBfX3RvRVNNKHJlcXVpcmUoXCJqc29uNVwiKSk7XG52YXIgaW1wb3J0X2V4dHJhY3QgPSByZXF1aXJlKFwiLi4vZXh0cmFjdFwiKTtcbmZ1bmN0aW9uIG9iamVjdExpbmVzKHRleHQpIHtcbiAgcmV0dXJuIHRleHQuc3BsaXQoXCJcXG5cIikubWFwKChsaW5lKSA9PiBsaW5lLnRyaW0oKSkuZmlsdGVyKChsaW5lKSA9PiBsaW5lLnN0YXJ0c1dpdGgoXCJ7XCIpKTtcbn1cbmNvbnN0IGpzb25sRm9ybWF0dGVyID0ge1xuICBuYW1lOiBcImpzb25sXCIsXG4gIGNvbmZpZzoge1xuICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25sXCJcbiAgfSxcbiAgaGFuZGxlcjogKHNjaGVtYSkgPT4ge1xuICAgIGlmIChzY2hlbWEgJiYgKHNjaGVtYS50eXBlICE9PSBcImFycmF5XCIgfHwgc2NoZW1hLml0ZW1zPy50eXBlICE9PSBcIm9iamVjdFwiKSkge1xuICAgICAgdGhyb3cgbmV3IGltcG9ydF9jb3JlLkdlbmtpdEVycm9yKHtcbiAgICAgICAgc3RhdHVzOiBcIklOVkFMSURfQVJHVU1FTlRcIixcbiAgICAgICAgbWVzc2FnZTogYE11c3Qgc3VwcGx5IGFuICdhcnJheScgc2NoZW1hIHR5cGUgY29udGFpbmluZyAnb2JqZWN0JyBpdGVtcyB3aGVuIHVzaW5nIHRoZSAnanNvbmwnIHBhcnNlciBmb3JtYXQuYFxuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCBpbnN0cnVjdGlvbnM7XG4gICAgaWYgKHNjaGVtYT8uaXRlbXMpIHtcbiAgICAgIGluc3RydWN0aW9ucyA9IGBPdXRwdXQgc2hvdWxkIGJlIEpTT05MIGZvcm1hdCwgYSBzZXF1ZW5jZSBvZiBKU09OIG9iamVjdHMgKG9uZSBwZXIgbGluZSkgc2VwYXJhdGVkIGJ5IGEgbmV3bGluZSBcXGBcXFxcblxcYCBjaGFyYWN0ZXIuIEVhY2ggbGluZSBzaG91bGQgYmUgYSBKU09OIG9iamVjdCBjb25mb3JtaW5nIHRvIHRoZSBmb2xsb3dpbmcgc2NoZW1hOlxuXG5cXGBcXGBcXGBcbiR7SlNPTi5zdHJpbmdpZnkoc2NoZW1hLml0ZW1zKX1cblxcYFxcYFxcYFxuICAgIGA7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBwYXJzZUNodW5rOiAoY2h1bmspID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICAgICAgICBjb25zdCB0ZXh0ID0gY2h1bmsuYWNjdW11bGF0ZWRUZXh0O1xuICAgICAgICBsZXQgc3RhcnRJbmRleCA9IDA7XG4gICAgICAgIGlmIChjaHVuay5wcmV2aW91c0NodW5rcz8ubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc3QgbGFzdE5ld2xpbmUgPSBjaHVuay5wcmV2aW91c1RleHQubGFzdEluZGV4T2YoXCJcXG5cIik7XG4gICAgICAgICAgaWYgKGxhc3ROZXdsaW5lICE9PSAtMSkge1xuICAgICAgICAgICAgc3RhcnRJbmRleCA9IGxhc3ROZXdsaW5lICsgMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGluZXMgPSB0ZXh0LnNsaWNlKHN0YXJ0SW5kZXgpLnNwbGl0KFwiXFxuXCIpO1xuICAgICAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcbiAgICAgICAgICBjb25zdCB0cmltbWVkID0gbGluZS50cmltKCk7XG4gICAgICAgICAgaWYgKHRyaW1tZWQuc3RhcnRzV2l0aChcIntcIikpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGltcG9ydF9qc29uNS5kZWZhdWx0LnBhcnNlKHRyaW1tZWQpO1xuICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfSxcbiAgICAgIHBhcnNlTWVzc2FnZTogKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgY29uc3QgaXRlbXMgPSBvYmplY3RMaW5lcyhtZXNzYWdlLnRleHQpLm1hcCgobCkgPT4gKDAsIGltcG9ydF9leHRyYWN0LmV4dHJhY3RKc29uKShsKSkuZmlsdGVyKChsKSA9PiAhIWwpO1xuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgICB9LFxuICAgICAgaW5zdHJ1Y3Rpb25zXG4gICAgfTtcbiAgfVxufTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBqc29ubEZvcm1hdHRlclxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qc29ubC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/jsonl.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/text.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/formats/text.js ***!
  \********************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar text_exports = {};\n__export(text_exports, {\n  textFormatter: () => textFormatter\n});\nmodule.exports = __toCommonJS(text_exports);\nconst textFormatter = {\n  name: \"text\",\n  config: {\n    contentType: \"text/plain\"\n  },\n  handler: () => {\n    return {\n      parseChunk: (chunk) => {\n        return chunk.text;\n      },\n      parseMessage: (message) => {\n        return message.text;\n      }\n    };\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=text.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9mb3JtYXRzL3RleHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FFTDtBQUNEIiwic291cmNlcyI6WyIvaG9tZS91c2VyL3N0dWRpby9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9saWIvZm9ybWF0cy90ZXh0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciB0ZXh0X2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHRleHRfZXhwb3J0cywge1xuICB0ZXh0Rm9ybWF0dGVyOiAoKSA9PiB0ZXh0Rm9ybWF0dGVyXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHRleHRfZXhwb3J0cyk7XG5jb25zdCB0ZXh0Rm9ybWF0dGVyID0ge1xuICBuYW1lOiBcInRleHRcIixcbiAgY29uZmlnOiB7XG4gICAgY29udGVudFR5cGU6IFwidGV4dC9wbGFpblwiXG4gIH0sXG4gIGhhbmRsZXI6ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgcGFyc2VDaHVuazogKGNodW5rKSA9PiB7XG4gICAgICAgIHJldHVybiBjaHVuay50ZXh0O1xuICAgICAgfSxcbiAgICAgIHBhcnNlTWVzc2FnZTogKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2UudGV4dDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIHRleHRGb3JtYXR0ZXJcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGV4dC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/text.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/generate.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar generate_exports = {};\n__export(generate_exports, {\n  GenerateResponse: () => import_response.GenerateResponse,\n  GenerateResponseChunk: () => import_chunk.GenerateResponseChunk,\n  GenerationBlockedError: () => GenerationBlockedError,\n  GenerationResponseError: () => GenerationResponseError,\n  generate: () => generate,\n  generateOperation: () => generateOperation,\n  generateStream: () => generateStream,\n  tagAsPreamble: () => tagAsPreamble,\n  toGenerateActionOptions: () => toGenerateActionOptions,\n  toGenerateRequest: () => toGenerateRequest\n});\nmodule.exports = __toCommonJS(generate_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_async = __webpack_require__(/*! @genkit-ai/core/async */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async.js\");\nvar import_registry = __webpack_require__(/*! @genkit-ai/core/registry */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_formats = __webpack_require__(/*! ./formats/index.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/index.js\");\nvar import_action = __webpack_require__(/*! ./generate/action.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/action.js\");\nvar import_chunk = __webpack_require__(/*! ./generate/chunk.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/chunk.js\");\nvar import_response = __webpack_require__(/*! ./generate/response.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/response.js\");\nvar import_message = __webpack_require__(/*! ./message.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/message.js\");\nvar import_model = __webpack_require__(/*! ./model.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js\");\nvar import_prompt = __webpack_require__(/*! ./prompt.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/prompt.js\");\nvar import_tool = __webpack_require__(/*! ./tool.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js\");\nasync function toGenerateRequest(registry, options) {\n  const messages = [];\n  if (options.system) {\n    messages.push({\n      role: \"system\",\n      content: import_message.Message.parseContent(options.system)\n    });\n  }\n  if (options.messages) {\n    messages.push(...options.messages.map((m) => import_message.Message.parseData(m)));\n  }\n  if (options.prompt) {\n    messages.push({\n      role: \"user\",\n      content: import_message.Message.parseContent(options.prompt)\n    });\n  }\n  if (messages.length === 0) {\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: \"at least one message is required in generate request\"\n    });\n  }\n  if (options.resume && !(messages.at(-1)?.role === \"model\" && messages.at(-1)?.content.find((p) => !!p.toolRequest))) {\n    throw new import_core.GenkitError({\n      status: \"FAILED_PRECONDITION\",\n      message: `Last message must be a 'model' role with at least one tool request to 'resume' generation.`,\n      detail: messages.at(-1)\n    });\n  }\n  let tools;\n  if (options.tools) {\n    tools = await (0, import_tool.resolveTools)(registry, options.tools);\n  }\n  const resolvedSchema = (0, import_schema.toJsonSchema)({\n    schema: options.output?.schema,\n    jsonSchema: options.output?.jsonSchema\n  });\n  const resolvedFormat = await (0, import_formats.resolveFormat)(registry, options.output);\n  const instructions = (0, import_formats.resolveInstructions)(\n    resolvedFormat,\n    resolvedSchema,\n    options?.output?.instructions\n  );\n  const out = {\n    messages: (0, import_action.shouldInjectFormatInstructions)(\n      resolvedFormat?.config,\n      options.output\n    ) ? (0, import_formats.injectInstructions)(messages, instructions) : messages,\n    config: options.config,\n    docs: options.docs,\n    tools: tools?.map(import_tool.toToolDefinition) || [],\n    output: {\n      ...resolvedFormat?.config || {},\n      ...options.output,\n      schema: resolvedSchema\n    }\n  };\n  if (!out?.output?.schema) delete out?.output?.schema;\n  return out;\n}\nclass GenerationResponseError extends import_core.GenkitError {\n  detail;\n  constructor(response, message, status, detail) {\n    super({\n      status: status || \"FAILED_PRECONDITION\",\n      message\n    });\n    this.detail = { response, ...detail };\n  }\n}\nasync function toolsToActionRefs(registry, toolOpt) {\n  if (!toolOpt) return;\n  const tools = [];\n  for (const t of toolOpt) {\n    if (typeof t === \"string\") {\n      tools.push(await resolveFullToolName(registry, t));\n    } else if ((0, import_core.isAction)(t) || (0, import_tool.isDynamicTool)(t)) {\n      tools.push(`/${t.__action.metadata?.type}/${t.__action.name}`);\n    } else if ((0, import_prompt.isExecutablePrompt)(t)) {\n      const promptToolAction = await t.asTool();\n      tools.push(`/prompt/${promptToolAction.__action.name}`);\n    } else {\n      throw new Error(`Unable to determine type of tool: ${JSON.stringify(t)}`);\n    }\n  }\n  return tools;\n}\nfunction messagesFromOptions(options) {\n  const messages = [];\n  if (options.system) {\n    messages.push({\n      role: \"system\",\n      content: import_message.Message.parseContent(options.system)\n    });\n  }\n  if (options.messages) {\n    messages.push(...options.messages);\n  }\n  if (options.prompt) {\n    messages.push({\n      role: \"user\",\n      content: import_message.Message.parseContent(options.prompt)\n    });\n  }\n  if (messages.length === 0) {\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: \"at least one message is required in generate request\"\n    });\n  }\n  return messages;\n}\nclass GenerationBlockedError extends GenerationResponseError {\n}\nasync function generate(registry, options) {\n  const resolvedOptions = {\n    ...await Promise.resolve(options)\n  };\n  const resolvedFormat = await (0, import_formats.resolveFormat)(registry, resolvedOptions.output);\n  registry = maybeRegisterDynamicTools(registry, resolvedOptions);\n  const params = await toGenerateActionOptions(registry, resolvedOptions);\n  const tools = await toolsToActionRefs(registry, resolvedOptions.tools);\n  return await (0, import_core.runWithStreamingCallback)(\n    registry,\n    stripNoop(resolvedOptions.onChunk ?? resolvedOptions.streamingCallback),\n    async () => {\n      const response = await (0, import_core.runWithContext)(\n        registry,\n        resolvedOptions.context,\n        () => (0, import_action.generateHelper)(registry, {\n          rawRequest: params,\n          middleware: resolvedOptions.use,\n          abortSignal: resolvedOptions.abortSignal\n        })\n      );\n      const request = await toGenerateRequest(registry, {\n        ...resolvedOptions,\n        tools\n      });\n      return new import_response.GenerateResponse(response, {\n        request: response.request ?? request,\n        parser: resolvedFormat?.handler(request.output?.schema).parseMessage\n      });\n    }\n  );\n}\nasync function generateOperation(registry, options) {\n  (0, import_core.assertUnstable)(registry, \"beta\", \"generateOperation is a beta feature.\");\n  options = await options;\n  const resolvedModel = await (0, import_model.resolveModel)(registry, options.model);\n  if (!resolvedModel.modelAction.__action.metadata?.model.supports?.longRunning) {\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: `Model '${resolvedModel.modelAction.__action.name}' does not support long running operations.`\n    });\n  }\n  const { operation } = await generate(registry, options);\n  if (!operation) {\n    throw new import_core.GenkitError({\n      status: \"FAILED_PRECONDITION\",\n      message: `Model '${resolvedModel.modelAction.__action.name}' did not return an operation.`\n    });\n  }\n  return operation;\n}\nfunction maybeRegisterDynamicTools(registry, options) {\n  let hasDynamicTools = false;\n  options?.tools?.forEach((t) => {\n    if ((0, import_tool.isDynamicTool)(t)) {\n      if ((0, import_core.isDetachedAction)(t)) {\n        t = t.attach(registry);\n      }\n      if (!hasDynamicTools) {\n        hasDynamicTools = true;\n        registry = import_registry.Registry.withParent(registry);\n      }\n      registry.registerAction(\"tool\", t);\n    }\n  });\n  return registry;\n}\nasync function toGenerateActionOptions(registry, options) {\n  const resolvedModel = await (0, import_model.resolveModel)(registry, options.model);\n  const tools = await toolsToActionRefs(registry, options.tools);\n  const messages = messagesFromOptions(options);\n  const resolvedSchema = (0, import_schema.toJsonSchema)({\n    schema: options.output?.schema,\n    jsonSchema: options.output?.jsonSchema\n  });\n  if ((options.output?.schema || options.output?.jsonSchema) && !options.output?.format) {\n    options.output.format = \"json\";\n  }\n  const params = {\n    model: resolvedModel.modelAction.__action.name,\n    docs: options.docs,\n    messages,\n    tools,\n    toolChoice: options.toolChoice,\n    config: {\n      version: resolvedModel.version,\n      ...stripUndefinedOptions(resolvedModel.config),\n      ...stripUndefinedOptions(options.config)\n    },\n    output: options.output && {\n      ...options.output,\n      format: options.output.format,\n      jsonSchema: resolvedSchema\n    },\n    // coerce reply and restart into arrays for the action schema\n    resume: options.resume && {\n      respond: [options.resume.respond || []].flat(),\n      restart: [options.resume.restart || []].flat(),\n      metadata: options.resume.metadata\n    },\n    returnToolRequests: options.returnToolRequests,\n    maxTurns: options.maxTurns\n  };\n  if (Object.keys(params.config).length === 0 && !options.config) {\n    delete params.config;\n  }\n  return params;\n}\nfunction stripNoop(callback) {\n  if (callback === import_core.sentinelNoopStreamingCallback) {\n    return void 0;\n  }\n  return callback;\n}\nfunction stripUndefinedOptions(input) {\n  if (!input) return input;\n  const copy = { ...input };\n  Object.keys(input).forEach((key) => {\n    if (copy[key] === void 0) {\n      delete copy[key];\n    }\n  });\n  return copy;\n}\nasync function resolveFullToolName(registry, name) {\n  if (await registry.lookupAction(`/tool/${name}`)) {\n    return `/tool/${name}`;\n  } else if (await registry.lookupAction(`/prompt/${name}`)) {\n    return `/prompt/${name}`;\n  } else {\n    throw new Error(`Unable to determine type of of tool: ${name}`);\n  }\n}\nfunction generateStream(registry, options) {\n  const channel = new import_async.Channel();\n  const generated = Promise.resolve(options).then(\n    (resolvedOptions) => generate(registry, {\n      ...resolvedOptions,\n      onChunk: (chunk) => channel.send(chunk)\n    })\n  );\n  generated.then(\n    () => channel.close(),\n    (err) => channel.error(err)\n  );\n  return {\n    response: generated,\n    stream: channel\n  };\n}\nfunction tagAsPreamble(msgs) {\n  if (!msgs) {\n    return void 0;\n  }\n  return msgs.map((m) => ({\n    ...m,\n    metadata: {\n      ...m.metadata,\n      preamble: true\n    }\n  }));\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=generate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/action.js":
/*!***********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/generate/action.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar action_exports = {};\n__export(action_exports, {\n  defineGenerateAction: () => defineGenerateAction,\n  generateHelper: () => generateHelper,\n  inferRoleFromParts: () => inferRoleFromParts,\n  shouldInjectFormatInstructions: () => shouldInjectFormatInstructions\n});\nmodule.exports = __toCommonJS(action_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_logging = __webpack_require__(/*! @genkit-ai/core/logging */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_tracing = __webpack_require__(/*! @genkit-ai/core/tracing */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_formats = __webpack_require__(/*! ../formats/index.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/index.js\");\nvar import_generate = __webpack_require__(/*! ../generate.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js\");\nvar import_model = __webpack_require__(/*! ../model.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js\");\nvar import_tool = __webpack_require__(/*! ../tool.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js\");\nvar import_resolve_tool_requests = __webpack_require__(/*! ./resolve-tool-requests.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/resolve-tool-requests.js\");\nfunction defineGenerateAction(registry) {\n  return (0, import_core.defineAction)(\n    registry,\n    {\n      actionType: \"util\",\n      name: \"generate\",\n      inputSchema: import_model.GenerateActionOptionsSchema,\n      outputSchema: import_model.GenerateResponseSchema,\n      streamSchema: import_model.GenerateResponseChunkSchema\n    },\n    async (request, { streamingRequested, sendChunk }) => {\n      const generateFn = () => generate(registry, {\n        rawRequest: request,\n        currentTurn: 0,\n        messageIndex: 0,\n        // Generate util action does not support middleware. Maybe when we add named/registered middleware....\n        middleware: []\n      });\n      return streamingRequested ? (0, import_core.runWithStreamingCallback)(\n        registry,\n        (c) => sendChunk(c.toJSON ? c.toJSON() : c),\n        generateFn\n      ) : generateFn();\n    }\n  );\n}\nasync function generateHelper(registry, options) {\n  const currentTurn = options.currentTurn ?? 0;\n  const messageIndex = options.messageIndex ?? 0;\n  return await (0, import_tracing.runInNewSpan)(\n    registry,\n    {\n      metadata: {\n        name: \"generate\"\n      },\n      labels: {\n        [import_tracing.SPAN_TYPE_ATTR]: \"util\"\n      }\n    },\n    async (metadata) => {\n      metadata.name = \"generate\";\n      metadata.input = options.rawRequest;\n      const output = await generate(registry, {\n        rawRequest: options.rawRequest,\n        middleware: options.middleware,\n        currentTurn,\n        messageIndex,\n        abortSignal: options.abortSignal\n      });\n      metadata.output = JSON.stringify(output);\n      return output;\n    }\n  );\n}\nasync function resolveParameters(registry, request) {\n  const [model, tools, format] = await Promise.all([\n    (0, import_model.resolveModel)(registry, request.model, { warnDeprecated: true }).then(\n      (r) => r.modelAction\n    ),\n    (0, import_tool.resolveTools)(registry, request.tools),\n    (0, import_formats.resolveFormat)(registry, request.output)\n  ]);\n  return { model, tools, format };\n}\nfunction applyFormat(rawRequest, resolvedFormat) {\n  const outRequest = { ...rawRequest };\n  if (rawRequest.output?.jsonSchema && !rawRequest.output?.format) {\n    outRequest.output = { ...rawRequest.output, format: \"json\" };\n  }\n  const instructions = (0, import_formats.resolveInstructions)(\n    resolvedFormat,\n    outRequest.output?.jsonSchema,\n    outRequest?.output?.instructions\n  );\n  if (resolvedFormat) {\n    if (shouldInjectFormatInstructions(resolvedFormat.config, rawRequest?.output)) {\n      outRequest.messages = (0, import_formats.injectInstructions)(\n        outRequest.messages,\n        instructions\n      );\n    }\n    outRequest.output = {\n      // use output config from the format\n      ...resolvedFormat.config,\n      // if anything is set explicitly, use that\n      ...outRequest.output\n    };\n  }\n  return outRequest;\n}\nfunction shouldInjectFormatInstructions(formatConfig, rawRequestConfig) {\n  return formatConfig?.defaultInstructions !== false || rawRequestConfig?.instructions;\n}\nfunction applyTransferPreamble(rawRequest, transferPreamble) {\n  if (!transferPreamble) {\n    return rawRequest;\n  }\n  return (0, import_core.stripUndefinedProps)({\n    ...rawRequest,\n    messages: [\n      ...(0, import_generate.tagAsPreamble)(transferPreamble.messages),\n      ...rawRequest.messages.filter((m) => !m.metadata?.preamble)\n    ],\n    toolChoice: transferPreamble.toolChoice || rawRequest.toolChoice,\n    tools: transferPreamble.tools || rawRequest.tools,\n    config: transferPreamble.config || rawRequest.config\n  });\n}\nasync function generate(registry, {\n  rawRequest,\n  middleware,\n  currentTurn,\n  messageIndex,\n  abortSignal\n}) {\n  const { model, tools, format } = await resolveParameters(\n    registry,\n    rawRequest\n  );\n  rawRequest = applyFormat(rawRequest, format);\n  await (0, import_resolve_tool_requests.assertValidToolNames)(tools);\n  const {\n    revisedRequest,\n    interruptedResponse,\n    toolMessage: resumedToolMessage\n  } = await (0, import_resolve_tool_requests.resolveResumeOption)(registry, rawRequest);\n  if (interruptedResponse) {\n    throw new import_core.GenkitError({\n      status: \"FAILED_PRECONDITION\",\n      message: \"One or more tools triggered an interrupt during a restarted execution.\",\n      detail: { message: interruptedResponse.message }\n    });\n  }\n  rawRequest = revisedRequest;\n  const request = await actionToGenerateRequest(\n    rawRequest,\n    tools,\n    format,\n    model\n  );\n  const previousChunks = [];\n  let chunkRole = \"model\";\n  const makeChunk = (role, chunk) => {\n    if (role !== chunkRole && previousChunks.length) messageIndex++;\n    chunkRole = role;\n    const prevToSend = [...previousChunks];\n    previousChunks.push(chunk);\n    return new import_generate.GenerateResponseChunk(chunk, {\n      index: messageIndex,\n      role,\n      previousChunks: prevToSend,\n      parser: format?.handler(request.output?.schema).parseChunk\n    });\n  };\n  const streamingCallback = (0, import_core.getStreamingCallback)(registry);\n  if (resumedToolMessage && streamingCallback) {\n    streamingCallback(makeChunk(\"tool\", resumedToolMessage));\n  }\n  const response = await (0, import_core.runWithStreamingCallback)(\n    registry,\n    streamingCallback && ((chunk) => streamingCallback(makeChunk(\"model\", chunk))),\n    async () => {\n      const dispatch = async (index, req) => {\n        if (!middleware || index === middleware.length) {\n          return await model(req, { abortSignal });\n        }\n        const currentMiddleware = middleware[index];\n        return currentMiddleware(\n          req,\n          async (modifiedReq) => dispatch(index + 1, modifiedReq || req)\n        );\n      };\n      const modelResponse = await dispatch(0, request);\n      if (model.__action.actionType === \"background-model\") {\n        return new import_generate.GenerateResponse(\n          { operation: modelResponse },\n          {\n            request,\n            parser: format?.handler(request.output?.schema).parseMessage\n          }\n        );\n      }\n      return new import_generate.GenerateResponse(modelResponse, {\n        request,\n        parser: format?.handler(request.output?.schema).parseMessage\n      });\n    }\n  );\n  if (model.__action.actionType === \"background-model\") {\n    return response.toJSON();\n  }\n  response.assertValid();\n  const generatedMessage = response.message;\n  const toolRequests = generatedMessage.content.filter(\n    (part) => !!part.toolRequest\n  );\n  if (rawRequest.returnToolRequests || toolRequests.length === 0) {\n    if (toolRequests.length === 0) response.assertValidSchema(request);\n    return response.toJSON();\n  }\n  const maxIterations = rawRequest.maxTurns ?? 5;\n  if (currentTurn + 1 > maxIterations) {\n    throw new import_generate.GenerationResponseError(\n      response,\n      `Exceeded maximum tool call iterations (${maxIterations})`,\n      \"ABORTED\",\n      { request }\n    );\n  }\n  const { revisedModelMessage, toolMessage, transferPreamble } = await (0, import_resolve_tool_requests.resolveToolRequests)(registry, rawRequest, generatedMessage);\n  if (revisedModelMessage) {\n    return {\n      ...response.toJSON(),\n      finishReason: \"interrupted\",\n      finishMessage: \"One or more tool calls resulted in interrupts.\",\n      message: revisedModelMessage\n    };\n  }\n  streamingCallback?.(\n    makeChunk(\"tool\", {\n      content: toolMessage.content\n    })\n  );\n  let nextRequest = {\n    ...rawRequest,\n    messages: [...rawRequest.messages, generatedMessage.toJSON(), toolMessage]\n  };\n  nextRequest = applyTransferPreamble(nextRequest, transferPreamble);\n  return await generateHelper(registry, {\n    rawRequest: nextRequest,\n    middleware,\n    currentTurn: currentTurn + 1,\n    messageIndex: messageIndex + 1\n  });\n}\nasync function actionToGenerateRequest(options, resolvedTools, resolvedFormat, model) {\n  const modelInfo = model.__action.metadata?.model;\n  if ((options.tools?.length ?? 0) > 0 && modelInfo?.supports && !modelInfo?.supports?.tools) {\n    import_logging.logger.warn(\n      `The model '${model.__action.name}' does not support tools (you set: ${options.tools?.length} tools). The model may not behave the way you expect.`\n    );\n  }\n  if (options.toolChoice && modelInfo?.supports && !modelInfo?.supports?.toolChoice) {\n    import_logging.logger.warn(\n      `The model '${model.__action.name}' does not support the 'toolChoice' option (you set: ${options.toolChoice}). The model may not behave the way you expect.`\n    );\n  }\n  const out = {\n    messages: options.messages,\n    config: options.config,\n    docs: options.docs,\n    tools: resolvedTools?.map(import_tool.toToolDefinition) || [],\n    output: (0, import_core.stripUndefinedProps)({\n      constrained: options.output?.constrained,\n      contentType: options.output?.contentType,\n      format: options.output?.format,\n      schema: options.output?.jsonSchema\n    })\n  };\n  if (options.toolChoice) {\n    out.toolChoice = options.toolChoice;\n  }\n  if (out.output && !out.output.schema) delete out.output.schema;\n  return out;\n}\nfunction inferRoleFromParts(parts) {\n  const uniqueRoles = /* @__PURE__ */ new Set();\n  for (const part of parts) {\n    const role = getRoleFromPart(part);\n    uniqueRoles.add(role);\n    if (uniqueRoles.size > 1) {\n      throw new Error(\"Contents contain mixed roles\");\n    }\n  }\n  return Array.from(uniqueRoles)[0];\n}\nfunction getRoleFromPart(part) {\n  if (part.toolRequest !== void 0) return \"model\";\n  if (part.toolResponse !== void 0) return \"tool\";\n  if (part.text !== void 0) return \"user\";\n  if (part.media !== void 0) return \"user\";\n  if (part.data !== void 0) return \"user\";\n  throw new Error(\"No recognized fields in content\");\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=action.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/action.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/chunk.js":
/*!**********************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/generate/chunk.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar chunk_exports = {};\n__export(chunk_exports, {\n  GenerateResponseChunk: () => GenerateResponseChunk\n});\nmodule.exports = __toCommonJS(chunk_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_extract = __webpack_require__(/*! ../extract.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\");\nclass GenerateResponseChunk {\n  /** The index of the message this chunk corresponds to, starting with `0` for the first model response of the generation. */\n  index;\n  /** The role of the message this chunk corresponds to. Will always be `model` or `tool`. */\n  role;\n  /** The content generated in this chunk. */\n  content;\n  /** Custom model-specific data for this chunk. */\n  custom;\n  /** Accumulated chunks for partial output extraction. */\n  previousChunks;\n  /** The parser to be used to parse `output` from this chunk. */\n  parser;\n  constructor(data, options) {\n    this.content = data.content || [];\n    this.custom = data.custom;\n    this.previousChunks = options.previousChunks ? [...options.previousChunks] : void 0;\n    this.index = options.index;\n    this.role = options.role;\n    this.parser = options.parser;\n  }\n  /**\n   * Concatenates all `text` parts present in the chunk with no delimiter.\n   * @returns A string of all concatenated text parts.\n   */\n  get text() {\n    return this.content.map((part) => part.text || \"\").join(\"\");\n  }\n  /**\n   * Concatenates all `reasoning` parts present in the chunk with no delimiter.\n   * @returns A string of all concatenated reasoning parts.\n   */\n  get reasoning() {\n    return this.content.map((part) => part.reasoning || \"\").join(\"\");\n  }\n  /**\n   * Concatenates all `text` parts of all chunks from the response thus far.\n   * @returns A string of all concatenated chunk text content.\n   */\n  get accumulatedText() {\n    return this.previousText + this.text;\n  }\n  /**\n   * Concatenates all `text` parts of all preceding chunks.\n   */\n  get previousText() {\n    if (!this.previousChunks)\n      throw new import_core.GenkitError({\n        status: \"FAILED_PRECONDITION\",\n        message: \"Cannot compose accumulated text without previous chunks.\"\n      });\n    return this.previousChunks?.map((c) => c.content.map((p) => p.text || \"\").join(\"\")).join(\"\");\n  }\n  /**\n   * Returns the first media part detected in the chunk. Useful for extracting\n   * (for example) an image from a generation expected to create one.\n   * @returns The first detected `media` part in the chunk.\n   */\n  get media() {\n    return this.content.find((part) => part.media)?.media || null;\n  }\n  /**\n   * Returns the first detected `data` part of a chunk.\n   * @returns The first `data` part detected in the chunk (if any).\n   */\n  get data() {\n    return this.content.find((part) => part.data)?.data;\n  }\n  /**\n   * Returns all tool request found in this chunk.\n   * @returns Array of all tool request found in this chunk.\n   */\n  get toolRequests() {\n    return this.content.filter(\n      (part) => !!part.toolRequest\n    );\n  }\n  /**\n   * Parses the chunk into the desired output format using the parser associated\n   * with the generate request, or falls back to naive JSON parsing otherwise.\n   */\n  get output() {\n    if (this.parser) return this.parser(this);\n    return this.data || (0, import_extract.extractJson)(this.accumulatedText);\n  }\n  toJSON() {\n    const data = {\n      role: this.role,\n      index: this.index,\n      content: this.content\n    };\n    if (this.custom) {\n      data.custom = this.custom;\n    }\n    return data;\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=chunk.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9nZW5lcmF0ZS9jaHVuay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLGtCQUFrQixtQkFBTyxDQUFDLHFGQUFpQjtBQUMzQyxxQkFBcUIsbUJBQU8sQ0FBQyxtRkFBZTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsiL2hvbWUvdXNlci9zdHVkaW8vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvYWkvbGliL2dlbmVyYXRlL2NodW5rLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBjaHVua19leHBvcnRzID0ge307XG5fX2V4cG9ydChjaHVua19leHBvcnRzLCB7XG4gIEdlbmVyYXRlUmVzcG9uc2VDaHVuazogKCkgPT4gR2VuZXJhdGVSZXNwb25zZUNodW5rXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGNodW5rX2V4cG9ydHMpO1xudmFyIGltcG9ydF9jb3JlID0gcmVxdWlyZShcIkBnZW5raXQtYWkvY29yZVwiKTtcbnZhciBpbXBvcnRfZXh0cmFjdCA9IHJlcXVpcmUoXCIuLi9leHRyYWN0LmpzXCIpO1xuY2xhc3MgR2VuZXJhdGVSZXNwb25zZUNodW5rIHtcbiAgLyoqIFRoZSBpbmRleCBvZiB0aGUgbWVzc2FnZSB0aGlzIGNodW5rIGNvcnJlc3BvbmRzIHRvLCBzdGFydGluZyB3aXRoIGAwYCBmb3IgdGhlIGZpcnN0IG1vZGVsIHJlc3BvbnNlIG9mIHRoZSBnZW5lcmF0aW9uLiAqL1xuICBpbmRleDtcbiAgLyoqIFRoZSByb2xlIG9mIHRoZSBtZXNzYWdlIHRoaXMgY2h1bmsgY29ycmVzcG9uZHMgdG8uIFdpbGwgYWx3YXlzIGJlIGBtb2RlbGAgb3IgYHRvb2xgLiAqL1xuICByb2xlO1xuICAvKiogVGhlIGNvbnRlbnQgZ2VuZXJhdGVkIGluIHRoaXMgY2h1bmsuICovXG4gIGNvbnRlbnQ7XG4gIC8qKiBDdXN0b20gbW9kZWwtc3BlY2lmaWMgZGF0YSBmb3IgdGhpcyBjaHVuay4gKi9cbiAgY3VzdG9tO1xuICAvKiogQWNjdW11bGF0ZWQgY2h1bmtzIGZvciBwYXJ0aWFsIG91dHB1dCBleHRyYWN0aW9uLiAqL1xuICBwcmV2aW91c0NodW5rcztcbiAgLyoqIFRoZSBwYXJzZXIgdG8gYmUgdXNlZCB0byBwYXJzZSBgb3V0cHV0YCBmcm9tIHRoaXMgY2h1bmsuICovXG4gIHBhcnNlcjtcbiAgY29uc3RydWN0b3IoZGF0YSwgb3B0aW9ucykge1xuICAgIHRoaXMuY29udGVudCA9IGRhdGEuY29udGVudCB8fCBbXTtcbiAgICB0aGlzLmN1c3RvbSA9IGRhdGEuY3VzdG9tO1xuICAgIHRoaXMucHJldmlvdXNDaHVua3MgPSBvcHRpb25zLnByZXZpb3VzQ2h1bmtzID8gWy4uLm9wdGlvbnMucHJldmlvdXNDaHVua3NdIDogdm9pZCAwO1xuICAgIHRoaXMuaW5kZXggPSBvcHRpb25zLmluZGV4O1xuICAgIHRoaXMucm9sZSA9IG9wdGlvbnMucm9sZTtcbiAgICB0aGlzLnBhcnNlciA9IG9wdGlvbnMucGFyc2VyO1xuICB9XG4gIC8qKlxuICAgKiBDb25jYXRlbmF0ZXMgYWxsIGB0ZXh0YCBwYXJ0cyBwcmVzZW50IGluIHRoZSBjaHVuayB3aXRoIG5vIGRlbGltaXRlci5cbiAgICogQHJldHVybnMgQSBzdHJpbmcgb2YgYWxsIGNvbmNhdGVuYXRlZCB0ZXh0IHBhcnRzLlxuICAgKi9cbiAgZ2V0IHRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudC5tYXAoKHBhcnQpID0+IHBhcnQudGV4dCB8fCBcIlwiKS5qb2luKFwiXCIpO1xuICB9XG4gIC8qKlxuICAgKiBDb25jYXRlbmF0ZXMgYWxsIGByZWFzb25pbmdgIHBhcnRzIHByZXNlbnQgaW4gdGhlIGNodW5rIHdpdGggbm8gZGVsaW1pdGVyLlxuICAgKiBAcmV0dXJucyBBIHN0cmluZyBvZiBhbGwgY29uY2F0ZW5hdGVkIHJlYXNvbmluZyBwYXJ0cy5cbiAgICovXG4gIGdldCByZWFzb25pbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudC5tYXAoKHBhcnQpID0+IHBhcnQucmVhc29uaW5nIHx8IFwiXCIpLmpvaW4oXCJcIik7XG4gIH1cbiAgLyoqXG4gICAqIENvbmNhdGVuYXRlcyBhbGwgYHRleHRgIHBhcnRzIG9mIGFsbCBjaHVua3MgZnJvbSB0aGUgcmVzcG9uc2UgdGh1cyBmYXIuXG4gICAqIEByZXR1cm5zIEEgc3RyaW5nIG9mIGFsbCBjb25jYXRlbmF0ZWQgY2h1bmsgdGV4dCBjb250ZW50LlxuICAgKi9cbiAgZ2V0IGFjY3VtdWxhdGVkVGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcmV2aW91c1RleHQgKyB0aGlzLnRleHQ7XG4gIH1cbiAgLyoqXG4gICAqIENvbmNhdGVuYXRlcyBhbGwgYHRleHRgIHBhcnRzIG9mIGFsbCBwcmVjZWRpbmcgY2h1bmtzLlxuICAgKi9cbiAgZ2V0IHByZXZpb3VzVGV4dCgpIHtcbiAgICBpZiAoIXRoaXMucHJldmlvdXNDaHVua3MpXG4gICAgICB0aHJvdyBuZXcgaW1wb3J0X2NvcmUuR2Vua2l0RXJyb3Ioe1xuICAgICAgICBzdGF0dXM6IFwiRkFJTEVEX1BSRUNPTkRJVElPTlwiLFxuICAgICAgICBtZXNzYWdlOiBcIkNhbm5vdCBjb21wb3NlIGFjY3VtdWxhdGVkIHRleHQgd2l0aG91dCBwcmV2aW91cyBjaHVua3MuXCJcbiAgICAgIH0pO1xuICAgIHJldHVybiB0aGlzLnByZXZpb3VzQ2h1bmtzPy5tYXAoKGMpID0+IGMuY29udGVudC5tYXAoKHApID0+IHAudGV4dCB8fCBcIlwiKS5qb2luKFwiXCIpKS5qb2luKFwiXCIpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBmaXJzdCBtZWRpYSBwYXJ0IGRldGVjdGVkIGluIHRoZSBjaHVuay4gVXNlZnVsIGZvciBleHRyYWN0aW5nXG4gICAqIChmb3IgZXhhbXBsZSkgYW4gaW1hZ2UgZnJvbSBhIGdlbmVyYXRpb24gZXhwZWN0ZWQgdG8gY3JlYXRlIG9uZS5cbiAgICogQHJldHVybnMgVGhlIGZpcnN0IGRldGVjdGVkIGBtZWRpYWAgcGFydCBpbiB0aGUgY2h1bmsuXG4gICAqL1xuICBnZXQgbWVkaWEoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudC5maW5kKChwYXJ0KSA9PiBwYXJ0Lm1lZGlhKT8ubWVkaWEgfHwgbnVsbDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZmlyc3QgZGV0ZWN0ZWQgYGRhdGFgIHBhcnQgb2YgYSBjaHVuay5cbiAgICogQHJldHVybnMgVGhlIGZpcnN0IGBkYXRhYCBwYXJ0IGRldGVjdGVkIGluIHRoZSBjaHVuayAoaWYgYW55KS5cbiAgICovXG4gIGdldCBkYXRhKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnQuZmluZCgocGFydCkgPT4gcGFydC5kYXRhKT8uZGF0YTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbGwgdG9vbCByZXF1ZXN0IGZvdW5kIGluIHRoaXMgY2h1bmsuXG4gICAqIEByZXR1cm5zIEFycmF5IG9mIGFsbCB0b29sIHJlcXVlc3QgZm91bmQgaW4gdGhpcyBjaHVuay5cbiAgICovXG4gIGdldCB0b29sUmVxdWVzdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudC5maWx0ZXIoXG4gICAgICAocGFydCkgPT4gISFwYXJ0LnRvb2xSZXF1ZXN0XG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogUGFyc2VzIHRoZSBjaHVuayBpbnRvIHRoZSBkZXNpcmVkIG91dHB1dCBmb3JtYXQgdXNpbmcgdGhlIHBhcnNlciBhc3NvY2lhdGVkXG4gICAqIHdpdGggdGhlIGdlbmVyYXRlIHJlcXVlc3QsIG9yIGZhbGxzIGJhY2sgdG8gbmFpdmUgSlNPTiBwYXJzaW5nIG90aGVyd2lzZS5cbiAgICovXG4gIGdldCBvdXRwdXQoKSB7XG4gICAgaWYgKHRoaXMucGFyc2VyKSByZXR1cm4gdGhpcy5wYXJzZXIodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMuZGF0YSB8fCAoMCwgaW1wb3J0X2V4dHJhY3QuZXh0cmFjdEpzb24pKHRoaXMuYWNjdW11bGF0ZWRUZXh0KTtcbiAgfVxuICB0b0pTT04oKSB7XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIHJvbGU6IHRoaXMucm9sZSxcbiAgICAgIGluZGV4OiB0aGlzLmluZGV4LFxuICAgICAgY29udGVudDogdGhpcy5jb250ZW50XG4gICAgfTtcbiAgICBpZiAodGhpcy5jdXN0b20pIHtcbiAgICAgIGRhdGEuY3VzdG9tID0gdGhpcy5jdXN0b207XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgR2VuZXJhdGVSZXNwb25zZUNodW5rXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/chunk.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/resolve-tool-requests.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/generate/resolve-tool-requests.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar resolve_tool_requests_exports = {};\n__export(resolve_tool_requests_exports, {\n  assertValidToolNames: () => assertValidToolNames,\n  resolveRestartedTools: () => resolveRestartedTools,\n  resolveResumeOption: () => resolveResumeOption,\n  resolveToolRequest: () => resolveToolRequest,\n  resolveToolRequests: () => resolveToolRequests,\n  toPendingOutput: () => toPendingOutput,\n  toToolMap: () => toToolMap\n});\nmodule.exports = __toCommonJS(resolve_tool_requests_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_logging = __webpack_require__(/*! @genkit-ai/core/logging */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_prompt = __webpack_require__(/*! ../prompt.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/prompt.js\");\nvar import_tool = __webpack_require__(/*! ../tool.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js\");\nfunction toToolMap(tools) {\n  assertValidToolNames(tools);\n  const out = {};\n  for (const tool of tools) {\n    const name = tool.__action.name;\n    const shortName = name.substring(name.lastIndexOf(\"/\") + 1);\n    out[shortName] = tool;\n  }\n  return out;\n}\nfunction assertValidToolNames(tools) {\n  const nameMap = {};\n  for (const tool of tools) {\n    const name = tool.__action.name;\n    const shortName = name.substring(name.lastIndexOf(\"/\") + 1);\n    if (nameMap[shortName]) {\n      throw new import_core.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: `Cannot provide two tools with the same name: '${name}' and '${nameMap[shortName]}'`\n      });\n    }\n    nameMap[shortName] = name;\n  }\n}\nfunction toRunOptions(part) {\n  const out = { metadata: part.metadata };\n  if (part.metadata?.resumed) out.resumed = part.metadata.resumed;\n  return out;\n}\nfunction toPendingOutput(part, response) {\n  return {\n    ...part,\n    metadata: {\n      ...part.metadata,\n      pendingOutput: response.toolResponse.output\n    }\n  };\n}\nasync function resolveToolRequest(rawRequest, part, toolMap, runOptions) {\n  const tool = toolMap[part.toolRequest.name];\n  if (!tool) {\n    throw new import_core.GenkitError({\n      status: \"NOT_FOUND\",\n      message: `Tool ${part.toolRequest.name} not found`,\n      detail: { request: rawRequest }\n    });\n  }\n  if ((0, import_prompt.isPromptAction)(tool)) {\n    const preamble = await tool(part.toolRequest.input);\n    const response = {\n      toolResponse: {\n        name: part.toolRequest.name,\n        ref: part.toolRequest.ref,\n        output: `transferred to ${part.toolRequest.name}`\n      }\n    };\n    return { preamble, response };\n  }\n  try {\n    const output = await tool(part.toolRequest.input, toRunOptions(part));\n    const response = (0, import_core.stripUndefinedProps)({\n      toolResponse: {\n        name: part.toolRequest.name,\n        ref: part.toolRequest.ref,\n        output\n      }\n    });\n    return { response };\n  } catch (e) {\n    if (e instanceof import_tool.ToolInterruptError || // There's an inexplicable case when the above type check fails, only in tests.\n    e.name === \"ToolInterruptError\") {\n      const ie = e;\n      import_logging.logger.debug(\n        `tool '${toolMap[part.toolRequest?.name].__action.name}' triggered an interrupt${ie.metadata ? `: ${JSON.stringify(ie.metadata)}` : \"\"}`\n      );\n      const interrupt = {\n        toolRequest: part.toolRequest,\n        metadata: { ...part.metadata, interrupt: ie.metadata || true }\n      };\n      return { interrupt };\n    }\n    throw e;\n  }\n}\nasync function resolveToolRequests(registry, rawRequest, generatedMessage) {\n  const toolMap = toToolMap(await (0, import_tool.resolveTools)(registry, rawRequest.tools));\n  const responseParts = [];\n  let hasInterrupts = false;\n  let transferPreamble;\n  const revisedModelMessage = {\n    ...generatedMessage,\n    content: [...generatedMessage.content]\n  };\n  await Promise.all(\n    revisedModelMessage.content.map(async (part, i) => {\n      if (!part.toolRequest) return;\n      const { preamble, response, interrupt } = await resolveToolRequest(\n        rawRequest,\n        part,\n        toolMap\n      );\n      if (preamble) {\n        if (transferPreamble) {\n          throw new import_core.GenkitError({\n            status: \"INVALID_ARGUMENT\",\n            message: `Model attempted to transfer to multiple prompt tools.`\n          });\n        }\n        transferPreamble = preamble;\n      }\n      if (response) {\n        responseParts.push(response);\n        revisedModelMessage.content.splice(\n          i,\n          1,\n          toPendingOutput(part, response)\n        );\n      }\n      if (interrupt) {\n        revisedModelMessage.content.splice(i, 1, interrupt);\n        hasInterrupts = true;\n      }\n    })\n  );\n  if (hasInterrupts) {\n    return { revisedModelMessage };\n  }\n  return {\n    toolMessage: { role: \"tool\", content: responseParts },\n    transferPreamble\n  };\n}\nfunction findCorrespondingToolRequest(parts, part) {\n  const name = part.toolRequest?.name || part.toolResponse?.name;\n  const ref = part.toolRequest?.ref || part.toolResponse?.ref;\n  return parts.find(\n    (p) => p.toolRequest?.name === name && p.toolRequest?.ref === ref\n  );\n}\nfunction findCorrespondingToolResponse(parts, part) {\n  const name = part.toolRequest?.name || part.toolResponse?.name;\n  const ref = part.toolRequest?.ref || part.toolResponse?.ref;\n  return parts.find(\n    (p) => p.toolResponse?.name === name && p.toolResponse?.ref === ref\n  );\n}\nasync function resolveResumedToolRequest(rawRequest, part, toolMap) {\n  if (part.metadata?.pendingOutput) {\n    const { pendingOutput, ...metadata } = part.metadata;\n    const toolResponse = {\n      toolResponse: {\n        name: part.toolRequest.name,\n        ref: part.toolRequest.ref,\n        output: pendingOutput\n      },\n      metadata: { ...metadata, source: \"pending\" }\n    };\n    return (0, import_core.stripUndefinedProps)({\n      toolResponse,\n      toolRequest: { ...part, metadata }\n    });\n  }\n  const providedResponse = findCorrespondingToolResponse(\n    rawRequest.resume?.respond || [],\n    part\n  );\n  if (providedResponse) {\n    const toolResponse = providedResponse;\n    const { interrupt, ...metadata } = part.metadata || {};\n    return (0, import_core.stripUndefinedProps)({\n      toolResponse,\n      toolRequest: {\n        ...part,\n        metadata: { ...metadata, resolvedInterrupt: interrupt }\n      }\n    });\n  }\n  const restartRequest = findCorrespondingToolRequest(\n    rawRequest.resume?.restart || [],\n    part\n  );\n  if (restartRequest) {\n    const { response, interrupt, preamble } = await resolveToolRequest(\n      rawRequest,\n      restartRequest,\n      toolMap\n    );\n    if (preamble) {\n      throw new import_core.GenkitError({\n        status: \"INTERNAL\",\n        message: `Prompt tool '${restartRequest.toolRequest.name}' executed inside 'restart' resolution. This should never happen.`\n      });\n    }\n    if (interrupt) return { interrupt };\n    if (response) {\n      const toolResponse = response;\n      const { interrupt: interrupt2, ...metadata } = part.metadata || {};\n      return (0, import_core.stripUndefinedProps)({\n        toolResponse,\n        toolRequest: {\n          ...part,\n          metadata: { ...metadata, resolvedInterrupt: interrupt2 }\n        }\n      });\n    }\n  }\n  throw new import_core.GenkitError({\n    status: \"INVALID_ARGUMENT\",\n    message: `Unresolved tool request '${part.toolRequest.name}${part.toolRequest.ref ? `#${part.toolRequest.ref}` : \"\"}' was not handled by the 'resume' argument. You must supply replies or restarts for all interrupted tool requests.'`\n  });\n}\nasync function resolveResumeOption(registry, rawRequest) {\n  if (!rawRequest.resume) return { revisedRequest: rawRequest };\n  const toolMap = toToolMap(await (0, import_tool.resolveTools)(registry, rawRequest.tools));\n  const messages = rawRequest.messages;\n  const lastMessage = messages.at(-1);\n  if (!lastMessage || lastMessage.role !== \"model\" || !lastMessage.content.find((p) => p.toolRequest)) {\n    throw new import_core.GenkitError({\n      status: \"FAILED_PRECONDITION\",\n      message: `Cannot 'resume' generation unless the previous message is a model message with at least one tool request.`\n    });\n  }\n  const toolResponses = [];\n  let interrupted = false;\n  lastMessage.content = await Promise.all(\n    lastMessage.content.map(async (part) => {\n      if (!(0, import_tool.isToolRequest)(part)) return part;\n      const resolved = await resolveResumedToolRequest(\n        rawRequest,\n        part,\n        toolMap\n      );\n      if (resolved.interrupt) {\n        interrupted = true;\n        return resolved.interrupt;\n      }\n      toolResponses.push(resolved.toolResponse);\n      return resolved.toolRequest;\n    })\n  );\n  if (interrupted) {\n    return {\n      interruptedResponse: {\n        finishReason: \"interrupted\",\n        finishMessage: \"One or more tools triggered interrupts while resuming generation. The model was not called.\",\n        message: lastMessage\n      }\n    };\n  }\n  const numToolRequests = lastMessage.content.filter(\n    (p) => !!p.toolRequest\n  ).length;\n  if (toolResponses.length !== numToolRequests) {\n    throw new import_core.GenkitError({\n      status: \"FAILED_PRECONDITION\",\n      message: `Expected ${numToolRequests} tool responses but resolved to ${toolResponses.length}.`,\n      detail: { toolResponses, message: lastMessage }\n    });\n  }\n  const toolMessage = {\n    role: \"tool\",\n    content: toolResponses,\n    metadata: {\n      resumed: rawRequest.resume.metadata || true\n    }\n  };\n  return (0, import_core.stripUndefinedProps)({\n    revisedRequest: {\n      ...rawRequest,\n      resume: void 0,\n      messages: [...messages, toolMessage]\n    },\n    toolMessage\n  });\n}\nasync function resolveRestartedTools(registry, rawRequest) {\n  const toolMap = toToolMap(await (0, import_tool.resolveTools)(registry, rawRequest.tools));\n  const lastMessage = rawRequest.messages.at(-1);\n  if (!lastMessage || lastMessage.role !== \"model\") return [];\n  const restarts = lastMessage.content.filter(\n    (p) => p.toolRequest && p.metadata?.resumed\n  );\n  return await Promise.all(\n    restarts.map(async (p) => {\n      const { response, interrupt } = await resolveToolRequest(\n        rawRequest,\n        p,\n        toolMap\n      );\n      if (interrupt) return interrupt;\n      return toPendingOutput(p, response);\n    })\n  );\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=resolve-tool-requests.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9nZW5lcmF0ZS9yZXNvbHZlLXRvb2wtcmVxdWVzdHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxrQkFBa0IsbUJBQU8sQ0FBQyxxRkFBaUI7QUFDM0MscUJBQXFCLG1CQUFPLENBQUMsK0ZBQXlCO0FBQ3RELG9CQUFvQixtQkFBTyxDQUFDLGlGQUFjO0FBQzFDLGtCQUFrQixtQkFBTyxDQUFDLDZFQUFZO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxLQUFLLFNBQVMsbUJBQW1CO0FBQ25HLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsdUJBQXVCO0FBQzlDLGdCQUFnQjtBQUNoQixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0Msc0JBQXNCO0FBQ3hEO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLGFBQWE7QUFDYixJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsOENBQThDLDBCQUEwQixtQkFBbUIsNEJBQTRCLE9BQU87QUFDL0k7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxnQ0FBZ0M7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxtQkFBbUIsc0NBQXNDO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSw2QkFBNkI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkseUJBQXlCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksZ0NBQWdDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGdDQUFnQztBQUNqRSxPQUFPO0FBQ1A7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBLGNBQWMscUNBQXFDO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLHNCQUFzQixFQUFFLDJCQUEyQixxQkFBcUIsT0FBTztBQUN4SCxHQUFHO0FBQ0g7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGlCQUFpQixpQ0FBaUMscUJBQXFCO0FBQ2xHLGdCQUFnQjtBQUNoQixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHNCQUFzQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQVFMO0FBQ0QiLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvc3R1ZGlvL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9nZW5lcmF0ZS9yZXNvbHZlLXRvb2wtcmVxdWVzdHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHJlc29sdmVfdG9vbF9yZXF1ZXN0c19leHBvcnRzID0ge307XG5fX2V4cG9ydChyZXNvbHZlX3Rvb2xfcmVxdWVzdHNfZXhwb3J0cywge1xuICBhc3NlcnRWYWxpZFRvb2xOYW1lczogKCkgPT4gYXNzZXJ0VmFsaWRUb29sTmFtZXMsXG4gIHJlc29sdmVSZXN0YXJ0ZWRUb29sczogKCkgPT4gcmVzb2x2ZVJlc3RhcnRlZFRvb2xzLFxuICByZXNvbHZlUmVzdW1lT3B0aW9uOiAoKSA9PiByZXNvbHZlUmVzdW1lT3B0aW9uLFxuICByZXNvbHZlVG9vbFJlcXVlc3Q6ICgpID0+IHJlc29sdmVUb29sUmVxdWVzdCxcbiAgcmVzb2x2ZVRvb2xSZXF1ZXN0czogKCkgPT4gcmVzb2x2ZVRvb2xSZXF1ZXN0cyxcbiAgdG9QZW5kaW5nT3V0cHV0OiAoKSA9PiB0b1BlbmRpbmdPdXRwdXQsXG4gIHRvVG9vbE1hcDogKCkgPT4gdG9Ub29sTWFwXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHJlc29sdmVfdG9vbF9yZXF1ZXN0c19leHBvcnRzKTtcbnZhciBpbXBvcnRfY29yZSA9IHJlcXVpcmUoXCJAZ2Vua2l0LWFpL2NvcmVcIik7XG52YXIgaW1wb3J0X2xvZ2dpbmcgPSByZXF1aXJlKFwiQGdlbmtpdC1haS9jb3JlL2xvZ2dpbmdcIik7XG52YXIgaW1wb3J0X3Byb21wdCA9IHJlcXVpcmUoXCIuLi9wcm9tcHQuanNcIik7XG52YXIgaW1wb3J0X3Rvb2wgPSByZXF1aXJlKFwiLi4vdG9vbC5qc1wiKTtcbmZ1bmN0aW9uIHRvVG9vbE1hcCh0b29scykge1xuICBhc3NlcnRWYWxpZFRvb2xOYW1lcyh0b29scyk7XG4gIGNvbnN0IG91dCA9IHt9O1xuICBmb3IgKGNvbnN0IHRvb2wgb2YgdG9vbHMpIHtcbiAgICBjb25zdCBuYW1lID0gdG9vbC5fX2FjdGlvbi5uYW1lO1xuICAgIGNvbnN0IHNob3J0TmFtZSA9IG5hbWUuc3Vic3RyaW5nKG5hbWUubGFzdEluZGV4T2YoXCIvXCIpICsgMSk7XG4gICAgb3V0W3Nob3J0TmFtZV0gPSB0b29sO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG5mdW5jdGlvbiBhc3NlcnRWYWxpZFRvb2xOYW1lcyh0b29scykge1xuICBjb25zdCBuYW1lTWFwID0ge307XG4gIGZvciAoY29uc3QgdG9vbCBvZiB0b29scykge1xuICAgIGNvbnN0IG5hbWUgPSB0b29sLl9fYWN0aW9uLm5hbWU7XG4gICAgY29uc3Qgc2hvcnROYW1lID0gbmFtZS5zdWJzdHJpbmcobmFtZS5sYXN0SW5kZXhPZihcIi9cIikgKyAxKTtcbiAgICBpZiAobmFtZU1hcFtzaG9ydE5hbWVdKSB7XG4gICAgICB0aHJvdyBuZXcgaW1wb3J0X2NvcmUuR2Vua2l0RXJyb3Ioe1xuICAgICAgICBzdGF0dXM6IFwiSU5WQUxJRF9BUkdVTUVOVFwiLFxuICAgICAgICBtZXNzYWdlOiBgQ2Fubm90IHByb3ZpZGUgdHdvIHRvb2xzIHdpdGggdGhlIHNhbWUgbmFtZTogJyR7bmFtZX0nIGFuZCAnJHtuYW1lTWFwW3Nob3J0TmFtZV19J2BcbiAgICAgIH0pO1xuICAgIH1cbiAgICBuYW1lTWFwW3Nob3J0TmFtZV0gPSBuYW1lO1xuICB9XG59XG5mdW5jdGlvbiB0b1J1bk9wdGlvbnMocGFydCkge1xuICBjb25zdCBvdXQgPSB7IG1ldGFkYXRhOiBwYXJ0Lm1ldGFkYXRhIH07XG4gIGlmIChwYXJ0Lm1ldGFkYXRhPy5yZXN1bWVkKSBvdXQucmVzdW1lZCA9IHBhcnQubWV0YWRhdGEucmVzdW1lZDtcbiAgcmV0dXJuIG91dDtcbn1cbmZ1bmN0aW9uIHRvUGVuZGluZ091dHB1dChwYXJ0LCByZXNwb25zZSkge1xuICByZXR1cm4ge1xuICAgIC4uLnBhcnQsXG4gICAgbWV0YWRhdGE6IHtcbiAgICAgIC4uLnBhcnQubWV0YWRhdGEsXG4gICAgICBwZW5kaW5nT3V0cHV0OiByZXNwb25zZS50b29sUmVzcG9uc2Uub3V0cHV0XG4gICAgfVxuICB9O1xufVxuYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZVRvb2xSZXF1ZXN0KHJhd1JlcXVlc3QsIHBhcnQsIHRvb2xNYXAsIHJ1bk9wdGlvbnMpIHtcbiAgY29uc3QgdG9vbCA9IHRvb2xNYXBbcGFydC50b29sUmVxdWVzdC5uYW1lXTtcbiAgaWYgKCF0b29sKSB7XG4gICAgdGhyb3cgbmV3IGltcG9ydF9jb3JlLkdlbmtpdEVycm9yKHtcbiAgICAgIHN0YXR1czogXCJOT1RfRk9VTkRcIixcbiAgICAgIG1lc3NhZ2U6IGBUb29sICR7cGFydC50b29sUmVxdWVzdC5uYW1lfSBub3QgZm91bmRgLFxuICAgICAgZGV0YWlsOiB7IHJlcXVlc3Q6IHJhd1JlcXVlc3QgfVxuICAgIH0pO1xuICB9XG4gIGlmICgoMCwgaW1wb3J0X3Byb21wdC5pc1Byb21wdEFjdGlvbikodG9vbCkpIHtcbiAgICBjb25zdCBwcmVhbWJsZSA9IGF3YWl0IHRvb2wocGFydC50b29sUmVxdWVzdC5pbnB1dCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICB0b29sUmVzcG9uc2U6IHtcbiAgICAgICAgbmFtZTogcGFydC50b29sUmVxdWVzdC5uYW1lLFxuICAgICAgICByZWY6IHBhcnQudG9vbFJlcXVlc3QucmVmLFxuICAgICAgICBvdXRwdXQ6IGB0cmFuc2ZlcnJlZCB0byAke3BhcnQudG9vbFJlcXVlc3QubmFtZX1gXG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4geyBwcmVhbWJsZSwgcmVzcG9uc2UgfTtcbiAgfVxuICB0cnkge1xuICAgIGNvbnN0IG91dHB1dCA9IGF3YWl0IHRvb2wocGFydC50b29sUmVxdWVzdC5pbnB1dCwgdG9SdW5PcHRpb25zKHBhcnQpKTtcbiAgICBjb25zdCByZXNwb25zZSA9ICgwLCBpbXBvcnRfY29yZS5zdHJpcFVuZGVmaW5lZFByb3BzKSh7XG4gICAgICB0b29sUmVzcG9uc2U6IHtcbiAgICAgICAgbmFtZTogcGFydC50b29sUmVxdWVzdC5uYW1lLFxuICAgICAgICByZWY6IHBhcnQudG9vbFJlcXVlc3QucmVmLFxuICAgICAgICBvdXRwdXRcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4geyByZXNwb25zZSB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBpbXBvcnRfdG9vbC5Ub29sSW50ZXJydXB0RXJyb3IgfHwgLy8gVGhlcmUncyBhbiBpbmV4cGxpY2FibGUgY2FzZSB3aGVuIHRoZSBhYm92ZSB0eXBlIGNoZWNrIGZhaWxzLCBvbmx5IGluIHRlc3RzLlxuICAgIGUubmFtZSA9PT0gXCJUb29sSW50ZXJydXB0RXJyb3JcIikge1xuICAgICAgY29uc3QgaWUgPSBlO1xuICAgICAgaW1wb3J0X2xvZ2dpbmcubG9nZ2VyLmRlYnVnKFxuICAgICAgICBgdG9vbCAnJHt0b29sTWFwW3BhcnQudG9vbFJlcXVlc3Q/Lm5hbWVdLl9fYWN0aW9uLm5hbWV9JyB0cmlnZ2VyZWQgYW4gaW50ZXJydXB0JHtpZS5tZXRhZGF0YSA/IGA6ICR7SlNPTi5zdHJpbmdpZnkoaWUubWV0YWRhdGEpfWAgOiBcIlwifWBcbiAgICAgICk7XG4gICAgICBjb25zdCBpbnRlcnJ1cHQgPSB7XG4gICAgICAgIHRvb2xSZXF1ZXN0OiBwYXJ0LnRvb2xSZXF1ZXN0LFxuICAgICAgICBtZXRhZGF0YTogeyAuLi5wYXJ0Lm1ldGFkYXRhLCBpbnRlcnJ1cHQ6IGllLm1ldGFkYXRhIHx8IHRydWUgfVxuICAgICAgfTtcbiAgICAgIHJldHVybiB7IGludGVycnVwdCB9O1xuICAgIH1cbiAgICB0aHJvdyBlO1xuICB9XG59XG5hc3luYyBmdW5jdGlvbiByZXNvbHZlVG9vbFJlcXVlc3RzKHJlZ2lzdHJ5LCByYXdSZXF1ZXN0LCBnZW5lcmF0ZWRNZXNzYWdlKSB7XG4gIGNvbnN0IHRvb2xNYXAgPSB0b1Rvb2xNYXAoYXdhaXQgKDAsIGltcG9ydF90b29sLnJlc29sdmVUb29scykocmVnaXN0cnksIHJhd1JlcXVlc3QudG9vbHMpKTtcbiAgY29uc3QgcmVzcG9uc2VQYXJ0cyA9IFtdO1xuICBsZXQgaGFzSW50ZXJydXB0cyA9IGZhbHNlO1xuICBsZXQgdHJhbnNmZXJQcmVhbWJsZTtcbiAgY29uc3QgcmV2aXNlZE1vZGVsTWVzc2FnZSA9IHtcbiAgICAuLi5nZW5lcmF0ZWRNZXNzYWdlLFxuICAgIGNvbnRlbnQ6IFsuLi5nZW5lcmF0ZWRNZXNzYWdlLmNvbnRlbnRdXG4gIH07XG4gIGF3YWl0IFByb21pc2UuYWxsKFxuICAgIHJldmlzZWRNb2RlbE1lc3NhZ2UuY29udGVudC5tYXAoYXN5bmMgKHBhcnQsIGkpID0+IHtcbiAgICAgIGlmICghcGFydC50b29sUmVxdWVzdCkgcmV0dXJuO1xuICAgICAgY29uc3QgeyBwcmVhbWJsZSwgcmVzcG9uc2UsIGludGVycnVwdCB9ID0gYXdhaXQgcmVzb2x2ZVRvb2xSZXF1ZXN0KFxuICAgICAgICByYXdSZXF1ZXN0LFxuICAgICAgICBwYXJ0LFxuICAgICAgICB0b29sTWFwXG4gICAgICApO1xuICAgICAgaWYgKHByZWFtYmxlKSB7XG4gICAgICAgIGlmICh0cmFuc2ZlclByZWFtYmxlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IGltcG9ydF9jb3JlLkdlbmtpdEVycm9yKHtcbiAgICAgICAgICAgIHN0YXR1czogXCJJTlZBTElEX0FSR1VNRU5UXCIsXG4gICAgICAgICAgICBtZXNzYWdlOiBgTW9kZWwgYXR0ZW1wdGVkIHRvIHRyYW5zZmVyIHRvIG11bHRpcGxlIHByb21wdCB0b29scy5gXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJhbnNmZXJQcmVhbWJsZSA9IHByZWFtYmxlO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3BvbnNlKSB7XG4gICAgICAgIHJlc3BvbnNlUGFydHMucHVzaChyZXNwb25zZSk7XG4gICAgICAgIHJldmlzZWRNb2RlbE1lc3NhZ2UuY29udGVudC5zcGxpY2UoXG4gICAgICAgICAgaSxcbiAgICAgICAgICAxLFxuICAgICAgICAgIHRvUGVuZGluZ091dHB1dChwYXJ0LCByZXNwb25zZSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChpbnRlcnJ1cHQpIHtcbiAgICAgICAgcmV2aXNlZE1vZGVsTWVzc2FnZS5jb250ZW50LnNwbGljZShpLCAxLCBpbnRlcnJ1cHQpO1xuICAgICAgICBoYXNJbnRlcnJ1cHRzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KVxuICApO1xuICBpZiAoaGFzSW50ZXJydXB0cykge1xuICAgIHJldHVybiB7IHJldmlzZWRNb2RlbE1lc3NhZ2UgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHRvb2xNZXNzYWdlOiB7IHJvbGU6IFwidG9vbFwiLCBjb250ZW50OiByZXNwb25zZVBhcnRzIH0sXG4gICAgdHJhbnNmZXJQcmVhbWJsZVxuICB9O1xufVxuZnVuY3Rpb24gZmluZENvcnJlc3BvbmRpbmdUb29sUmVxdWVzdChwYXJ0cywgcGFydCkge1xuICBjb25zdCBuYW1lID0gcGFydC50b29sUmVxdWVzdD8ubmFtZSB8fCBwYXJ0LnRvb2xSZXNwb25zZT8ubmFtZTtcbiAgY29uc3QgcmVmID0gcGFydC50b29sUmVxdWVzdD8ucmVmIHx8IHBhcnQudG9vbFJlc3BvbnNlPy5yZWY7XG4gIHJldHVybiBwYXJ0cy5maW5kKFxuICAgIChwKSA9PiBwLnRvb2xSZXF1ZXN0Py5uYW1lID09PSBuYW1lICYmIHAudG9vbFJlcXVlc3Q/LnJlZiA9PT0gcmVmXG4gICk7XG59XG5mdW5jdGlvbiBmaW5kQ29ycmVzcG9uZGluZ1Rvb2xSZXNwb25zZShwYXJ0cywgcGFydCkge1xuICBjb25zdCBuYW1lID0gcGFydC50b29sUmVxdWVzdD8ubmFtZSB8fCBwYXJ0LnRvb2xSZXNwb25zZT8ubmFtZTtcbiAgY29uc3QgcmVmID0gcGFydC50b29sUmVxdWVzdD8ucmVmIHx8IHBhcnQudG9vbFJlc3BvbnNlPy5yZWY7XG4gIHJldHVybiBwYXJ0cy5maW5kKFxuICAgIChwKSA9PiBwLnRvb2xSZXNwb25zZT8ubmFtZSA9PT0gbmFtZSAmJiBwLnRvb2xSZXNwb25zZT8ucmVmID09PSByZWZcbiAgKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVSZXN1bWVkVG9vbFJlcXVlc3QocmF3UmVxdWVzdCwgcGFydCwgdG9vbE1hcCkge1xuICBpZiAocGFydC5tZXRhZGF0YT8ucGVuZGluZ091dHB1dCkge1xuICAgIGNvbnN0IHsgcGVuZGluZ091dHB1dCwgLi4ubWV0YWRhdGEgfSA9IHBhcnQubWV0YWRhdGE7XG4gICAgY29uc3QgdG9vbFJlc3BvbnNlID0ge1xuICAgICAgdG9vbFJlc3BvbnNlOiB7XG4gICAgICAgIG5hbWU6IHBhcnQudG9vbFJlcXVlc3QubmFtZSxcbiAgICAgICAgcmVmOiBwYXJ0LnRvb2xSZXF1ZXN0LnJlZixcbiAgICAgICAgb3V0cHV0OiBwZW5kaW5nT3V0cHV0XG4gICAgICB9LFxuICAgICAgbWV0YWRhdGE6IHsgLi4ubWV0YWRhdGEsIHNvdXJjZTogXCJwZW5kaW5nXCIgfVxuICAgIH07XG4gICAgcmV0dXJuICgwLCBpbXBvcnRfY29yZS5zdHJpcFVuZGVmaW5lZFByb3BzKSh7XG4gICAgICB0b29sUmVzcG9uc2UsXG4gICAgICB0b29sUmVxdWVzdDogeyAuLi5wYXJ0LCBtZXRhZGF0YSB9XG4gICAgfSk7XG4gIH1cbiAgY29uc3QgcHJvdmlkZWRSZXNwb25zZSA9IGZpbmRDb3JyZXNwb25kaW5nVG9vbFJlc3BvbnNlKFxuICAgIHJhd1JlcXVlc3QucmVzdW1lPy5yZXNwb25kIHx8IFtdLFxuICAgIHBhcnRcbiAgKTtcbiAgaWYgKHByb3ZpZGVkUmVzcG9uc2UpIHtcbiAgICBjb25zdCB0b29sUmVzcG9uc2UgPSBwcm92aWRlZFJlc3BvbnNlO1xuICAgIGNvbnN0IHsgaW50ZXJydXB0LCAuLi5tZXRhZGF0YSB9ID0gcGFydC5tZXRhZGF0YSB8fCB7fTtcbiAgICByZXR1cm4gKDAsIGltcG9ydF9jb3JlLnN0cmlwVW5kZWZpbmVkUHJvcHMpKHtcbiAgICAgIHRvb2xSZXNwb25zZSxcbiAgICAgIHRvb2xSZXF1ZXN0OiB7XG4gICAgICAgIC4uLnBhcnQsXG4gICAgICAgIG1ldGFkYXRhOiB7IC4uLm1ldGFkYXRhLCByZXNvbHZlZEludGVycnVwdDogaW50ZXJydXB0IH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBjb25zdCByZXN0YXJ0UmVxdWVzdCA9IGZpbmRDb3JyZXNwb25kaW5nVG9vbFJlcXVlc3QoXG4gICAgcmF3UmVxdWVzdC5yZXN1bWU/LnJlc3RhcnQgfHwgW10sXG4gICAgcGFydFxuICApO1xuICBpZiAocmVzdGFydFJlcXVlc3QpIHtcbiAgICBjb25zdCB7IHJlc3BvbnNlLCBpbnRlcnJ1cHQsIHByZWFtYmxlIH0gPSBhd2FpdCByZXNvbHZlVG9vbFJlcXVlc3QoXG4gICAgICByYXdSZXF1ZXN0LFxuICAgICAgcmVzdGFydFJlcXVlc3QsXG4gICAgICB0b29sTWFwXG4gICAgKTtcbiAgICBpZiAocHJlYW1ibGUpIHtcbiAgICAgIHRocm93IG5ldyBpbXBvcnRfY29yZS5HZW5raXRFcnJvcih7XG4gICAgICAgIHN0YXR1czogXCJJTlRFUk5BTFwiLFxuICAgICAgICBtZXNzYWdlOiBgUHJvbXB0IHRvb2wgJyR7cmVzdGFydFJlcXVlc3QudG9vbFJlcXVlc3QubmFtZX0nIGV4ZWN1dGVkIGluc2lkZSAncmVzdGFydCcgcmVzb2x1dGlvbi4gVGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuLmBcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW50ZXJydXB0KSByZXR1cm4geyBpbnRlcnJ1cHQgfTtcbiAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgIGNvbnN0IHRvb2xSZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgICAgY29uc3QgeyBpbnRlcnJ1cHQ6IGludGVycnVwdDIsIC4uLm1ldGFkYXRhIH0gPSBwYXJ0Lm1ldGFkYXRhIHx8IHt9O1xuICAgICAgcmV0dXJuICgwLCBpbXBvcnRfY29yZS5zdHJpcFVuZGVmaW5lZFByb3BzKSh7XG4gICAgICAgIHRvb2xSZXNwb25zZSxcbiAgICAgICAgdG9vbFJlcXVlc3Q6IHtcbiAgICAgICAgICAuLi5wYXJ0LFxuICAgICAgICAgIG1ldGFkYXRhOiB7IC4uLm1ldGFkYXRhLCByZXNvbHZlZEludGVycnVwdDogaW50ZXJydXB0MiB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICB0aHJvdyBuZXcgaW1wb3J0X2NvcmUuR2Vua2l0RXJyb3Ioe1xuICAgIHN0YXR1czogXCJJTlZBTElEX0FSR1VNRU5UXCIsXG4gICAgbWVzc2FnZTogYFVucmVzb2x2ZWQgdG9vbCByZXF1ZXN0ICcke3BhcnQudG9vbFJlcXVlc3QubmFtZX0ke3BhcnQudG9vbFJlcXVlc3QucmVmID8gYCMke3BhcnQudG9vbFJlcXVlc3QucmVmfWAgOiBcIlwifScgd2FzIG5vdCBoYW5kbGVkIGJ5IHRoZSAncmVzdW1lJyBhcmd1bWVudC4gWW91IG11c3Qgc3VwcGx5IHJlcGxpZXMgb3IgcmVzdGFydHMgZm9yIGFsbCBpbnRlcnJ1cHRlZCB0b29sIHJlcXVlc3RzLidgXG4gIH0pO1xufVxuYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZVJlc3VtZU9wdGlvbihyZWdpc3RyeSwgcmF3UmVxdWVzdCkge1xuICBpZiAoIXJhd1JlcXVlc3QucmVzdW1lKSByZXR1cm4geyByZXZpc2VkUmVxdWVzdDogcmF3UmVxdWVzdCB9O1xuICBjb25zdCB0b29sTWFwID0gdG9Ub29sTWFwKGF3YWl0ICgwLCBpbXBvcnRfdG9vbC5yZXNvbHZlVG9vbHMpKHJlZ2lzdHJ5LCByYXdSZXF1ZXN0LnRvb2xzKSk7XG4gIGNvbnN0IG1lc3NhZ2VzID0gcmF3UmVxdWVzdC5tZXNzYWdlcztcbiAgY29uc3QgbGFzdE1lc3NhZ2UgPSBtZXNzYWdlcy5hdCgtMSk7XG4gIGlmICghbGFzdE1lc3NhZ2UgfHwgbGFzdE1lc3NhZ2Uucm9sZSAhPT0gXCJtb2RlbFwiIHx8ICFsYXN0TWVzc2FnZS5jb250ZW50LmZpbmQoKHApID0+IHAudG9vbFJlcXVlc3QpKSB7XG4gICAgdGhyb3cgbmV3IGltcG9ydF9jb3JlLkdlbmtpdEVycm9yKHtcbiAgICAgIHN0YXR1czogXCJGQUlMRURfUFJFQ09ORElUSU9OXCIsXG4gICAgICBtZXNzYWdlOiBgQ2Fubm90ICdyZXN1bWUnIGdlbmVyYXRpb24gdW5sZXNzIHRoZSBwcmV2aW91cyBtZXNzYWdlIGlzIGEgbW9kZWwgbWVzc2FnZSB3aXRoIGF0IGxlYXN0IG9uZSB0b29sIHJlcXVlc3QuYFxuICAgIH0pO1xuICB9XG4gIGNvbnN0IHRvb2xSZXNwb25zZXMgPSBbXTtcbiAgbGV0IGludGVycnVwdGVkID0gZmFsc2U7XG4gIGxhc3RNZXNzYWdlLmNvbnRlbnQgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICBsYXN0TWVzc2FnZS5jb250ZW50Lm1hcChhc3luYyAocGFydCkgPT4ge1xuICAgICAgaWYgKCEoMCwgaW1wb3J0X3Rvb2wuaXNUb29sUmVxdWVzdCkocGFydCkpIHJldHVybiBwYXJ0O1xuICAgICAgY29uc3QgcmVzb2x2ZWQgPSBhd2FpdCByZXNvbHZlUmVzdW1lZFRvb2xSZXF1ZXN0KFxuICAgICAgICByYXdSZXF1ZXN0LFxuICAgICAgICBwYXJ0LFxuICAgICAgICB0b29sTWFwXG4gICAgICApO1xuICAgICAgaWYgKHJlc29sdmVkLmludGVycnVwdCkge1xuICAgICAgICBpbnRlcnJ1cHRlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiByZXNvbHZlZC5pbnRlcnJ1cHQ7XG4gICAgICB9XG4gICAgICB0b29sUmVzcG9uc2VzLnB1c2gocmVzb2x2ZWQudG9vbFJlc3BvbnNlKTtcbiAgICAgIHJldHVybiByZXNvbHZlZC50b29sUmVxdWVzdDtcbiAgICB9KVxuICApO1xuICBpZiAoaW50ZXJydXB0ZWQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW50ZXJydXB0ZWRSZXNwb25zZToge1xuICAgICAgICBmaW5pc2hSZWFzb246IFwiaW50ZXJydXB0ZWRcIixcbiAgICAgICAgZmluaXNoTWVzc2FnZTogXCJPbmUgb3IgbW9yZSB0b29scyB0cmlnZ2VyZWQgaW50ZXJydXB0cyB3aGlsZSByZXN1bWluZyBnZW5lcmF0aW9uLiBUaGUgbW9kZWwgd2FzIG5vdCBjYWxsZWQuXCIsXG4gICAgICAgIG1lc3NhZ2U6IGxhc3RNZXNzYWdlXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBjb25zdCBudW1Ub29sUmVxdWVzdHMgPSBsYXN0TWVzc2FnZS5jb250ZW50LmZpbHRlcihcbiAgICAocCkgPT4gISFwLnRvb2xSZXF1ZXN0XG4gICkubGVuZ3RoO1xuICBpZiAodG9vbFJlc3BvbnNlcy5sZW5ndGggIT09IG51bVRvb2xSZXF1ZXN0cykge1xuICAgIHRocm93IG5ldyBpbXBvcnRfY29yZS5HZW5raXRFcnJvcih7XG4gICAgICBzdGF0dXM6IFwiRkFJTEVEX1BSRUNPTkRJVElPTlwiLFxuICAgICAgbWVzc2FnZTogYEV4cGVjdGVkICR7bnVtVG9vbFJlcXVlc3RzfSB0b29sIHJlc3BvbnNlcyBidXQgcmVzb2x2ZWQgdG8gJHt0b29sUmVzcG9uc2VzLmxlbmd0aH0uYCxcbiAgICAgIGRldGFpbDogeyB0b29sUmVzcG9uc2VzLCBtZXNzYWdlOiBsYXN0TWVzc2FnZSB9XG4gICAgfSk7XG4gIH1cbiAgY29uc3QgdG9vbE1lc3NhZ2UgPSB7XG4gICAgcm9sZTogXCJ0b29sXCIsXG4gICAgY29udGVudDogdG9vbFJlc3BvbnNlcyxcbiAgICBtZXRhZGF0YToge1xuICAgICAgcmVzdW1lZDogcmF3UmVxdWVzdC5yZXN1bWUubWV0YWRhdGEgfHwgdHJ1ZVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuICgwLCBpbXBvcnRfY29yZS5zdHJpcFVuZGVmaW5lZFByb3BzKSh7XG4gICAgcmV2aXNlZFJlcXVlc3Q6IHtcbiAgICAgIC4uLnJhd1JlcXVlc3QsXG4gICAgICByZXN1bWU6IHZvaWQgMCxcbiAgICAgIG1lc3NhZ2VzOiBbLi4ubWVzc2FnZXMsIHRvb2xNZXNzYWdlXVxuICAgIH0sXG4gICAgdG9vbE1lc3NhZ2VcbiAgfSk7XG59XG5hc3luYyBmdW5jdGlvbiByZXNvbHZlUmVzdGFydGVkVG9vbHMocmVnaXN0cnksIHJhd1JlcXVlc3QpIHtcbiAgY29uc3QgdG9vbE1hcCA9IHRvVG9vbE1hcChhd2FpdCAoMCwgaW1wb3J0X3Rvb2wucmVzb2x2ZVRvb2xzKShyZWdpc3RyeSwgcmF3UmVxdWVzdC50b29scykpO1xuICBjb25zdCBsYXN0TWVzc2FnZSA9IHJhd1JlcXVlc3QubWVzc2FnZXMuYXQoLTEpO1xuICBpZiAoIWxhc3RNZXNzYWdlIHx8IGxhc3RNZXNzYWdlLnJvbGUgIT09IFwibW9kZWxcIikgcmV0dXJuIFtdO1xuICBjb25zdCByZXN0YXJ0cyA9IGxhc3RNZXNzYWdlLmNvbnRlbnQuZmlsdGVyKFxuICAgIChwKSA9PiBwLnRvb2xSZXF1ZXN0ICYmIHAubWV0YWRhdGE/LnJlc3VtZWRcbiAgKTtcbiAgcmV0dXJuIGF3YWl0IFByb21pc2UuYWxsKFxuICAgIHJlc3RhcnRzLm1hcChhc3luYyAocCkgPT4ge1xuICAgICAgY29uc3QgeyByZXNwb25zZSwgaW50ZXJydXB0IH0gPSBhd2FpdCByZXNvbHZlVG9vbFJlcXVlc3QoXG4gICAgICAgIHJhd1JlcXVlc3QsXG4gICAgICAgIHAsXG4gICAgICAgIHRvb2xNYXBcbiAgICAgICk7XG4gICAgICBpZiAoaW50ZXJydXB0KSByZXR1cm4gaW50ZXJydXB0O1xuICAgICAgcmV0dXJuIHRvUGVuZGluZ091dHB1dChwLCByZXNwb25zZSk7XG4gICAgfSlcbiAgKTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBhc3NlcnRWYWxpZFRvb2xOYW1lcyxcbiAgcmVzb2x2ZVJlc3RhcnRlZFRvb2xzLFxuICByZXNvbHZlUmVzdW1lT3B0aW9uLFxuICByZXNvbHZlVG9vbFJlcXVlc3QsXG4gIHJlc29sdmVUb29sUmVxdWVzdHMsXG4gIHRvUGVuZGluZ091dHB1dCxcbiAgdG9Ub29sTWFwXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc29sdmUtdG9vbC1yZXF1ZXN0cy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/resolve-tool-requests.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/response.js":
/*!*************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/generate/response.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar response_exports = {};\n__export(response_exports, {\n  GenerateResponse: () => GenerateResponse\n});\nmodule.exports = __toCommonJS(response_exports);\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_generate = __webpack_require__(/*! ../generate.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js\");\nvar import_message = __webpack_require__(/*! ../message.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/message.js\");\nclass GenerateResponse {\n  /** The generated message. */\n  message;\n  /** The reason generation stopped for this request. */\n  finishReason;\n  /** Additional information about why the model stopped generating, if any. */\n  finishMessage;\n  /** Usage information. */\n  usage;\n  /** Provider-specific response data. */\n  custom;\n  /** Provider-specific response data. */\n  raw;\n  /** The request that generated this response. */\n  request;\n  /** Model generation long running operation. */\n  operation;\n  /** Name of the model used. */\n  model;\n  /** The parser for output parsing of this response. */\n  parser;\n  constructor(response, options) {\n    const generatedMessage = response.message || response.candidates?.[0]?.message;\n    if (generatedMessage) {\n      this.message = new import_message.Message(generatedMessage, {\n        parser: options?.parser\n      });\n    }\n    this.finishReason = response.finishReason || response.candidates?.[0]?.finishReason;\n    this.finishMessage = response.finishMessage || response.candidates?.[0]?.finishMessage;\n    this.usage = response.usage || {};\n    this.custom = response.custom || {};\n    this.raw = response.raw || this.custom;\n    this.request = options?.request;\n    this.operation = response?.operation;\n  }\n  /**\n   * Throws an error if the response does not contain valid output.\n   */\n  assertValid() {\n    if (this.finishReason === \"blocked\") {\n      throw new import_generate.GenerationBlockedError(\n        this,\n        `Generation blocked${this.finishMessage ? `: ${this.finishMessage}` : \".\"}`\n      );\n    }\n    if (!this.message && !this.operation) {\n      throw new import_generate.GenerationResponseError(\n        this,\n        `Model did not generate a message. Finish reason: '${this.finishReason}': ${this.finishMessage}`\n      );\n    }\n  }\n  /**\n   * Throws an error if the response does not conform to expected schema.\n   */\n  assertValidSchema(request) {\n    if (request?.output?.schema || this.request?.output?.schema) {\n      const o = this.output;\n      (0, import_schema.parseSchema)(o, {\n        jsonSchema: request?.output?.schema || this.request?.output?.schema\n      });\n    }\n  }\n  isValid(request) {\n    try {\n      this.assertValid();\n      this.assertValidSchema(request);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n  /**\n   * If the generated message contains a `data` part, it is returned. Otherwise,\n   * the `output()` method extracts the first valid JSON object or array from the text\n   * contained in the selected candidate's message and returns it.\n   *\n   * @returns The structured output contained in the selected candidate.\n   */\n  get output() {\n    return this.message?.output || null;\n  }\n  /**\n   * Concatenates all `text` parts present in the generated message with no delimiter.\n   * @returns A string of all concatenated text parts.\n   */\n  get text() {\n    return this.message?.text || \"\";\n  }\n  /**\n   * Concatenates all `reasoning` parts present in the generated message with no delimiter.\n   * @returns A string of all concatenated reasoning parts.\n   */\n  get reasoning() {\n    return this.message?.reasoning || \"\";\n  }\n  /**\n   * Returns the first detected media part in the generated message. Useful for\n   * extracting (for example) an image from a generation expected to create one.\n   * @returns The first detected `media` part in the candidate.\n   */\n  get media() {\n    return this.message?.media || null;\n  }\n  /**\n   * Returns the first detected `data` part of the generated message.\n   * @returns The first `data` part detected in the candidate (if any).\n   */\n  get data() {\n    return this.message?.data || null;\n  }\n  /**\n   * Returns all tool request found in the generated message.\n   * @returns Array of all tool request found in the candidate.\n   */\n  get toolRequests() {\n    return this.message?.toolRequests || [];\n  }\n  /**\n   * Returns all tool requests annotated as interrupts found in the generated message.\n   * @returns A list of ToolRequestParts.\n   */\n  get interrupts() {\n    return this.message?.interrupts || [];\n  }\n  /**\n   * Returns the message history for the request by concatenating the model\n   * response to the list of messages from the request. The result of this\n   * method can be safely serialized to JSON for persistence in a database.\n   * @returns A serializable list of messages compatible with `generate({history})`.\n   */\n  get messages() {\n    if (!this.request)\n      throw new Error(\n        \"Can't construct history for response without request reference.\"\n      );\n    if (!this.message)\n      throw new Error(\n        \"Can't construct history for response without generated message.\"\n      );\n    return [...this.request?.messages, this.message.toJSON()];\n  }\n  toJSON() {\n    const out = {\n      message: this.message?.toJSON(),\n      finishReason: this.finishReason,\n      finishMessage: this.finishMessage,\n      usage: this.usage,\n      custom: this.custom.toJSON?.() || this.custom,\n      request: this.request,\n      operation: this.operation\n    };\n    if (!out.finishMessage) delete out.finishMessage;\n    if (!out.request) delete out.request;\n    if (!out.operation) delete out.operation;\n    return out;\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=response.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/response.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar index_exports = {};\n__export(index_exports, {\n  BaseDataPointSchema: () => import_evaluator.BaseDataPointSchema,\n  Document: () => import_document.Document,\n  DocumentDataSchema: () => import_document.DocumentDataSchema,\n  EvalStatusEnum: () => import_evaluator.EvalStatusEnum,\n  GenerateResponse: () => import_generate.GenerateResponse,\n  GenerateResponseChunk: () => import_generate.GenerateResponseChunk,\n  GenerateResponseChunkSchema: () => import_model.GenerateResponseChunkSchema,\n  GenerationBlockedError: () => import_generate.GenerationBlockedError,\n  GenerationCommonConfigSchema: () => import_model.GenerationCommonConfigSchema,\n  GenerationResponseError: () => import_generate.GenerationResponseError,\n  Message: () => import_message.Message,\n  MessageSchema: () => import_model.MessageSchema,\n  ModelRequestSchema: () => import_model.ModelRequestSchema,\n  ModelResponseSchema: () => import_model.ModelResponseSchema,\n  PartSchema: () => import_model.PartSchema,\n  RoleSchema: () => import_model.RoleSchema,\n  ToolInterruptError: () => import_tool.ToolInterruptError,\n  asTool: () => import_tool.asTool,\n  checkOperation: () => import_check_operation.checkOperation,\n  defineHelper: () => import_prompt.defineHelper,\n  defineInterrupt: () => import_tool.defineInterrupt,\n  definePartial: () => import_prompt.definePartial,\n  definePrompt: () => import_prompt.definePrompt,\n  defineTool: () => import_tool.defineTool,\n  embed: () => import_embedder.embed,\n  embedderActionMetadata: () => import_embedder.embedderActionMetadata,\n  embedderRef: () => import_embedder.embedderRef,\n  evaluate: () => import_evaluator.evaluate,\n  evaluatorRef: () => import_evaluator.evaluatorRef,\n  generate: () => import_generate.generate,\n  generateOperation: () => import_generate.generateOperation,\n  generateStream: () => import_generate.generateStream,\n  index: () => import_retriever.index,\n  indexerRef: () => import_retriever.indexerRef,\n  isExecutablePrompt: () => import_prompt.isExecutablePrompt,\n  loadPromptFolder: () => import_prompt.loadPromptFolder,\n  modelActionMetadata: () => import_model.modelActionMetadata,\n  modelRef: () => import_model.modelRef,\n  prompt: () => import_prompt.prompt,\n  rerank: () => import_reranker.rerank,\n  rerankerRef: () => import_reranker.rerankerRef,\n  retrieve: () => import_retriever.retrieve,\n  retrieverRef: () => import_retriever.retrieverRef,\n  tagAsPreamble: () => import_generate.tagAsPreamble,\n  toGenerateRequest: () => import_generate.toGenerateRequest\n});\nmodule.exports = __toCommonJS(index_exports);\nvar import_check_operation = __webpack_require__(/*! ./check-operation.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/check-operation.js\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_embedder = __webpack_require__(/*! ./embedder.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/embedder.js\");\nvar import_evaluator = __webpack_require__(/*! ./evaluator.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/evaluator.js\");\nvar import_generate = __webpack_require__(/*! ./generate.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js\");\nvar import_message = __webpack_require__(/*! ./message.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/message.js\");\nvar import_model = __webpack_require__(/*! ./model.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js\");\nvar import_prompt = __webpack_require__(/*! ./prompt.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/prompt.js\");\nvar import_reranker = __webpack_require__(/*! ./reranker.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/reranker.js\");\nvar import_retriever = __webpack_require__(/*! ./retriever.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/retriever.js\");\nvar import_tool = __webpack_require__(/*! ./tool.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js\");\n__reExport(index_exports, __webpack_require__(/*! ./types.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/types.js\"), module.exports);\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/message.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/message.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar message_exports = {};\n__export(message_exports, {\n  Message: () => Message\n});\nmodule.exports = __toCommonJS(message_exports);\nvar import_extract = __webpack_require__(/*! ./extract */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/extract.js\");\nclass Message {\n  role;\n  content;\n  metadata;\n  parser;\n  static parseData(lenientMessage, defaultRole = \"user\") {\n    if (typeof lenientMessage === \"string\") {\n      return { role: defaultRole, content: [{ text: lenientMessage }] };\n    }\n    return {\n      ...lenientMessage,\n      content: Message.parseContent(lenientMessage.content)\n    };\n  }\n  static parse(lenientMessage) {\n    return new Message(Message.parseData(lenientMessage));\n  }\n  static parseContent(lenientPart) {\n    if (typeof lenientPart === \"string\") {\n      return [{ text: lenientPart }];\n    } else if (Array.isArray(lenientPart)) {\n      return lenientPart.map((p) => typeof p === \"string\" ? { text: p } : p);\n    } else {\n      return [lenientPart];\n    }\n  }\n  constructor(message, options) {\n    this.role = message.role;\n    this.content = message.content;\n    this.metadata = message.metadata;\n    this.parser = options?.parser;\n  }\n  /**\n   * Attempts to parse the content of the message according to the supplied\n   * output parser. Without a parser, returns `data` contained in the message or\n   * tries to parse JSON from the text of the message.\n   *\n   * @returns The structured output contained in the message.\n   */\n  get output() {\n    return this.parser?.(this) || this.data || (0, import_extract.extractJson)(this.text);\n  }\n  toolResponseParts() {\n    const res = this.content.filter((part) => !!part.toolResponse);\n    return res;\n  }\n  /**\n   * Concatenates all `text` parts present in the message with no delimiter.\n   * @returns A string of all concatenated text parts.\n   */\n  get text() {\n    return this.content.map((part) => part.text || \"\").join(\"\");\n  }\n  /**\n   * Concatenates all `reasoning` parts present in the message with no delimiter.\n   * @returns A string of all concatenated reasoning parts.\n   */\n  get reasoning() {\n    return this.content.map((part) => part.reasoning || \"\").join(\"\");\n  }\n  /**\n   * Returns the first media part detected in the message. Useful for extracting\n   * (for example) an image from a generation expected to create one.\n   * @returns The first detected `media` part in the message.\n   */\n  get media() {\n    return this.content.find((part) => part.media)?.media || null;\n  }\n  /**\n   * Returns the first detected `data` part of a message.\n   * @returns The first `data` part detected in the message (if any).\n   */\n  get data() {\n    return this.content.find((part) => part.data)?.data;\n  }\n  /**\n   * Returns all tool request found in this message.\n   * @returns Array of all tool request found in this message.\n   */\n  get toolRequests() {\n    return this.content.filter(\n      (part) => !!part.toolRequest\n    );\n  }\n  /**\n   * Returns all tool requests annotated with interrupt metadata.\n   * @returns Array of all interrupt tool requests.\n   */\n  get interrupts() {\n    return this.toolRequests.filter((t) => !!t.metadata?.interrupt);\n  }\n  /**\n   * Converts the Message to a plain JS object.\n   * @returns Plain JS object representing the data contained in the message.\n   */\n  toJSON() {\n    const out = {\n      role: this.role,\n      content: [...this.content]\n    };\n    if (this.metadata) out.metadata = this.metadata;\n    return out;\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=message.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9tZXNzYWdlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsK0VBQVc7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLCtCQUErQixzQkFBc0I7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixtQkFBbUI7QUFDbkMsTUFBTTtBQUNOLDhEQUE4RCxVQUFVO0FBQ3hFLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FFTDtBQUNEIiwic291cmNlcyI6WyIvaG9tZS91c2VyL3N0dWRpby9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9saWIvbWVzc2FnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgbWVzc2FnZV9leHBvcnRzID0ge307XG5fX2V4cG9ydChtZXNzYWdlX2V4cG9ydHMsIHtcbiAgTWVzc2FnZTogKCkgPT4gTWVzc2FnZVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhtZXNzYWdlX2V4cG9ydHMpO1xudmFyIGltcG9ydF9leHRyYWN0ID0gcmVxdWlyZShcIi4vZXh0cmFjdFwiKTtcbmNsYXNzIE1lc3NhZ2Uge1xuICByb2xlO1xuICBjb250ZW50O1xuICBtZXRhZGF0YTtcbiAgcGFyc2VyO1xuICBzdGF0aWMgcGFyc2VEYXRhKGxlbmllbnRNZXNzYWdlLCBkZWZhdWx0Um9sZSA9IFwidXNlclwiKSB7XG4gICAgaWYgKHR5cGVvZiBsZW5pZW50TWVzc2FnZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIHsgcm9sZTogZGVmYXVsdFJvbGUsIGNvbnRlbnQ6IFt7IHRleHQ6IGxlbmllbnRNZXNzYWdlIH1dIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAuLi5sZW5pZW50TWVzc2FnZSxcbiAgICAgIGNvbnRlbnQ6IE1lc3NhZ2UucGFyc2VDb250ZW50KGxlbmllbnRNZXNzYWdlLmNvbnRlbnQpXG4gICAgfTtcbiAgfVxuICBzdGF0aWMgcGFyc2UobGVuaWVudE1lc3NhZ2UpIHtcbiAgICByZXR1cm4gbmV3IE1lc3NhZ2UoTWVzc2FnZS5wYXJzZURhdGEobGVuaWVudE1lc3NhZ2UpKTtcbiAgfVxuICBzdGF0aWMgcGFyc2VDb250ZW50KGxlbmllbnRQYXJ0KSB7XG4gICAgaWYgKHR5cGVvZiBsZW5pZW50UGFydCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIFt7IHRleHQ6IGxlbmllbnRQYXJ0IH1dO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShsZW5pZW50UGFydCkpIHtcbiAgICAgIHJldHVybiBsZW5pZW50UGFydC5tYXAoKHApID0+IHR5cGVvZiBwID09PSBcInN0cmluZ1wiID8geyB0ZXh0OiBwIH0gOiBwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtsZW5pZW50UGFydF07XG4gICAgfVxuICB9XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnJvbGUgPSBtZXNzYWdlLnJvbGU7XG4gICAgdGhpcy5jb250ZW50ID0gbWVzc2FnZS5jb250ZW50O1xuICAgIHRoaXMubWV0YWRhdGEgPSBtZXNzYWdlLm1ldGFkYXRhO1xuICAgIHRoaXMucGFyc2VyID0gb3B0aW9ucz8ucGFyc2VyO1xuICB9XG4gIC8qKlxuICAgKiBBdHRlbXB0cyB0byBwYXJzZSB0aGUgY29udGVudCBvZiB0aGUgbWVzc2FnZSBhY2NvcmRpbmcgdG8gdGhlIHN1cHBsaWVkXG4gICAqIG91dHB1dCBwYXJzZXIuIFdpdGhvdXQgYSBwYXJzZXIsIHJldHVybnMgYGRhdGFgIGNvbnRhaW5lZCBpbiB0aGUgbWVzc2FnZSBvclxuICAgKiB0cmllcyB0byBwYXJzZSBKU09OIGZyb20gdGhlIHRleHQgb2YgdGhlIG1lc3NhZ2UuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBzdHJ1Y3R1cmVkIG91dHB1dCBjb250YWluZWQgaW4gdGhlIG1lc3NhZ2UuXG4gICAqL1xuICBnZXQgb3V0cHV0KCkge1xuICAgIHJldHVybiB0aGlzLnBhcnNlcj8uKHRoaXMpIHx8IHRoaXMuZGF0YSB8fCAoMCwgaW1wb3J0X2V4dHJhY3QuZXh0cmFjdEpzb24pKHRoaXMudGV4dCk7XG4gIH1cbiAgdG9vbFJlc3BvbnNlUGFydHMoKSB7XG4gICAgY29uc3QgcmVzID0gdGhpcy5jb250ZW50LmZpbHRlcigocGFydCkgPT4gISFwYXJ0LnRvb2xSZXNwb25zZSk7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICAvKipcbiAgICogQ29uY2F0ZW5hdGVzIGFsbCBgdGV4dGAgcGFydHMgcHJlc2VudCBpbiB0aGUgbWVzc2FnZSB3aXRoIG5vIGRlbGltaXRlci5cbiAgICogQHJldHVybnMgQSBzdHJpbmcgb2YgYWxsIGNvbmNhdGVuYXRlZCB0ZXh0IHBhcnRzLlxuICAgKi9cbiAgZ2V0IHRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudC5tYXAoKHBhcnQpID0+IHBhcnQudGV4dCB8fCBcIlwiKS5qb2luKFwiXCIpO1xuICB9XG4gIC8qKlxuICAgKiBDb25jYXRlbmF0ZXMgYWxsIGByZWFzb25pbmdgIHBhcnRzIHByZXNlbnQgaW4gdGhlIG1lc3NhZ2Ugd2l0aCBubyBkZWxpbWl0ZXIuXG4gICAqIEByZXR1cm5zIEEgc3RyaW5nIG9mIGFsbCBjb25jYXRlbmF0ZWQgcmVhc29uaW5nIHBhcnRzLlxuICAgKi9cbiAgZ2V0IHJlYXNvbmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50Lm1hcCgocGFydCkgPT4gcGFydC5yZWFzb25pbmcgfHwgXCJcIikuam9pbihcIlwiKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZmlyc3QgbWVkaWEgcGFydCBkZXRlY3RlZCBpbiB0aGUgbWVzc2FnZS4gVXNlZnVsIGZvciBleHRyYWN0aW5nXG4gICAqIChmb3IgZXhhbXBsZSkgYW4gaW1hZ2UgZnJvbSBhIGdlbmVyYXRpb24gZXhwZWN0ZWQgdG8gY3JlYXRlIG9uZS5cbiAgICogQHJldHVybnMgVGhlIGZpcnN0IGRldGVjdGVkIGBtZWRpYWAgcGFydCBpbiB0aGUgbWVzc2FnZS5cbiAgICovXG4gIGdldCBtZWRpYSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50LmZpbmQoKHBhcnQpID0+IHBhcnQubWVkaWEpPy5tZWRpYSB8fCBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBmaXJzdCBkZXRlY3RlZCBgZGF0YWAgcGFydCBvZiBhIG1lc3NhZ2UuXG4gICAqIEByZXR1cm5zIFRoZSBmaXJzdCBgZGF0YWAgcGFydCBkZXRlY3RlZCBpbiB0aGUgbWVzc2FnZSAoaWYgYW55KS5cbiAgICovXG4gIGdldCBkYXRhKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnQuZmluZCgocGFydCkgPT4gcGFydC5kYXRhKT8uZGF0YTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbGwgdG9vbCByZXF1ZXN0IGZvdW5kIGluIHRoaXMgbWVzc2FnZS5cbiAgICogQHJldHVybnMgQXJyYXkgb2YgYWxsIHRvb2wgcmVxdWVzdCBmb3VuZCBpbiB0aGlzIG1lc3NhZ2UuXG4gICAqL1xuICBnZXQgdG9vbFJlcXVlc3RzKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnQuZmlsdGVyKFxuICAgICAgKHBhcnQpID0+ICEhcGFydC50b29sUmVxdWVzdFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYWxsIHRvb2wgcmVxdWVzdHMgYW5ub3RhdGVkIHdpdGggaW50ZXJydXB0IG1ldGFkYXRhLlxuICAgKiBAcmV0dXJucyBBcnJheSBvZiBhbGwgaW50ZXJydXB0IHRvb2wgcmVxdWVzdHMuXG4gICAqL1xuICBnZXQgaW50ZXJydXB0cygpIHtcbiAgICByZXR1cm4gdGhpcy50b29sUmVxdWVzdHMuZmlsdGVyKCh0KSA9PiAhIXQubWV0YWRhdGE/LmludGVycnVwdCk7XG4gIH1cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSBNZXNzYWdlIHRvIGEgcGxhaW4gSlMgb2JqZWN0LlxuICAgKiBAcmV0dXJucyBQbGFpbiBKUyBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBkYXRhIGNvbnRhaW5lZCBpbiB0aGUgbWVzc2FnZS5cbiAgICovXG4gIHRvSlNPTigpIHtcbiAgICBjb25zdCBvdXQgPSB7XG4gICAgICByb2xlOiB0aGlzLnJvbGUsXG4gICAgICBjb250ZW50OiBbLi4udGhpcy5jb250ZW50XVxuICAgIH07XG4gICAgaWYgKHRoaXMubWV0YWRhdGEpIG91dC5tZXRhZGF0YSA9IHRoaXMubWV0YWRhdGE7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIE1lc3NhZ2Vcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVzc2FnZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/message.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js":
/*!*************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/model.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar model_exports = {};\n__export(model_exports, {\n  CandidateErrorSchema: () => CandidateErrorSchema,\n  CandidateSchema: () => CandidateSchema,\n  CustomPartSchema: () => import_document.CustomPartSchema,\n  DataPartSchema: () => import_document.DataPartSchema,\n  FinishReasonSchema: () => FinishReasonSchema,\n  GenerateActionOptionsSchema: () => GenerateActionOptionsSchema,\n  GenerateActionOutputConfig: () => GenerateActionOutputConfig,\n  GenerateRequestSchema: () => GenerateRequestSchema,\n  GenerateResponseChunkSchema: () => GenerateResponseChunkSchema,\n  GenerateResponseSchema: () => GenerateResponseSchema,\n  GenerationCommonConfigDescriptions: () => GenerationCommonConfigDescriptions,\n  GenerationCommonConfigSchema: () => GenerationCommonConfigSchema,\n  GenerationUsageSchema: () => GenerationUsageSchema,\n  MediaPartSchema: () => import_document.MediaPartSchema,\n  MessageSchema: () => MessageSchema,\n  ModelInfoSchema: () => ModelInfoSchema,\n  ModelRequestSchema: () => ModelRequestSchema,\n  ModelResponseChunkSchema: () => ModelResponseChunkSchema,\n  ModelResponseSchema: () => ModelResponseSchema,\n  OutputConfigSchema: () => OutputConfigSchema,\n  PartSchema: () => PartSchema,\n  RoleSchema: () => RoleSchema,\n  TextPartSchema: () => import_document.TextPartSchema,\n  ToolDefinitionSchema: () => ToolDefinitionSchema,\n  ToolRequestPartSchema: () => import_document.ToolRequestPartSchema,\n  ToolResponsePartSchema: () => import_document.ToolResponsePartSchema,\n  defineBackgroundModel: () => defineBackgroundModel,\n  defineGenerateAction: () => import_action.defineGenerateAction,\n  defineModel: () => defineModel,\n  getBasicUsageStats: () => getBasicUsageStats,\n  modelActionMetadata: () => modelActionMetadata,\n  modelRef: () => modelRef,\n  resolveModel: () => resolveModel,\n  simulateConstrainedGeneration: () => import_middleware.simulateConstrainedGeneration\n});\nmodule.exports = __toCommonJS(model_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_logging = __webpack_require__(/*! @genkit-ai/core/logging */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_node_perf_hooks = __webpack_require__(/*! node:perf_hooks */ \"node:perf_hooks\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_middleware = __webpack_require__(/*! ./model/middleware.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model/middleware.js\");\nvar import_action = __webpack_require__(/*! ./generate/action.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/action.js\");\nconst PartSchema = import_core.z.union([\n  import_document.TextPartSchema,\n  import_document.MediaPartSchema,\n  import_document.ToolRequestPartSchema,\n  import_document.ToolResponsePartSchema,\n  import_document.DataPartSchema,\n  import_document.CustomPartSchema,\n  import_document.ReasoningPartSchema\n]);\nconst RoleSchema = import_core.z.enum([\"system\", \"user\", \"model\", \"tool\"]);\nconst MessageSchema = import_core.z.object({\n  role: RoleSchema,\n  content: import_core.z.array(PartSchema),\n  metadata: import_core.z.record(import_core.z.unknown()).optional()\n});\nconst ModelInfoSchema = import_core.z.object({\n  /** Acceptable names for this model (e.g. different versions). */\n  versions: import_core.z.array(import_core.z.string()).optional(),\n  /** Friendly label for this model (e.g. \"Google AI - Gemini Pro\") */\n  label: import_core.z.string().optional(),\n  /** Model Specific configuration. */\n  configSchema: import_core.z.record(import_core.z.any()).optional(),\n  /** Supported model capabilities. */\n  supports: import_core.z.object({\n    /** Model can process historical messages passed with a prompt. */\n    multiturn: import_core.z.boolean().optional(),\n    /** Model can process media as part of the prompt (multimodal input). */\n    media: import_core.z.boolean().optional(),\n    /** Model can perform tool calls. */\n    tools: import_core.z.boolean().optional(),\n    /** Model can accept messages with role \"system\". */\n    systemRole: import_core.z.boolean().optional(),\n    /** Model can output this type of data. */\n    output: import_core.z.array(import_core.z.string()).optional(),\n    /** Model supports output in these content types. */\n    contentType: import_core.z.array(import_core.z.string()).optional(),\n    /** Model can natively support document-based context grounding. */\n    context: import_core.z.boolean().optional(),\n    /** Model can natively support constrained generation. */\n    constrained: import_core.z.enum([\"none\", \"all\", \"no-tools\"]).optional(),\n    /** Model supports controlling tool choice, e.g. forced tool calling. */\n    toolChoice: import_core.z.boolean().optional()\n  }).optional(),\n  /** At which stage of development this model is.\n   * - `featured` models are recommended for general use.\n   * - `stable` models are well-tested and reliable.\n   * - `unstable` models are experimental and may change.\n   * - `legacy` models are no longer recommended for new projects.\n   * - `deprecated` models are deprecated by the provider and may be removed in future versions.\n   */\n  stage: import_core.z.enum([\"featured\", \"stable\", \"unstable\", \"legacy\", \"deprecated\"]).optional()\n});\nconst ToolDefinitionSchema = import_core.z.object({\n  name: import_core.z.string(),\n  description: import_core.z.string(),\n  inputSchema: import_core.z.record(import_core.z.any()).describe(\"Valid JSON Schema representing the input of the tool.\").nullish(),\n  outputSchema: import_core.z.record(import_core.z.any()).describe(\"Valid JSON Schema describing the output of the tool.\").nullish(),\n  metadata: import_core.z.record(import_core.z.any()).describe(\"additional metadata for this tool definition\").optional()\n});\nconst GenerationCommonConfigDescriptions = {\n  temperature: \"Controls the degree of randomness in token selection. A lower value is good for a more predictable response. A higher value leads to more diverse or unexpected results.\",\n  maxOutputTokens: \"The maximum number of tokens to include in the response.\",\n  topK: \"The maximum number of tokens to consider when sampling.\",\n  topP: \"Decides how many possible words to consider. A higher value means that the model looks at more possible words, even the less likely ones, which makes the generated text more diverse.\"\n};\nconst GenerationCommonConfigSchema = import_core.z.object({\n  version: import_core.z.string().describe(\n    \"A specific version of a model family, e.g. `gemini-2.0-flash` for the `googleai` family.\"\n  ).optional(),\n  temperature: import_core.z.number().describe(GenerationCommonConfigDescriptions.temperature).optional(),\n  maxOutputTokens: import_core.z.number().describe(GenerationCommonConfigDescriptions.maxOutputTokens).optional(),\n  topK: import_core.z.number().describe(GenerationCommonConfigDescriptions.topK).optional(),\n  topP: import_core.z.number().describe(GenerationCommonConfigDescriptions.topP).optional(),\n  stopSequences: import_core.z.array(import_core.z.string()).length(5).describe(\n    \"Set of character sequences (up to 5) that will stop output generation.\"\n  ).optional()\n}).passthrough();\nconst OutputConfigSchema = import_core.z.object({\n  format: import_core.z.string().optional(),\n  schema: import_core.z.record(import_core.z.any()).optional(),\n  constrained: import_core.z.boolean().optional(),\n  contentType: import_core.z.string().optional()\n});\nconst ModelRequestSchema = import_core.z.object({\n  messages: import_core.z.array(MessageSchema),\n  config: import_core.z.any().optional(),\n  tools: import_core.z.array(ToolDefinitionSchema).optional(),\n  toolChoice: import_core.z.enum([\"auto\", \"required\", \"none\"]).optional(),\n  output: OutputConfigSchema.optional(),\n  docs: import_core.z.array(import_document.DocumentDataSchema).optional()\n});\nconst GenerateRequestSchema = ModelRequestSchema.extend({\n  /** @deprecated All responses now return a single candidate. This will always be `undefined`. */\n  candidates: import_core.z.number().optional()\n});\nconst GenerationUsageSchema = import_core.z.object({\n  inputTokens: import_core.z.number().optional(),\n  outputTokens: import_core.z.number().optional(),\n  totalTokens: import_core.z.number().optional(),\n  inputCharacters: import_core.z.number().optional(),\n  outputCharacters: import_core.z.number().optional(),\n  inputImages: import_core.z.number().optional(),\n  outputImages: import_core.z.number().optional(),\n  inputVideos: import_core.z.number().optional(),\n  outputVideos: import_core.z.number().optional(),\n  inputAudioFiles: import_core.z.number().optional(),\n  outputAudioFiles: import_core.z.number().optional(),\n  custom: import_core.z.record(import_core.z.number()).optional(),\n  thoughtsTokens: import_core.z.number().optional(),\n  cachedContentTokens: import_core.z.number().optional()\n});\nconst FinishReasonSchema = import_core.z.enum([\n  \"stop\",\n  \"length\",\n  \"blocked\",\n  \"interrupted\",\n  \"other\",\n  \"unknown\"\n]);\nconst CandidateSchema = import_core.z.object({\n  index: import_core.z.number(),\n  message: MessageSchema,\n  usage: GenerationUsageSchema.optional(),\n  finishReason: FinishReasonSchema,\n  finishMessage: import_core.z.string().optional(),\n  custom: import_core.z.unknown()\n});\nconst CandidateErrorSchema = import_core.z.object({\n  index: import_core.z.number(),\n  code: import_core.z.enum([\"blocked\", \"other\", \"unknown\"]),\n  message: import_core.z.string().optional()\n});\nconst ModelResponseSchema = import_core.z.object({\n  message: MessageSchema.optional(),\n  finishReason: FinishReasonSchema,\n  finishMessage: import_core.z.string().optional(),\n  latencyMs: import_core.z.number().optional(),\n  usage: GenerationUsageSchema.optional(),\n  /** @deprecated use `raw` instead */\n  custom: import_core.z.unknown(),\n  raw: import_core.z.unknown(),\n  request: GenerateRequestSchema.optional(),\n  operation: import_core.OperationSchema.optional()\n});\nconst GenerateResponseSchema = ModelResponseSchema.extend({\n  /** @deprecated All responses now return a single candidate. Only the first candidate will be used if supplied. Return `message`, `finishReason`, and `finishMessage` instead. */\n  candidates: import_core.z.array(CandidateSchema).optional(),\n  finishReason: FinishReasonSchema.optional()\n});\nconst ModelResponseChunkSchema = import_core.z.object({\n  role: RoleSchema.optional(),\n  /** index of the message this chunk belongs to. */\n  index: import_core.z.number().optional(),\n  /** The chunk of content to stream right now. */\n  content: import_core.z.array(PartSchema),\n  /** Model-specific extra information attached to this chunk. */\n  custom: import_core.z.unknown().optional(),\n  /** If true, the chunk includes all data from previous chunks. Otherwise, considered to be incremental. */\n  aggregated: import_core.z.boolean().optional()\n});\nconst GenerateResponseChunkSchema = ModelResponseChunkSchema;\nfunction defineModel(registry, options, runner) {\n  const label = options.label || options.name;\n  const middleware = getModelMiddleware(options);\n  const act = (0, import_core.defineAction)(\n    registry,\n    {\n      actionType: \"model\",\n      name: options.name,\n      description: label,\n      inputSchema: GenerateRequestSchema,\n      outputSchema: GenerateResponseSchema,\n      metadata: {\n        model: {\n          label,\n          customOptions: options.configSchema ? (0, import_schema.toJsonSchema)({ schema: options.configSchema }) : void 0,\n          versions: options.versions,\n          supports: options.supports\n        }\n      },\n      use: middleware\n    },\n    (input, ctx) => {\n      const startTimeMs = import_node_perf_hooks.performance.now();\n      const secondParam = options.apiVersion === \"v2\" ? ctx : (0, import_core.getStreamingCallback)(registry) || ctx.streamingRequested && ctx.sendChunk || void 0;\n      return runner(input, secondParam).then((response) => {\n        const timedResponse = {\n          ...response,\n          latencyMs: import_node_perf_hooks.performance.now() - startTimeMs\n        };\n        return timedResponse;\n      });\n    }\n  );\n  Object.assign(act, {\n    __configSchema: options.configSchema || import_core.z.unknown()\n  });\n  return act;\n}\nfunction defineBackgroundModel(registry, options) {\n  const label = options.label || options.name;\n  const middleware = getModelMiddleware(options);\n  const act = (0, import_core.defineBackgroundAction)(registry, {\n    actionType: \"background-model\",\n    name: options.name,\n    description: label,\n    inputSchema: GenerateRequestSchema,\n    outputSchema: GenerateResponseSchema,\n    metadata: {\n      model: {\n        label,\n        customOptions: options.configSchema ? (0, import_schema.toJsonSchema)({ schema: options.configSchema }) : void 0,\n        versions: options.versions,\n        supports: options.supports\n      }\n    },\n    use: middleware,\n    async start(request) {\n      const startTimeMs = import_node_perf_hooks.performance.now();\n      const response = await options.start(request);\n      Object.assign(response, {\n        latencyMs: import_node_perf_hooks.performance.now() - startTimeMs\n      });\n      return response;\n    },\n    async check(op) {\n      return options.check(op);\n    },\n    cancel: options.cancel ? async (op) => {\n      if (!options.cancel) {\n        throw new import_core.GenkitError({\n          status: \"UNIMPLEMENTED\",\n          message: \"cancel not implemented\"\n        });\n      }\n      return options.cancel(op);\n    } : void 0\n  });\n  Object.assign(act, {\n    __configSchema: options.configSchema || import_core.z.unknown()\n  });\n  return act;\n}\nfunction getModelMiddleware(options) {\n  const middleware = [\n    ...options.use || [],\n    (0, import_middleware.validateSupport)(options)\n  ];\n  if (!options?.supports?.context) middleware.push((0, import_middleware.augmentWithContext)());\n  const constratedSimulator = (0, import_middleware.simulateConstrainedGeneration)();\n  middleware.push((req, next) => {\n    if (!options?.supports?.constrained || options?.supports?.constrained === \"none\" || options?.supports?.constrained === \"no-tools\" && (req.tools?.length ?? 0) > 0) {\n      return constratedSimulator(req, next);\n    }\n    return next(req);\n  });\n  return middleware;\n}\nfunction modelActionMetadata({\n  name,\n  info,\n  configSchema,\n  background\n}) {\n  return {\n    actionType: background ? \"background-model\" : \"model\",\n    name,\n    inputJsonSchema: (0, import_schema.toJsonSchema)({ schema: GenerateRequestSchema }),\n    outputJsonSchema: background ? (0, import_schema.toJsonSchema)({ schema: import_core.OperationSchema }) : (0, import_schema.toJsonSchema)({ schema: GenerateResponseSchema }),\n    metadata: {\n      model: {\n        ...info,\n        customOptions: configSchema ? (0, import_schema.toJsonSchema)({ schema: configSchema }) : void 0\n      }\n    }\n  };\n}\nfunction modelRef(options) {\n  const ref = { ...options };\n  ref.withConfig = (cfg) => {\n    return modelRef({\n      ...options,\n      config: cfg\n    });\n  };\n  ref.withVersion = (version) => {\n    return modelRef({\n      ...options,\n      version\n    });\n  };\n  return ref;\n}\nfunction getBasicUsageStats(input, response) {\n  const inputCounts = getPartCounts(input.flatMap((md) => md.content));\n  const outputCounts = getPartCounts(\n    Array.isArray(response) ? response.flatMap((c) => c.message.content) : response.content\n  );\n  return {\n    inputCharacters: inputCounts.characters,\n    inputImages: inputCounts.images,\n    inputVideos: inputCounts.videos,\n    inputAudioFiles: inputCounts.audio,\n    outputCharacters: outputCounts.characters,\n    outputImages: outputCounts.images,\n    outputVideos: outputCounts.videos,\n    outputAudioFiles: outputCounts.audio\n  };\n}\nfunction getPartCounts(parts) {\n  return parts.reduce(\n    (counts, part) => {\n      const isImage = part.media?.contentType?.startsWith(\"image\") || part.media?.url?.startsWith(\"data:image\");\n      const isVideo = part.media?.contentType?.startsWith(\"video\") || part.media?.url?.startsWith(\"data:video\");\n      const isAudio = part.media?.contentType?.startsWith(\"audio\") || part.media?.url?.startsWith(\"data:audio\");\n      return {\n        characters: counts.characters + (part.text?.length || 0),\n        images: counts.images + (isImage ? 1 : 0),\n        videos: counts.videos + (isVideo ? 1 : 0),\n        audio: counts.audio + (isAudio ? 1 : 0)\n      };\n    },\n    { characters: 0, images: 0, videos: 0, audio: 0 }\n  );\n}\nasync function resolveModel(registry, model, options) {\n  let out;\n  let modelId;\n  if (!model) {\n    model = await registry.lookupValue(\"defaultModel\", \"defaultModel\");\n  }\n  if (!model) {\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: \"Must supply a `model` to `generate()` calls.\"\n    });\n  }\n  if (typeof model === \"string\") {\n    modelId = model;\n    out = { modelAction: await lookupModel(registry, model) };\n  } else if (model.hasOwnProperty(\"__action\")) {\n    modelId = model.__action.name;\n    out = { modelAction: model };\n  } else {\n    const ref = model;\n    modelId = ref.name;\n    out = {\n      modelAction: await lookupModel(registry, ref.name),\n      config: {\n        ...ref.config\n      },\n      version: ref.version\n    };\n  }\n  if (!out.modelAction) {\n    throw new import_core.GenkitError({\n      status: \"NOT_FOUND\",\n      message: `Model '${modelId}' not found`\n    });\n  }\n  if (options?.warnDeprecated && out.modelAction.__action.metadata?.model?.stage === \"deprecated\") {\n    import_logging.logger.warn(\n      `Model '${out.modelAction.__action.name}' is deprecated and may be removed in a future release.`\n    );\n  }\n  return out;\n}\nasync function lookupModel(registry, model) {\n  return await registry.lookupAction(`/model/${model}`) || await registry.lookupAction(`/background-model/${model}`);\n}\nconst GenerateActionOutputConfig = import_core.z.object({\n  format: import_core.z.string().optional(),\n  contentType: import_core.z.string().optional(),\n  instructions: import_core.z.union([import_core.z.boolean(), import_core.z.string()]).optional(),\n  jsonSchema: import_core.z.any().optional(),\n  constrained: import_core.z.boolean().optional()\n});\nconst GenerateActionOptionsSchema = import_core.z.object({\n  /** A model name (e.g. `vertexai/gemini-1.0-pro`). */\n  model: import_core.z.string(),\n  /** Retrieved documents to be used as context for this generation. */\n  docs: import_core.z.array(import_document.DocumentDataSchema).optional(),\n  /** Conversation history for multi-turn prompting when supported by the underlying model. */\n  messages: import_core.z.array(MessageSchema),\n  /** List of registered tool names for this generation if supported by the underlying model. */\n  tools: import_core.z.array(import_core.z.string()).optional(),\n  /** Tool calling mode. `auto` lets the model decide whether to use tools, `required` forces the model to choose a tool, and `none` forces the model not to use any tools. Defaults to `auto`.  */\n  toolChoice: import_core.z.enum([\"auto\", \"required\", \"none\"]).optional(),\n  /** Configuration for the generation request. */\n  config: import_core.z.any().optional(),\n  /** Configuration for the desired output of the request. Defaults to the model's default output if unspecified. */\n  output: GenerateActionOutputConfig.optional(),\n  /** Options for resuming an interrupted generation. */\n  resume: import_core.z.object({\n    respond: import_core.z.array(import_document.ToolResponsePartSchema).optional(),\n    restart: import_core.z.array(import_document.ToolRequestPartSchema).optional(),\n    metadata: import_core.z.record(import_core.z.any()).optional()\n  }).optional(),\n  /** When true, return tool calls for manual processing instead of automatically resolving them. */\n  returnToolRequests: import_core.z.boolean().optional(),\n  /** Maximum number of tool call iterations that can be performed in a single generate call (default 5). */\n  maxTurns: import_core.z.number().optional()\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=model.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/model.mjs":
/*!**************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/model.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CandidateErrorSchema: () => (/* binding */ CandidateErrorSchema),\n/* harmony export */   CandidateSchema: () => (/* binding */ CandidateSchema),\n/* harmony export */   CustomPartSchema: () => (/* reexport safe */ _document_js__WEBPACK_IMPORTED_MODULE_4__.CustomPartSchema),\n/* harmony export */   DataPartSchema: () => (/* reexport safe */ _document_js__WEBPACK_IMPORTED_MODULE_4__.DataPartSchema),\n/* harmony export */   FinishReasonSchema: () => (/* binding */ FinishReasonSchema),\n/* harmony export */   GenerateActionOptionsSchema: () => (/* binding */ GenerateActionOptionsSchema),\n/* harmony export */   GenerateActionOutputConfig: () => (/* binding */ GenerateActionOutputConfig),\n/* harmony export */   GenerateRequestSchema: () => (/* binding */ GenerateRequestSchema),\n/* harmony export */   GenerateResponseChunkSchema: () => (/* binding */ GenerateResponseChunkSchema),\n/* harmony export */   GenerateResponseSchema: () => (/* binding */ GenerateResponseSchema),\n/* harmony export */   GenerationCommonConfigDescriptions: () => (/* binding */ GenerationCommonConfigDescriptions),\n/* harmony export */   GenerationCommonConfigSchema: () => (/* binding */ GenerationCommonConfigSchema),\n/* harmony export */   GenerationUsageSchema: () => (/* binding */ GenerationUsageSchema),\n/* harmony export */   MediaPartSchema: () => (/* reexport safe */ _document_js__WEBPACK_IMPORTED_MODULE_4__.MediaPartSchema),\n/* harmony export */   MessageSchema: () => (/* binding */ MessageSchema),\n/* harmony export */   ModelInfoSchema: () => (/* binding */ ModelInfoSchema),\n/* harmony export */   ModelRequestSchema: () => (/* binding */ ModelRequestSchema),\n/* harmony export */   ModelResponseChunkSchema: () => (/* binding */ ModelResponseChunkSchema),\n/* harmony export */   ModelResponseSchema: () => (/* binding */ ModelResponseSchema),\n/* harmony export */   OutputConfigSchema: () => (/* binding */ OutputConfigSchema),\n/* harmony export */   PartSchema: () => (/* binding */ PartSchema),\n/* harmony export */   RoleSchema: () => (/* binding */ RoleSchema),\n/* harmony export */   TextPartSchema: () => (/* reexport safe */ _document_js__WEBPACK_IMPORTED_MODULE_4__.TextPartSchema),\n/* harmony export */   ToolDefinitionSchema: () => (/* binding */ ToolDefinitionSchema),\n/* harmony export */   ToolRequestPartSchema: () => (/* reexport safe */ _document_js__WEBPACK_IMPORTED_MODULE_4__.ToolRequestPartSchema),\n/* harmony export */   ToolResponsePartSchema: () => (/* reexport safe */ _document_js__WEBPACK_IMPORTED_MODULE_4__.ToolResponsePartSchema),\n/* harmony export */   defineBackgroundModel: () => (/* binding */ defineBackgroundModel),\n/* harmony export */   defineGenerateAction: () => (/* reexport safe */ _generate_action_js__WEBPACK_IMPORTED_MODULE_6__.defineGenerateAction),\n/* harmony export */   defineModel: () => (/* binding */ defineModel),\n/* harmony export */   getBasicUsageStats: () => (/* binding */ getBasicUsageStats),\n/* harmony export */   modelActionMetadata: () => (/* binding */ modelActionMetadata),\n/* harmony export */   modelRef: () => (/* binding */ modelRef),\n/* harmony export */   resolveModel: () => (/* binding */ resolveModel),\n/* harmony export */   simulateConstrainedGeneration: () => (/* reexport safe */ _model_middleware_js__WEBPACK_IMPORTED_MODULE_5__.simulateConstrainedGeneration)\n/* harmony export */ });\n/* harmony import */ var _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.mjs\");\n/* harmony import */ var _genkit_ai_core_logging__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @genkit-ai/core/logging */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.mjs\");\n/* harmony import */ var _genkit_ai_core_schema__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.mjs\");\n/* harmony import */ var node_perf_hooks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:perf_hooks */ \"node:perf_hooks\");\n/* harmony import */ var _document_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\n/* harmony import */ var _model_middleware_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./model/middleware.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model/middleware.js\");\n/* harmony import */ var _generate_action_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./generate/action.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate/action.js\");\n\n\n\n\n\n\n\nconst PartSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.union([\n  _document_js__WEBPACK_IMPORTED_MODULE_4__.TextPartSchema,\n  _document_js__WEBPACK_IMPORTED_MODULE_4__.MediaPartSchema,\n  _document_js__WEBPACK_IMPORTED_MODULE_4__.ToolRequestPartSchema,\n  _document_js__WEBPACK_IMPORTED_MODULE_4__.ToolResponsePartSchema,\n  _document_js__WEBPACK_IMPORTED_MODULE_4__.DataPartSchema,\n  _document_js__WEBPACK_IMPORTED_MODULE_4__.CustomPartSchema,\n  _document_js__WEBPACK_IMPORTED_MODULE_4__.ReasoningPartSchema\n]);\nconst RoleSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.enum([\"system\", \"user\", \"model\", \"tool\"]);\nconst MessageSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  role: RoleSchema,\n  content: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(PartSchema),\n  metadata: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.record(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.unknown()).optional()\n});\nconst ModelInfoSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  /** Acceptable names for this model (e.g. different versions). */\n  versions: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional(),\n  /** Friendly label for this model (e.g. \"Google AI - Gemini Pro\") */\n  label: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  /** Model Specific configuration. */\n  configSchema: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.record(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.any()).optional(),\n  /** Supported model capabilities. */\n  supports: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    /** Model can process historical messages passed with a prompt. */\n    multiturn: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n    /** Model can process media as part of the prompt (multimodal input). */\n    media: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n    /** Model can perform tool calls. */\n    tools: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n    /** Model can accept messages with role \"system\". */\n    systemRole: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n    /** Model can output this type of data. */\n    output: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional(),\n    /** Model supports output in these content types. */\n    contentType: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional(),\n    /** Model can natively support document-based context grounding. */\n    context: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n    /** Model can natively support constrained generation. */\n    constrained: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.enum([\"none\", \"all\", \"no-tools\"]).optional(),\n    /** Model supports controlling tool choice, e.g. forced tool calling. */\n    toolChoice: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional()\n  }).optional(),\n  /** At which stage of development this model is.\n   * - `featured` models are recommended for general use.\n   * - `stable` models are well-tested and reliable.\n   * - `unstable` models are experimental and may change.\n   * - `legacy` models are no longer recommended for new projects.\n   * - `deprecated` models are deprecated by the provider and may be removed in future versions.\n   */\n  stage: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.enum([\"featured\", \"stable\", \"unstable\", \"legacy\", \"deprecated\"]).optional()\n});\nconst ToolDefinitionSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  name: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  description: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  inputSchema: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.record(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.any()).describe(\"Valid JSON Schema representing the input of the tool.\").nullish(),\n  outputSchema: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.record(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.any()).describe(\"Valid JSON Schema describing the output of the tool.\").nullish(),\n  metadata: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.record(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.any()).describe(\"additional metadata for this tool definition\").optional()\n});\nconst GenerationCommonConfigDescriptions = {\n  temperature: \"Controls the degree of randomness in token selection. A lower value is good for a more predictable response. A higher value leads to more diverse or unexpected results.\",\n  maxOutputTokens: \"The maximum number of tokens to include in the response.\",\n  topK: \"The maximum number of tokens to consider when sampling.\",\n  topP: \"Decides how many possible words to consider. A higher value means that the model looks at more possible words, even the less likely ones, which makes the generated text more diverse.\"\n};\nconst GenerationCommonConfigSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  version: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\n    \"A specific version of a model family, e.g. `gemini-2.0-flash` for the `googleai` family.\"\n  ).optional(),\n  temperature: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().describe(GenerationCommonConfigDescriptions.temperature).optional(),\n  maxOutputTokens: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().describe(GenerationCommonConfigDescriptions.maxOutputTokens).optional(),\n  topK: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().describe(GenerationCommonConfigDescriptions.topK).optional(),\n  topP: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().describe(GenerationCommonConfigDescriptions.topP).optional(),\n  stopSequences: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string()).length(5).describe(\n    \"Set of character sequences (up to 5) that will stop output generation.\"\n  ).optional()\n}).passthrough();\nconst OutputConfigSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  format: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  schema: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.record(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.any()).optional(),\n  constrained: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n  contentType: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n});\nconst ModelRequestSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  messages: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(MessageSchema),\n  config: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.any().optional(),\n  tools: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(ToolDefinitionSchema).optional(),\n  toolChoice: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.enum([\"auto\", \"required\", \"none\"]).optional(),\n  output: OutputConfigSchema.optional(),\n  docs: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(_document_js__WEBPACK_IMPORTED_MODULE_4__.DocumentDataSchema).optional()\n});\nconst GenerateRequestSchema = ModelRequestSchema.extend({\n  /** @deprecated All responses now return a single candidate. This will always be `undefined`. */\n  candidates: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional()\n});\nconst GenerationUsageSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  inputTokens: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  outputTokens: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  totalTokens: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  inputCharacters: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  outputCharacters: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  inputImages: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  outputImages: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  inputVideos: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  outputVideos: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  inputAudioFiles: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  outputAudioFiles: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  custom: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.record(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number()).optional(),\n  thoughtsTokens: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  cachedContentTokens: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional()\n});\nconst FinishReasonSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n  \"stop\",\n  \"length\",\n  \"blocked\",\n  \"interrupted\",\n  \"other\",\n  \"unknown\"\n]);\nconst CandidateSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  index: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n  message: MessageSchema,\n  usage: GenerationUsageSchema.optional(),\n  finishReason: FinishReasonSchema,\n  finishMessage: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  custom: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.unknown()\n});\nconst CandidateErrorSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  index: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n  code: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.enum([\"blocked\", \"other\", \"unknown\"]),\n  message: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n});\nconst ModelResponseSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  message: MessageSchema.optional(),\n  finishReason: FinishReasonSchema,\n  finishMessage: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  latencyMs: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  usage: GenerationUsageSchema.optional(),\n  /** @deprecated use `raw` instead */\n  custom: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.unknown(),\n  raw: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.unknown(),\n  request: GenerateRequestSchema.optional(),\n  operation: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.OperationSchema.optional()\n});\nconst GenerateResponseSchema = ModelResponseSchema.extend({\n  /** @deprecated All responses now return a single candidate. Only the first candidate will be used if supplied. Return `message`, `finishReason`, and `finishMessage` instead. */\n  candidates: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(CandidateSchema).optional(),\n  finishReason: FinishReasonSchema.optional()\n});\nconst ModelResponseChunkSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  role: RoleSchema.optional(),\n  /** index of the message this chunk belongs to. */\n  index: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  /** The chunk of content to stream right now. */\n  content: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(PartSchema),\n  /** Model-specific extra information attached to this chunk. */\n  custom: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.unknown().optional(),\n  /** If true, the chunk includes all data from previous chunks. Otherwise, considered to be incremental. */\n  aggregated: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional()\n});\nconst GenerateResponseChunkSchema = ModelResponseChunkSchema;\nfunction defineModel(registry, options, runner) {\n  const label = options.label || options.name;\n  const middleware = getModelMiddleware(options);\n  const act = (0,_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.defineAction)(\n    registry,\n    {\n      actionType: \"model\",\n      name: options.name,\n      description: label,\n      inputSchema: GenerateRequestSchema,\n      outputSchema: GenerateResponseSchema,\n      metadata: {\n        model: {\n          label,\n          customOptions: options.configSchema ? (0,_genkit_ai_core_schema__WEBPACK_IMPORTED_MODULE_2__.toJsonSchema)({ schema: options.configSchema }) : void 0,\n          versions: options.versions,\n          supports: options.supports\n        }\n      },\n      use: middleware\n    },\n    (input, ctx) => {\n      const startTimeMs = node_perf_hooks__WEBPACK_IMPORTED_MODULE_3__.performance.now();\n      const secondParam = options.apiVersion === \"v2\" ? ctx : (0,_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.getStreamingCallback)(registry) || ctx.streamingRequested && ctx.sendChunk || void 0;\n      return runner(input, secondParam).then((response) => {\n        const timedResponse = {\n          ...response,\n          latencyMs: node_perf_hooks__WEBPACK_IMPORTED_MODULE_3__.performance.now() - startTimeMs\n        };\n        return timedResponse;\n      });\n    }\n  );\n  Object.assign(act, {\n    __configSchema: options.configSchema || _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.unknown()\n  });\n  return act;\n}\nfunction defineBackgroundModel(registry, options) {\n  const label = options.label || options.name;\n  const middleware = getModelMiddleware(options);\n  const act = (0,_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.defineBackgroundAction)(registry, {\n    actionType: \"background-model\",\n    name: options.name,\n    description: label,\n    inputSchema: GenerateRequestSchema,\n    outputSchema: GenerateResponseSchema,\n    metadata: {\n      model: {\n        label,\n        customOptions: options.configSchema ? (0,_genkit_ai_core_schema__WEBPACK_IMPORTED_MODULE_2__.toJsonSchema)({ schema: options.configSchema }) : void 0,\n        versions: options.versions,\n        supports: options.supports\n      }\n    },\n    use: middleware,\n    async start(request) {\n      const startTimeMs = node_perf_hooks__WEBPACK_IMPORTED_MODULE_3__.performance.now();\n      const response = await options.start(request);\n      Object.assign(response, {\n        latencyMs: node_perf_hooks__WEBPACK_IMPORTED_MODULE_3__.performance.now() - startTimeMs\n      });\n      return response;\n    },\n    async check(op) {\n      return options.check(op);\n    },\n    cancel: options.cancel ? async (op) => {\n      if (!options.cancel) {\n        throw new _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.GenkitError({\n          status: \"UNIMPLEMENTED\",\n          message: \"cancel not implemented\"\n        });\n      }\n      return options.cancel(op);\n    } : void 0\n  });\n  Object.assign(act, {\n    __configSchema: options.configSchema || _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.unknown()\n  });\n  return act;\n}\nfunction getModelMiddleware(options) {\n  const middleware = [\n    ...options.use || [],\n    (0,_model_middleware_js__WEBPACK_IMPORTED_MODULE_5__.validateSupport)(options)\n  ];\n  if (!options?.supports?.context) middleware.push((0,_model_middleware_js__WEBPACK_IMPORTED_MODULE_5__.augmentWithContext)());\n  const constratedSimulator = (0,_model_middleware_js__WEBPACK_IMPORTED_MODULE_5__.simulateConstrainedGeneration)();\n  middleware.push((req, next) => {\n    if (!options?.supports?.constrained || options?.supports?.constrained === \"none\" || options?.supports?.constrained === \"no-tools\" && (req.tools?.length ?? 0) > 0) {\n      return constratedSimulator(req, next);\n    }\n    return next(req);\n  });\n  return middleware;\n}\nfunction modelActionMetadata({\n  name,\n  info,\n  configSchema,\n  background\n}) {\n  return {\n    actionType: background ? \"background-model\" : \"model\",\n    name,\n    inputJsonSchema: (0,_genkit_ai_core_schema__WEBPACK_IMPORTED_MODULE_2__.toJsonSchema)({ schema: GenerateRequestSchema }),\n    outputJsonSchema: background ? (0,_genkit_ai_core_schema__WEBPACK_IMPORTED_MODULE_2__.toJsonSchema)({ schema: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.OperationSchema }) : (0,_genkit_ai_core_schema__WEBPACK_IMPORTED_MODULE_2__.toJsonSchema)({ schema: GenerateResponseSchema }),\n    metadata: {\n      model: {\n        ...info,\n        customOptions: configSchema ? (0,_genkit_ai_core_schema__WEBPACK_IMPORTED_MODULE_2__.toJsonSchema)({ schema: configSchema }) : void 0\n      }\n    }\n  };\n}\nfunction modelRef(options) {\n  const ref = { ...options };\n  ref.withConfig = (cfg) => {\n    return modelRef({\n      ...options,\n      config: cfg\n    });\n  };\n  ref.withVersion = (version) => {\n    return modelRef({\n      ...options,\n      version\n    });\n  };\n  return ref;\n}\nfunction getBasicUsageStats(input, response) {\n  const inputCounts = getPartCounts(input.flatMap((md) => md.content));\n  const outputCounts = getPartCounts(\n    Array.isArray(response) ? response.flatMap((c) => c.message.content) : response.content\n  );\n  return {\n    inputCharacters: inputCounts.characters,\n    inputImages: inputCounts.images,\n    inputVideos: inputCounts.videos,\n    inputAudioFiles: inputCounts.audio,\n    outputCharacters: outputCounts.characters,\n    outputImages: outputCounts.images,\n    outputVideos: outputCounts.videos,\n    outputAudioFiles: outputCounts.audio\n  };\n}\nfunction getPartCounts(parts) {\n  return parts.reduce(\n    (counts, part) => {\n      const isImage = part.media?.contentType?.startsWith(\"image\") || part.media?.url?.startsWith(\"data:image\");\n      const isVideo = part.media?.contentType?.startsWith(\"video\") || part.media?.url?.startsWith(\"data:video\");\n      const isAudio = part.media?.contentType?.startsWith(\"audio\") || part.media?.url?.startsWith(\"data:audio\");\n      return {\n        characters: counts.characters + (part.text?.length || 0),\n        images: counts.images + (isImage ? 1 : 0),\n        videos: counts.videos + (isVideo ? 1 : 0),\n        audio: counts.audio + (isAudio ? 1 : 0)\n      };\n    },\n    { characters: 0, images: 0, videos: 0, audio: 0 }\n  );\n}\nasync function resolveModel(registry, model, options) {\n  let out;\n  let modelId;\n  if (!model) {\n    model = await registry.lookupValue(\"defaultModel\", \"defaultModel\");\n  }\n  if (!model) {\n    throw new _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: \"Must supply a `model` to `generate()` calls.\"\n    });\n  }\n  if (typeof model === \"string\") {\n    modelId = model;\n    out = { modelAction: await lookupModel(registry, model) };\n  } else if (model.hasOwnProperty(\"__action\")) {\n    modelId = model.__action.name;\n    out = { modelAction: model };\n  } else {\n    const ref = model;\n    modelId = ref.name;\n    out = {\n      modelAction: await lookupModel(registry, ref.name),\n      config: {\n        ...ref.config\n      },\n      version: ref.version\n    };\n  }\n  if (!out.modelAction) {\n    throw new _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.GenkitError({\n      status: \"NOT_FOUND\",\n      message: `Model '${modelId}' not found`\n    });\n  }\n  if (options?.warnDeprecated && out.modelAction.__action.metadata?.model?.stage === \"deprecated\") {\n    _genkit_ai_core_logging__WEBPACK_IMPORTED_MODULE_1__.logger.warn(\n      `Model '${out.modelAction.__action.name}' is deprecated and may be removed in a future release.`\n    );\n  }\n  return out;\n}\nasync function lookupModel(registry, model) {\n  return await registry.lookupAction(`/model/${model}`) || await registry.lookupAction(`/background-model/${model}`);\n}\nconst GenerateActionOutputConfig = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  format: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  contentType: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  instructions: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.union([_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.boolean(), _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string()]).optional(),\n  jsonSchema: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.any().optional(),\n  constrained: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional()\n});\nconst GenerateActionOptionsSchema = _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  /** A model name (e.g. `vertexai/gemini-1.0-pro`). */\n  model: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  /** Retrieved documents to be used as context for this generation. */\n  docs: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(_document_js__WEBPACK_IMPORTED_MODULE_4__.DocumentDataSchema).optional(),\n  /** Conversation history for multi-turn prompting when supported by the underlying model. */\n  messages: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(MessageSchema),\n  /** List of registered tool names for this generation if supported by the underlying model. */\n  tools: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional(),\n  /** Tool calling mode. `auto` lets the model decide whether to use tools, `required` forces the model to choose a tool, and `none` forces the model not to use any tools. Defaults to `auto`.  */\n  toolChoice: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.enum([\"auto\", \"required\", \"none\"]).optional(),\n  /** Configuration for the generation request. */\n  config: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.any().optional(),\n  /** Configuration for the desired output of the request. Defaults to the model's default output if unspecified. */\n  output: GenerateActionOutputConfig.optional(),\n  /** Options for resuming an interrupted generation. */\n  resume: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    respond: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(_document_js__WEBPACK_IMPORTED_MODULE_4__.ToolResponsePartSchema).optional(),\n    restart: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.array(_document_js__WEBPACK_IMPORTED_MODULE_4__.ToolRequestPartSchema).optional(),\n    metadata: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.record(_genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.any()).optional()\n  }).optional(),\n  /** When true, return tool calls for manual processing instead of automatically resolving them. */\n  returnToolRequests: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n  /** Maximum number of tool call iterations that can be performed in a single generate call (default 5). */\n  maxTurns: _genkit_ai_core__WEBPACK_IMPORTED_MODULE_0__.z.number().optional()\n});\n\n//# sourceMappingURL=model.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/model.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/model/middleware.js":
/*!************************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/model/middleware.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar middleware_exports = {};\n__export(middleware_exports, {\n  CONTEXT_PREFACE: () => CONTEXT_PREFACE,\n  augmentWithContext: () => augmentWithContext,\n  downloadRequestMedia: () => downloadRequestMedia,\n  simulateConstrainedGeneration: () => simulateConstrainedGeneration,\n  simulateSystemPrompt: () => simulateSystemPrompt,\n  validateSupport: () => validateSupport\n});\nmodule.exports = __toCommonJS(middleware_exports);\nvar import_document = __webpack_require__(/*! ../document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_formats = __webpack_require__(/*! ../formats/index.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/formats/index.js\");\nfunction downloadRequestMedia(options) {\n  return async (req, next) => {\n    const { default: fetch } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/node-fetch\"), __webpack_require__.e(\"vendor-chunks/fetch-blob\"), __webpack_require__.e(\"vendor-chunks/formdata-polyfill\"), __webpack_require__.e(\"vendor-chunks/data-uri-to-buffer\"), __webpack_require__.e(\"vendor-chunks/web-streams-polyfill\"), __webpack_require__.e(\"vendor-chunks/node-domexception\")]).then(__webpack_require__.bind(__webpack_require__, /*! node-fetch */ \"(action-browser)/./node_modules/node-fetch/src/index.js\"));\n    const newReq = {\n      ...req,\n      messages: await Promise.all(\n        req.messages.map(async (message) => {\n          const content = await Promise.all(\n            message.content.map(async (part) => {\n              if (!part.media || !part.media.url.startsWith(\"http\") || options?.filter && !options?.filter(part)) {\n                return part;\n              }\n              const response = await fetch(part.media.url, {\n                size: options?.maxBytes\n              });\n              if (response.status !== 200)\n                throw new Error(\n                  `HTTP error downloading media '${part.media.url}': ${await response.text()}`\n                );\n              const contentType = part.media.contentType || response.headers.get(\"content-type\") || \"\";\n              return {\n                media: {\n                  contentType,\n                  url: `data:${contentType};base64,${Buffer.from(\n                    await response.arrayBuffer()\n                  ).toString(\"base64\")}`\n                }\n              };\n            })\n          );\n          return {\n            ...message,\n            content\n          };\n        })\n      )\n    };\n    return next(newReq);\n  };\n}\nfunction validateSupport(options) {\n  const supports = options.supports || {};\n  return async (req, next) => {\n    function invalid(message) {\n      throw new Error(\n        `Model '${options.name}' does not support ${message}. Request: ${JSON.stringify(\n          req,\n          null,\n          2\n        )}`\n      );\n    }\n    if (supports.media === false && req.messages.some((message) => message.content.some((part) => part.media)))\n      invalid(\"media, but media was provided\");\n    if (supports.tools === false && req.tools?.length)\n      invalid(\"tool use, but tools were provided\");\n    if (supports.multiturn === false && req.messages.length > 1)\n      invalid(`multiple messages, but ${req.messages.length} were provided`);\n    return next();\n  };\n}\nfunction lastUserMessage(messages) {\n  for (let i = messages.length - 1; i >= 0; i--) {\n    if (messages[i].role === \"user\") {\n      return messages[i];\n    }\n  }\n  return void 0;\n}\nfunction simulateSystemPrompt(options) {\n  const preface = options?.preface || \"SYSTEM INSTRUCTIONS:\\n\";\n  const acknowledgement = options?.acknowledgement || \"Understood.\";\n  return (req, next) => {\n    const messages = [...req.messages];\n    for (let i = 0; i < messages.length; i++) {\n      if (req.messages[i].role === \"system\") {\n        const systemPrompt = messages[i].content;\n        messages.splice(\n          i,\n          1,\n          { role: \"user\", content: [{ text: preface }, ...systemPrompt] },\n          { role: \"model\", content: [{ text: acknowledgement }] }\n        );\n        break;\n      }\n    }\n    return next({ ...req, messages });\n  };\n}\nconst CONTEXT_PREFACE = \"\\n\\nUse the following information to complete your task:\\n\\n\";\nconst CONTEXT_ITEM_TEMPLATE = (d, index, options) => {\n  let out = \"- \";\n  if (options?.citationKey) {\n    out += `[${d.metadata[options.citationKey]}]: `;\n  } else if (options?.citationKey === void 0) {\n    out += `[${d.metadata?.[\"ref\"] || d.metadata?.[\"id\"] || index}]: `;\n  }\n  out += d.text + \"\\n\";\n  return out;\n};\nfunction augmentWithContext(options) {\n  const preface = typeof options?.preface === \"undefined\" ? CONTEXT_PREFACE : options.preface;\n  const itemTemplate = options?.itemTemplate || CONTEXT_ITEM_TEMPLATE;\n  return (req, next) => {\n    if (!req.docs?.length) return next(req);\n    const userMessage = lastUserMessage(req.messages);\n    if (!userMessage) return next(req);\n    const contextPartIndex = userMessage?.content.findIndex(\n      (p) => p.metadata?.purpose === \"context\"\n    );\n    const contextPart = contextPartIndex >= 0 && userMessage.content[contextPartIndex];\n    if (contextPart && !contextPart.metadata?.pending) {\n      return next(req);\n    }\n    let out = `${preface || \"\"}`;\n    req.docs?.forEach((d, i) => {\n      out += itemTemplate(new import_document.Document(d), i, options);\n    });\n    out += \"\\n\";\n    if (contextPartIndex >= 0) {\n      userMessage.content[contextPartIndex] = {\n        ...contextPart,\n        text: out,\n        metadata: { purpose: \"context\" }\n      };\n    } else {\n      userMessage.content.push({ text: out, metadata: { purpose: \"context\" } });\n    }\n    return next(req);\n  };\n}\nconst DEFAULT_CONSTRAINED_GENERATION_INSTRUSCTIONS = (schema) => `Output should be in JSON format and conform to the following schema:\n\n\\`\\`\\`\n${JSON.stringify(schema)}\n\\`\\`\\`\n`;\nfunction simulateConstrainedGeneration(options) {\n  return (req, next) => {\n    let instructions;\n    if (req.output?.constrained && req.output?.schema) {\n      instructions = (options?.instructionsRenderer ?? DEFAULT_CONSTRAINED_GENERATION_INSTRUSCTIONS)(req.output?.schema);\n      req = {\n        ...req,\n        messages: (0, import_formats.injectInstructions)(req.messages, instructions),\n        output: {\n          ...req.output,\n          // we're simulating it, so to the underlying model it's unconstrained.\n          constrained: false,\n          format: void 0,\n          contentType: void 0,\n          schema: void 0\n        }\n      };\n    }\n    return next(req);\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=middleware.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/model/middleware.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/prompt.js":
/*!**************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/prompt.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar prompt_exports = {};\n__export(prompt_exports, {\n  defineHelper: () => defineHelper,\n  definePartial: () => definePartial,\n  definePrompt: () => definePrompt,\n  isExecutablePrompt: () => isExecutablePrompt,\n  isPromptAction: () => isPromptAction,\n  loadPromptFolder: () => loadPromptFolder,\n  loadPromptFolderRecursively: () => loadPromptFolderRecursively,\n  prompt: () => prompt\n});\nmodule.exports = __toCommonJS(prompt_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_async = __webpack_require__(/*! @genkit-ai/core/async */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async.js\");\nvar import_logging = __webpack_require__(/*! @genkit-ai/core/logging */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! @genkit-ai/core/tracing */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_fs = __webpack_require__(/*! fs */ \"fs\");\nvar import_path = __webpack_require__(/*! path */ \"path\");\nvar import_generate = __webpack_require__(/*! ./generate.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/generate.js\");\nvar import_message = __webpack_require__(/*! ./message.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/message.js\");\nvar import_model = __webpack_require__(/*! ./model.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/model.js\");\nvar import_session = __webpack_require__(/*! ./session.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/session.js\");\nfunction isPromptAction(action) {\n  return action.__action.metadata?.type === \"prompt\";\n}\nfunction definePrompt(registry, options) {\n  return definePromptAsync(\n    registry,\n    `${options.name}${options.variant ? `.${options.variant}` : \"\"}`,\n    Promise.resolve(options)\n  );\n}\nfunction definePromptAsync(registry, name, optionsPromise) {\n  const promptCache = {};\n  const renderOptionsFn = async (input, renderOptions) => {\n    return await (0, import_tracing.runInNewSpan)(\n      registry,\n      {\n        metadata: {\n          name: \"render\",\n          input\n        },\n        labels: {\n          [import_tracing.SPAN_TYPE_ATTR]: \"promptTemplate\"\n        }\n      },\n      async (metadata) => {\n        const messages = [];\n        renderOptions = { ...renderOptions };\n        const session = (0, import_session.getCurrentSession)(registry);\n        const resolvedOptions = await optionsPromise;\n        await renderSystemPrompt(\n          registry,\n          session,\n          input,\n          messages,\n          resolvedOptions,\n          promptCache,\n          renderOptions\n        );\n        await renderMessages(\n          registry,\n          session,\n          input,\n          messages,\n          resolvedOptions,\n          renderOptions,\n          promptCache\n        );\n        await renderUserPrompt(\n          registry,\n          session,\n          input,\n          messages,\n          resolvedOptions,\n          promptCache,\n          renderOptions\n        );\n        let docs;\n        if (typeof resolvedOptions.docs === \"function\") {\n          docs = await resolvedOptions.docs(input, {\n            state: session?.state,\n            context: renderOptions?.context || (0, import_core.getContext)(registry) || {}\n          });\n        } else {\n          docs = resolvedOptions.docs;\n        }\n        const opts = (0, import_core.stripUndefinedProps)({\n          model: resolvedOptions.model,\n          maxTurns: resolvedOptions.maxTurns,\n          messages,\n          docs,\n          tools: resolvedOptions.tools,\n          returnToolRequests: resolvedOptions.returnToolRequests,\n          toolChoice: resolvedOptions.toolChoice,\n          context: resolvedOptions.context,\n          output: resolvedOptions.output,\n          use: resolvedOptions.use,\n          ...(0, import_core.stripUndefinedProps)(renderOptions),\n          config: {\n            ...resolvedOptions?.config,\n            ...renderOptions?.config\n          }\n        });\n        if (Object.keys(opts.config).length === 0 && !renderOptions?.config) {\n          delete opts.config;\n        }\n        metadata.output = opts;\n        return opts;\n      }\n    );\n  };\n  const rendererActionConfig = (0, import_async.lazy)(\n    () => optionsPromise.then((options) => {\n      const metadata = promptMetadata(options);\n      return {\n        name: `${options.name}${options.variant ? `.${options.variant}` : \"\"}`,\n        inputJsonSchema: options.input?.jsonSchema,\n        inputSchema: options.input?.schema,\n        description: options.description,\n        actionType: \"prompt\",\n        metadata,\n        fn: async (input) => {\n          return (0, import_generate.toGenerateRequest)(\n            registry,\n            await renderOptionsFn(input, void 0)\n          );\n        }\n      };\n    })\n  );\n  const rendererAction = (0, import_core.defineActionAsync)(\n    registry,\n    \"prompt\",\n    name,\n    rendererActionConfig,\n    (action) => {\n      action.__executablePrompt = executablePrompt;\n    }\n  );\n  const executablePromptActionConfig = (0, import_async.lazy)(\n    () => optionsPromise.then((options) => {\n      const metadata = promptMetadata(options);\n      return {\n        name: `${options.name}${options.variant ? `.${options.variant}` : \"\"}`,\n        inputJsonSchema: options.input?.jsonSchema,\n        inputSchema: options.input?.schema,\n        outputSchema: import_model.GenerateActionOptionsSchema,\n        description: options.description,\n        actionType: \"executable-prompt\",\n        metadata,\n        fn: async (input) => {\n          return await (0, import_generate.toGenerateActionOptions)(\n            registry,\n            await renderOptionsFn(input, void 0)\n          );\n        }\n      };\n    })\n  );\n  (0, import_core.defineActionAsync)(\n    registry,\n    \"executable-prompt\",\n    name,\n    executablePromptActionConfig,\n    (action) => {\n      action.__executablePrompt = executablePrompt;\n    }\n  );\n  const executablePrompt = wrapInExecutablePrompt(\n    registry,\n    renderOptionsFn,\n    rendererAction\n  );\n  return executablePrompt;\n}\nfunction promptMetadata(options) {\n  const metadata = {\n    ...options.metadata,\n    prompt: {\n      ...options.metadata?.prompt,\n      config: options.config,\n      input: {\n        schema: options.input ? (0, import_schema.toJsonSchema)(options.input) : void 0\n      },\n      name: options.name.includes(\".\") ? options.name.split(\".\")[0] : options.name,\n      model: modelName(options.model)\n    },\n    type: \"prompt\"\n  };\n  if (options.variant) {\n    metadata.prompt.variant = options.variant;\n  }\n  return metadata;\n}\nfunction wrapInExecutablePrompt(registry, renderOptionsFn, rendererAction) {\n  const executablePrompt = async (input, opts) => {\n    return await (0, import_tracing.runInNewSpan)(\n      registry,\n      {\n        metadata: {\n          name: (await rendererAction).__action.name,\n          input\n        },\n        labels: {\n          [import_tracing.SPAN_TYPE_ATTR]: \"dotprompt\"\n        }\n      },\n      async (metadata) => {\n        const output = await (0, import_generate.generate)(registry, {\n          ...await renderOptionsFn(input, opts)\n        });\n        metadata.output = output;\n        return output;\n      }\n    );\n  };\n  executablePrompt.render = async (input, opts) => {\n    return {\n      ...await renderOptionsFn(input, opts)\n    };\n  };\n  executablePrompt.stream = (input, opts) => {\n    return (0, import_generate.generateStream)(registry, renderOptionsFn(input, opts));\n  };\n  executablePrompt.asTool = async () => {\n    return await rendererAction;\n  };\n  return executablePrompt;\n}\nasync function renderSystemPrompt(registry, session, input, messages, options, promptCache, renderOptions) {\n  if (typeof options.system === \"function\") {\n    messages.push({\n      role: \"system\",\n      content: normalizeParts(\n        await options.system(input, {\n          state: session?.state,\n          context: renderOptions?.context || (0, import_core.getContext)(registry) || {}\n        })\n      )\n    });\n  } else if (typeof options.system === \"string\") {\n    if (!promptCache.system) {\n      promptCache.system = await registry.dotprompt.compile(options.system);\n    }\n    messages.push({\n      role: \"system\",\n      content: await renderDotpromptToParts(\n        registry,\n        promptCache.system,\n        input,\n        session,\n        options,\n        renderOptions\n      )\n    });\n  } else if (options.system) {\n    messages.push({\n      role: \"system\",\n      content: normalizeParts(options.system)\n    });\n  }\n}\nasync function renderMessages(registry, session, input, messages, options, renderOptions, promptCache) {\n  if (options.messages) {\n    if (typeof options.messages === \"function\") {\n      messages.push(\n        ...await options.messages(input, {\n          state: session?.state,\n          context: renderOptions?.context || (0, import_core.getContext)(registry) || {},\n          history: renderOptions?.messages\n        })\n      );\n    } else if (typeof options.messages === \"string\") {\n      if (!promptCache.messages) {\n        promptCache.messages = await registry.dotprompt.compile(\n          options.messages\n        );\n      }\n      const rendered = await promptCache.messages({\n        input,\n        context: {\n          ...renderOptions?.context || (0, import_core.getContext)(registry),\n          state: session?.state\n        },\n        messages: renderOptions?.messages?.map(\n          (m) => import_message.Message.parseData(m)\n        )\n      });\n      messages.push(...rendered.messages);\n    } else {\n      messages.push(...options.messages);\n    }\n  } else {\n    if (renderOptions.messages) {\n      messages.push(...renderOptions.messages);\n    }\n  }\n  if (renderOptions?.messages) {\n    delete renderOptions.messages;\n  }\n}\nasync function renderUserPrompt(registry, session, input, messages, options, promptCache, renderOptions) {\n  if (typeof options.prompt === \"function\") {\n    messages.push({\n      role: \"user\",\n      content: normalizeParts(\n        await options.prompt(input, {\n          state: session?.state,\n          context: renderOptions?.context || (0, import_core.getContext)(registry) || {}\n        })\n      )\n    });\n  } else if (typeof options.prompt === \"string\") {\n    if (!promptCache.userPrompt) {\n      promptCache.userPrompt = await registry.dotprompt.compile(options.prompt);\n    }\n    messages.push({\n      role: \"user\",\n      content: await renderDotpromptToParts(\n        registry,\n        promptCache.userPrompt,\n        input,\n        session,\n        options,\n        renderOptions\n      )\n    });\n  } else if (options.prompt) {\n    messages.push({\n      role: \"user\",\n      content: normalizeParts(options.prompt)\n    });\n  }\n}\nfunction modelName(modelArg) {\n  if (modelArg === void 0) {\n    return void 0;\n  }\n  if (typeof modelArg === \"string\") {\n    return modelArg;\n  }\n  if (modelArg.name) {\n    return modelArg.name;\n  }\n  return modelArg.__action.name;\n}\nfunction normalizeParts(parts) {\n  if (Array.isArray(parts)) return parts;\n  if (typeof parts === \"string\") {\n    return [\n      {\n        text: parts\n      }\n    ];\n  }\n  return [parts];\n}\nasync function renderDotpromptToParts(registry, promptFn, input, session, options, renderOptions) {\n  const renderred = await promptFn({\n    input,\n    context: {\n      ...renderOptions?.context || (0, import_core.getContext)(registry),\n      state: session?.state\n    }\n  });\n  if (renderred.messages.length !== 1) {\n    throw new Error(\"parts tempate must produce only one message\");\n  }\n  return renderred.messages[0].content;\n}\nfunction isExecutablePrompt(obj) {\n  return !!obj?.render && !!obj?.asTool && !!obj?.stream;\n}\nfunction loadPromptFolder(registry, dir = \"./prompts\", ns) {\n  const promptsPath = (0, import_path.resolve)(dir);\n  if ((0, import_fs.existsSync)(promptsPath)) {\n    loadPromptFolderRecursively(registry, dir, ns, \"\");\n  }\n}\nfunction loadPromptFolderRecursively(registry, dir, ns, subDir) {\n  const promptsPath = (0, import_path.resolve)(dir);\n  const dirEnts = (0, import_fs.readdirSync)((0, import_path.join)(promptsPath, subDir), {\n    withFileTypes: true\n  });\n  for (const dirEnt of dirEnts) {\n    const parentPath = (0, import_path.join)(promptsPath, subDir);\n    const fileName = dirEnt.name;\n    if (dirEnt.isFile() && fileName.endsWith(\".prompt\")) {\n      if (fileName.startsWith(\"_\")) {\n        const partialName = fileName.substring(1, fileName.length - 7);\n        definePartial(\n          registry,\n          partialName,\n          (0, import_fs.readFileSync)((0, import_path.join)(parentPath, fileName), {\n            encoding: \"utf8\"\n          })\n        );\n        import_logging.logger.debug(\n          `Registered Dotprompt partial \"${partialName}\" from \"${(0, import_path.join)(parentPath, fileName)}\"`\n        );\n      } else {\n        loadPrompt(\n          registry,\n          promptsPath,\n          fileName,\n          subDir ? `${subDir}/` : \"\",\n          ns\n        );\n      }\n    } else if (dirEnt.isDirectory()) {\n      loadPromptFolderRecursively(registry, dir, ns, (0, import_path.join)(subDir, fileName));\n    }\n  }\n}\nfunction definePartial(registry, name, source) {\n  registry.dotprompt.definePartial(name, source);\n}\nfunction defineHelper(registry, name, fn) {\n  registry.dotprompt.defineHelper(name, fn);\n}\nfunction loadPrompt(registry, path, filename, prefix = \"\", ns = \"dotprompt\") {\n  let name = `${prefix ?? \"\"}${(0, import_path.basename)(filename, \".prompt\")}`;\n  let variant = null;\n  if (name.includes(\".\")) {\n    const parts = name.split(\".\");\n    name = parts[0];\n    variant = parts[1];\n  }\n  const source = (0, import_fs.readFileSync)((0, import_path.join)(path, prefix ?? \"\", filename), \"utf8\");\n  const parsedPrompt = registry.dotprompt.parse(source);\n  definePromptAsync(\n    registry,\n    registryDefinitionKey(name, variant ?? void 0, ns),\n    // We use a lazy promise here because we only want prompt loaded when it's first used.\n    // This is important because otherwise the loading may happen before the user has configured\n    // all the schemas, etc., which will result in dotprompt.renderMetadata errors.\n    (0, import_async.lazy)(async () => {\n      const promptMetadata2 = await registry.dotprompt.renderMetadata(parsedPrompt);\n      if (variant) {\n        promptMetadata2.variant = variant;\n      }\n      if (promptMetadata2.output?.schema?.description === null) {\n        delete promptMetadata2.output.schema.description;\n      }\n      if (promptMetadata2.input?.schema?.description === null) {\n        delete promptMetadata2.input.schema.description;\n      }\n      return {\n        name: registryDefinitionKey(name, variant ?? void 0, ns),\n        model: promptMetadata2.model,\n        config: promptMetadata2.config,\n        tools: promptMetadata2.tools,\n        description: promptMetadata2.description,\n        output: {\n          jsonSchema: promptMetadata2.output?.schema,\n          format: promptMetadata2.output?.format\n        },\n        input: {\n          jsonSchema: promptMetadata2.input?.schema\n        },\n        metadata: {\n          ...promptMetadata2.metadata,\n          type: \"prompt\",\n          prompt: {\n            ...promptMetadata2,\n            template: parsedPrompt.template\n          }\n        },\n        maxTurns: promptMetadata2.raw?.[\"maxTurns\"],\n        toolChoice: promptMetadata2.raw?.[\"toolChoice\"],\n        returnToolRequests: promptMetadata2.raw?.[\"returnToolRequests\"],\n        messages: parsedPrompt.template\n      };\n    })\n  );\n}\nasync function prompt(registry, name, options) {\n  return await lookupPrompt(\n    registry,\n    name,\n    options?.variant\n  );\n}\nfunction registryLookupKey(name, variant, ns) {\n  return `/prompt/${registryDefinitionKey(name, variant, ns)}`;\n}\nasync function lookupPrompt(registry, name, variant) {\n  const registryPrompt = await registry.lookupAction(\n    registryLookupKey(name, variant)\n  );\n  if (registryPrompt) {\n    return registryPrompt.__executablePrompt;\n  }\n  throw new import_core.GenkitError({\n    status: \"NOT_FOUND\",\n    message: `Prompt ${name + (variant ? ` (variant ${variant})` : \"\")} not found`\n  });\n}\nfunction registryDefinitionKey(name, variant, ns) {\n  return `${ns ? `${ns}/` : \"\"}${name}${variant ? `.${variant}` : \"\"}`;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=prompt.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9wcm9tcHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLGtCQUFrQixtQkFBTyxDQUFDLHFGQUFpQjtBQUMzQyxtQkFBbUIsbUJBQU8sQ0FBQywyRkFBdUI7QUFDbEQscUJBQXFCLG1CQUFPLENBQUMsK0ZBQXlCO0FBQ3RELG9CQUFvQixtQkFBTyxDQUFDLDZGQUF3QjtBQUNwRCxxQkFBcUIsbUJBQU8sQ0FBQywrRkFBeUI7QUFDdEQsZ0JBQWdCLG1CQUFPLENBQUMsY0FBSTtBQUM1QixrQkFBa0IsbUJBQU8sQ0FBQyxrQkFBTTtBQUNoQyxzQkFBc0IsbUJBQU8sQ0FBQyxvRkFBZTtBQUM3QyxxQkFBcUIsbUJBQU8sQ0FBQyxrRkFBYztBQUMzQyxtQkFBbUIsbUJBQU8sQ0FBQyw4RUFBWTtBQUN2QyxxQkFBcUIsbUJBQU8sQ0FBQyxrRkFBYztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLGFBQWEsRUFBRSxzQkFBc0IsZ0JBQWdCLE9BQU87QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGFBQWEsRUFBRSxzQkFBc0IsZ0JBQWdCLE9BQU87QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsYUFBYSxFQUFFLHNCQUFzQixnQkFBZ0IsT0FBTztBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdGQUF3RjtBQUN4RjtBQUNBLFNBQVM7QUFDVDtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSwyQ0FBMkMsWUFBWSxVQUFVLDRDQUE0QztBQUM3RztBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixPQUFPO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGFBQWEsRUFBRSwrQ0FBK0M7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHlDQUF5QztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QiwrQkFBK0IsUUFBUSxVQUFVO0FBQ3hFLEdBQUc7QUFDSDtBQUNBO0FBQ0EsWUFBWSxRQUFRLEdBQUcsUUFBUSxFQUFFLEtBQUssRUFBRSxjQUFjLFFBQVEsT0FBTztBQUNyRTtBQUNBO0FBQ0EsTUFBTSxDQVNMO0FBQ0QiLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvc3R1ZGlvL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi9wcm9tcHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHByb21wdF9leHBvcnRzID0ge307XG5fX2V4cG9ydChwcm9tcHRfZXhwb3J0cywge1xuICBkZWZpbmVIZWxwZXI6ICgpID0+IGRlZmluZUhlbHBlcixcbiAgZGVmaW5lUGFydGlhbDogKCkgPT4gZGVmaW5lUGFydGlhbCxcbiAgZGVmaW5lUHJvbXB0OiAoKSA9PiBkZWZpbmVQcm9tcHQsXG4gIGlzRXhlY3V0YWJsZVByb21wdDogKCkgPT4gaXNFeGVjdXRhYmxlUHJvbXB0LFxuICBpc1Byb21wdEFjdGlvbjogKCkgPT4gaXNQcm9tcHRBY3Rpb24sXG4gIGxvYWRQcm9tcHRGb2xkZXI6ICgpID0+IGxvYWRQcm9tcHRGb2xkZXIsXG4gIGxvYWRQcm9tcHRGb2xkZXJSZWN1cnNpdmVseTogKCkgPT4gbG9hZFByb21wdEZvbGRlclJlY3Vyc2l2ZWx5LFxuICBwcm9tcHQ6ICgpID0+IHByb21wdFxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhwcm9tcHRfZXhwb3J0cyk7XG52YXIgaW1wb3J0X2NvcmUgPSByZXF1aXJlKFwiQGdlbmtpdC1haS9jb3JlXCIpO1xudmFyIGltcG9ydF9hc3luYyA9IHJlcXVpcmUoXCJAZ2Vua2l0LWFpL2NvcmUvYXN5bmNcIik7XG52YXIgaW1wb3J0X2xvZ2dpbmcgPSByZXF1aXJlKFwiQGdlbmtpdC1haS9jb3JlL2xvZ2dpbmdcIik7XG52YXIgaW1wb3J0X3NjaGVtYSA9IHJlcXVpcmUoXCJAZ2Vua2l0LWFpL2NvcmUvc2NoZW1hXCIpO1xudmFyIGltcG9ydF90cmFjaW5nID0gcmVxdWlyZShcIkBnZW5raXQtYWkvY29yZS90cmFjaW5nXCIpO1xudmFyIGltcG9ydF9mcyA9IHJlcXVpcmUoXCJmc1wiKTtcbnZhciBpbXBvcnRfcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xudmFyIGltcG9ydF9nZW5lcmF0ZSA9IHJlcXVpcmUoXCIuL2dlbmVyYXRlLmpzXCIpO1xudmFyIGltcG9ydF9tZXNzYWdlID0gcmVxdWlyZShcIi4vbWVzc2FnZS5qc1wiKTtcbnZhciBpbXBvcnRfbW9kZWwgPSByZXF1aXJlKFwiLi9tb2RlbC5qc1wiKTtcbnZhciBpbXBvcnRfc2Vzc2lvbiA9IHJlcXVpcmUoXCIuL3Nlc3Npb24uanNcIik7XG5mdW5jdGlvbiBpc1Byb21wdEFjdGlvbihhY3Rpb24pIHtcbiAgcmV0dXJuIGFjdGlvbi5fX2FjdGlvbi5tZXRhZGF0YT8udHlwZSA9PT0gXCJwcm9tcHRcIjtcbn1cbmZ1bmN0aW9uIGRlZmluZVByb21wdChyZWdpc3RyeSwgb3B0aW9ucykge1xuICByZXR1cm4gZGVmaW5lUHJvbXB0QXN5bmMoXG4gICAgcmVnaXN0cnksXG4gICAgYCR7b3B0aW9ucy5uYW1lfSR7b3B0aW9ucy52YXJpYW50ID8gYC4ke29wdGlvbnMudmFyaWFudH1gIDogXCJcIn1gLFxuICAgIFByb21pc2UucmVzb2x2ZShvcHRpb25zKVxuICApO1xufVxuZnVuY3Rpb24gZGVmaW5lUHJvbXB0QXN5bmMocmVnaXN0cnksIG5hbWUsIG9wdGlvbnNQcm9taXNlKSB7XG4gIGNvbnN0IHByb21wdENhY2hlID0ge307XG4gIGNvbnN0IHJlbmRlck9wdGlvbnNGbiA9IGFzeW5jIChpbnB1dCwgcmVuZGVyT3B0aW9ucykgPT4ge1xuICAgIHJldHVybiBhd2FpdCAoMCwgaW1wb3J0X3RyYWNpbmcucnVuSW5OZXdTcGFuKShcbiAgICAgIHJlZ2lzdHJ5LFxuICAgICAge1xuICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgIG5hbWU6IFwicmVuZGVyXCIsXG4gICAgICAgICAgaW5wdXRcbiAgICAgICAgfSxcbiAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgW2ltcG9ydF90cmFjaW5nLlNQQU5fVFlQRV9BVFRSXTogXCJwcm9tcHRUZW1wbGF0ZVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBhc3luYyAobWV0YWRhdGEpID0+IHtcbiAgICAgICAgY29uc3QgbWVzc2FnZXMgPSBbXTtcbiAgICAgICAgcmVuZGVyT3B0aW9ucyA9IHsgLi4ucmVuZGVyT3B0aW9ucyB9O1xuICAgICAgICBjb25zdCBzZXNzaW9uID0gKDAsIGltcG9ydF9zZXNzaW9uLmdldEN1cnJlbnRTZXNzaW9uKShyZWdpc3RyeSk7XG4gICAgICAgIGNvbnN0IHJlc29sdmVkT3B0aW9ucyA9IGF3YWl0IG9wdGlvbnNQcm9taXNlO1xuICAgICAgICBhd2FpdCByZW5kZXJTeXN0ZW1Qcm9tcHQoXG4gICAgICAgICAgcmVnaXN0cnksXG4gICAgICAgICAgc2Vzc2lvbixcbiAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICBtZXNzYWdlcyxcbiAgICAgICAgICByZXNvbHZlZE9wdGlvbnMsXG4gICAgICAgICAgcHJvbXB0Q2FjaGUsXG4gICAgICAgICAgcmVuZGVyT3B0aW9uc1xuICAgICAgICApO1xuICAgICAgICBhd2FpdCByZW5kZXJNZXNzYWdlcyhcbiAgICAgICAgICByZWdpc3RyeSxcbiAgICAgICAgICBzZXNzaW9uLFxuICAgICAgICAgIGlucHV0LFxuICAgICAgICAgIG1lc3NhZ2VzLFxuICAgICAgICAgIHJlc29sdmVkT3B0aW9ucyxcbiAgICAgICAgICByZW5kZXJPcHRpb25zLFxuICAgICAgICAgIHByb21wdENhY2hlXG4gICAgICAgICk7XG4gICAgICAgIGF3YWl0IHJlbmRlclVzZXJQcm9tcHQoXG4gICAgICAgICAgcmVnaXN0cnksXG4gICAgICAgICAgc2Vzc2lvbixcbiAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICBtZXNzYWdlcyxcbiAgICAgICAgICByZXNvbHZlZE9wdGlvbnMsXG4gICAgICAgICAgcHJvbXB0Q2FjaGUsXG4gICAgICAgICAgcmVuZGVyT3B0aW9uc1xuICAgICAgICApO1xuICAgICAgICBsZXQgZG9jcztcbiAgICAgICAgaWYgKHR5cGVvZiByZXNvbHZlZE9wdGlvbnMuZG9jcyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgZG9jcyA9IGF3YWl0IHJlc29sdmVkT3B0aW9ucy5kb2NzKGlucHV0LCB7XG4gICAgICAgICAgICBzdGF0ZTogc2Vzc2lvbj8uc3RhdGUsXG4gICAgICAgICAgICBjb250ZXh0OiByZW5kZXJPcHRpb25zPy5jb250ZXh0IHx8ICgwLCBpbXBvcnRfY29yZS5nZXRDb250ZXh0KShyZWdpc3RyeSkgfHwge31cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkb2NzID0gcmVzb2x2ZWRPcHRpb25zLmRvY3M7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3B0cyA9ICgwLCBpbXBvcnRfY29yZS5zdHJpcFVuZGVmaW5lZFByb3BzKSh7XG4gICAgICAgICAgbW9kZWw6IHJlc29sdmVkT3B0aW9ucy5tb2RlbCxcbiAgICAgICAgICBtYXhUdXJuczogcmVzb2x2ZWRPcHRpb25zLm1heFR1cm5zLFxuICAgICAgICAgIG1lc3NhZ2VzLFxuICAgICAgICAgIGRvY3MsXG4gICAgICAgICAgdG9vbHM6IHJlc29sdmVkT3B0aW9ucy50b29scyxcbiAgICAgICAgICByZXR1cm5Ub29sUmVxdWVzdHM6IHJlc29sdmVkT3B0aW9ucy5yZXR1cm5Ub29sUmVxdWVzdHMsXG4gICAgICAgICAgdG9vbENob2ljZTogcmVzb2x2ZWRPcHRpb25zLnRvb2xDaG9pY2UsXG4gICAgICAgICAgY29udGV4dDogcmVzb2x2ZWRPcHRpb25zLmNvbnRleHQsXG4gICAgICAgICAgb3V0cHV0OiByZXNvbHZlZE9wdGlvbnMub3V0cHV0LFxuICAgICAgICAgIHVzZTogcmVzb2x2ZWRPcHRpb25zLnVzZSxcbiAgICAgICAgICAuLi4oMCwgaW1wb3J0X2NvcmUuc3RyaXBVbmRlZmluZWRQcm9wcykocmVuZGVyT3B0aW9ucyksXG4gICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAuLi5yZXNvbHZlZE9wdGlvbnM/LmNvbmZpZyxcbiAgICAgICAgICAgIC4uLnJlbmRlck9wdGlvbnM/LmNvbmZpZ1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhvcHRzLmNvbmZpZykubGVuZ3RoID09PSAwICYmICFyZW5kZXJPcHRpb25zPy5jb25maWcpIHtcbiAgICAgICAgICBkZWxldGUgb3B0cy5jb25maWc7XG4gICAgICAgIH1cbiAgICAgICAgbWV0YWRhdGEub3V0cHV0ID0gb3B0cztcbiAgICAgICAgcmV0dXJuIG9wdHM7XG4gICAgICB9XG4gICAgKTtcbiAgfTtcbiAgY29uc3QgcmVuZGVyZXJBY3Rpb25Db25maWcgPSAoMCwgaW1wb3J0X2FzeW5jLmxhenkpKFxuICAgICgpID0+IG9wdGlvbnNQcm9taXNlLnRoZW4oKG9wdGlvbnMpID0+IHtcbiAgICAgIGNvbnN0IG1ldGFkYXRhID0gcHJvbXB0TWV0YWRhdGEob3B0aW9ucyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBgJHtvcHRpb25zLm5hbWV9JHtvcHRpb25zLnZhcmlhbnQgPyBgLiR7b3B0aW9ucy52YXJpYW50fWAgOiBcIlwifWAsXG4gICAgICAgIGlucHV0SnNvblNjaGVtYTogb3B0aW9ucy5pbnB1dD8uanNvblNjaGVtYSxcbiAgICAgICAgaW5wdXRTY2hlbWE6IG9wdGlvbnMuaW5wdXQ/LnNjaGVtYSxcbiAgICAgICAgZGVzY3JpcHRpb246IG9wdGlvbnMuZGVzY3JpcHRpb24sXG4gICAgICAgIGFjdGlvblR5cGU6IFwicHJvbXB0XCIsXG4gICAgICAgIG1ldGFkYXRhLFxuICAgICAgICBmbjogYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgICAgcmV0dXJuICgwLCBpbXBvcnRfZ2VuZXJhdGUudG9HZW5lcmF0ZVJlcXVlc3QpKFxuICAgICAgICAgICAgcmVnaXN0cnksXG4gICAgICAgICAgICBhd2FpdCByZW5kZXJPcHRpb25zRm4oaW5wdXQsIHZvaWQgMClcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pXG4gICk7XG4gIGNvbnN0IHJlbmRlcmVyQWN0aW9uID0gKDAsIGltcG9ydF9jb3JlLmRlZmluZUFjdGlvbkFzeW5jKShcbiAgICByZWdpc3RyeSxcbiAgICBcInByb21wdFwiLFxuICAgIG5hbWUsXG4gICAgcmVuZGVyZXJBY3Rpb25Db25maWcsXG4gICAgKGFjdGlvbikgPT4ge1xuICAgICAgYWN0aW9uLl9fZXhlY3V0YWJsZVByb21wdCA9IGV4ZWN1dGFibGVQcm9tcHQ7XG4gICAgfVxuICApO1xuICBjb25zdCBleGVjdXRhYmxlUHJvbXB0QWN0aW9uQ29uZmlnID0gKDAsIGltcG9ydF9hc3luYy5sYXp5KShcbiAgICAoKSA9PiBvcHRpb25zUHJvbWlzZS50aGVuKChvcHRpb25zKSA9PiB7XG4gICAgICBjb25zdCBtZXRhZGF0YSA9IHByb21wdE1ldGFkYXRhKG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogYCR7b3B0aW9ucy5uYW1lfSR7b3B0aW9ucy52YXJpYW50ID8gYC4ke29wdGlvbnMudmFyaWFudH1gIDogXCJcIn1gLFxuICAgICAgICBpbnB1dEpzb25TY2hlbWE6IG9wdGlvbnMuaW5wdXQ/Lmpzb25TY2hlbWEsXG4gICAgICAgIGlucHV0U2NoZW1hOiBvcHRpb25zLmlucHV0Py5zY2hlbWEsXG4gICAgICAgIG91dHB1dFNjaGVtYTogaW1wb3J0X21vZGVsLkdlbmVyYXRlQWN0aW9uT3B0aW9uc1NjaGVtYSxcbiAgICAgICAgZGVzY3JpcHRpb246IG9wdGlvbnMuZGVzY3JpcHRpb24sXG4gICAgICAgIGFjdGlvblR5cGU6IFwiZXhlY3V0YWJsZS1wcm9tcHRcIixcbiAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgIGZuOiBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgICByZXR1cm4gYXdhaXQgKDAsIGltcG9ydF9nZW5lcmF0ZS50b0dlbmVyYXRlQWN0aW9uT3B0aW9ucykoXG4gICAgICAgICAgICByZWdpc3RyeSxcbiAgICAgICAgICAgIGF3YWl0IHJlbmRlck9wdGlvbnNGbihpbnB1dCwgdm9pZCAwKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSlcbiAgKTtcbiAgKDAsIGltcG9ydF9jb3JlLmRlZmluZUFjdGlvbkFzeW5jKShcbiAgICByZWdpc3RyeSxcbiAgICBcImV4ZWN1dGFibGUtcHJvbXB0XCIsXG4gICAgbmFtZSxcbiAgICBleGVjdXRhYmxlUHJvbXB0QWN0aW9uQ29uZmlnLFxuICAgIChhY3Rpb24pID0+IHtcbiAgICAgIGFjdGlvbi5fX2V4ZWN1dGFibGVQcm9tcHQgPSBleGVjdXRhYmxlUHJvbXB0O1xuICAgIH1cbiAgKTtcbiAgY29uc3QgZXhlY3V0YWJsZVByb21wdCA9IHdyYXBJbkV4ZWN1dGFibGVQcm9tcHQoXG4gICAgcmVnaXN0cnksXG4gICAgcmVuZGVyT3B0aW9uc0ZuLFxuICAgIHJlbmRlcmVyQWN0aW9uXG4gICk7XG4gIHJldHVybiBleGVjdXRhYmxlUHJvbXB0O1xufVxuZnVuY3Rpb24gcHJvbXB0TWV0YWRhdGEob3B0aW9ucykge1xuICBjb25zdCBtZXRhZGF0YSA9IHtcbiAgICAuLi5vcHRpb25zLm1ldGFkYXRhLFxuICAgIHByb21wdDoge1xuICAgICAgLi4ub3B0aW9ucy5tZXRhZGF0YT8ucHJvbXB0LFxuICAgICAgY29uZmlnOiBvcHRpb25zLmNvbmZpZyxcbiAgICAgIGlucHV0OiB7XG4gICAgICAgIHNjaGVtYTogb3B0aW9ucy5pbnB1dCA/ICgwLCBpbXBvcnRfc2NoZW1hLnRvSnNvblNjaGVtYSkob3B0aW9ucy5pbnB1dCkgOiB2b2lkIDBcbiAgICAgIH0sXG4gICAgICBuYW1lOiBvcHRpb25zLm5hbWUuaW5jbHVkZXMoXCIuXCIpID8gb3B0aW9ucy5uYW1lLnNwbGl0KFwiLlwiKVswXSA6IG9wdGlvbnMubmFtZSxcbiAgICAgIG1vZGVsOiBtb2RlbE5hbWUob3B0aW9ucy5tb2RlbClcbiAgICB9LFxuICAgIHR5cGU6IFwicHJvbXB0XCJcbiAgfTtcbiAgaWYgKG9wdGlvbnMudmFyaWFudCkge1xuICAgIG1ldGFkYXRhLnByb21wdC52YXJpYW50ID0gb3B0aW9ucy52YXJpYW50O1xuICB9XG4gIHJldHVybiBtZXRhZGF0YTtcbn1cbmZ1bmN0aW9uIHdyYXBJbkV4ZWN1dGFibGVQcm9tcHQocmVnaXN0cnksIHJlbmRlck9wdGlvbnNGbiwgcmVuZGVyZXJBY3Rpb24pIHtcbiAgY29uc3QgZXhlY3V0YWJsZVByb21wdCA9IGFzeW5jIChpbnB1dCwgb3B0cykgPT4ge1xuICAgIHJldHVybiBhd2FpdCAoMCwgaW1wb3J0X3RyYWNpbmcucnVuSW5OZXdTcGFuKShcbiAgICAgIHJlZ2lzdHJ5LFxuICAgICAge1xuICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgIG5hbWU6IChhd2FpdCByZW5kZXJlckFjdGlvbikuX19hY3Rpb24ubmFtZSxcbiAgICAgICAgICBpbnB1dFxuICAgICAgICB9LFxuICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICBbaW1wb3J0X3RyYWNpbmcuU1BBTl9UWVBFX0FUVFJdOiBcImRvdHByb21wdFwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBhc3luYyAobWV0YWRhdGEpID0+IHtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgKDAsIGltcG9ydF9nZW5lcmF0ZS5nZW5lcmF0ZSkocmVnaXN0cnksIHtcbiAgICAgICAgICAuLi5hd2FpdCByZW5kZXJPcHRpb25zRm4oaW5wdXQsIG9wdHMpXG4gICAgICAgIH0pO1xuICAgICAgICBtZXRhZGF0YS5vdXRwdXQgPSBvdXRwdXQ7XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICB9XG4gICAgKTtcbiAgfTtcbiAgZXhlY3V0YWJsZVByb21wdC5yZW5kZXIgPSBhc3luYyAoaW5wdXQsIG9wdHMpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uYXdhaXQgcmVuZGVyT3B0aW9uc0ZuKGlucHV0LCBvcHRzKVxuICAgIH07XG4gIH07XG4gIGV4ZWN1dGFibGVQcm9tcHQuc3RyZWFtID0gKGlucHV0LCBvcHRzKSA9PiB7XG4gICAgcmV0dXJuICgwLCBpbXBvcnRfZ2VuZXJhdGUuZ2VuZXJhdGVTdHJlYW0pKHJlZ2lzdHJ5LCByZW5kZXJPcHRpb25zRm4oaW5wdXQsIG9wdHMpKTtcbiAgfTtcbiAgZXhlY3V0YWJsZVByb21wdC5hc1Rvb2wgPSBhc3luYyAoKSA9PiB7XG4gICAgcmV0dXJuIGF3YWl0IHJlbmRlcmVyQWN0aW9uO1xuICB9O1xuICByZXR1cm4gZXhlY3V0YWJsZVByb21wdDtcbn1cbmFzeW5jIGZ1bmN0aW9uIHJlbmRlclN5c3RlbVByb21wdChyZWdpc3RyeSwgc2Vzc2lvbiwgaW5wdXQsIG1lc3NhZ2VzLCBvcHRpb25zLCBwcm9tcHRDYWNoZSwgcmVuZGVyT3B0aW9ucykge1xuICBpZiAodHlwZW9mIG9wdGlvbnMuc3lzdGVtID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBtZXNzYWdlcy5wdXNoKHtcbiAgICAgIHJvbGU6IFwic3lzdGVtXCIsXG4gICAgICBjb250ZW50OiBub3JtYWxpemVQYXJ0cyhcbiAgICAgICAgYXdhaXQgb3B0aW9ucy5zeXN0ZW0oaW5wdXQsIHtcbiAgICAgICAgICBzdGF0ZTogc2Vzc2lvbj8uc3RhdGUsXG4gICAgICAgICAgY29udGV4dDogcmVuZGVyT3B0aW9ucz8uY29udGV4dCB8fCAoMCwgaW1wb3J0X2NvcmUuZ2V0Q29udGV4dCkocmVnaXN0cnkpIHx8IHt9XG4gICAgICAgIH0pXG4gICAgICApXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuc3lzdGVtID09PSBcInN0cmluZ1wiKSB7XG4gICAgaWYgKCFwcm9tcHRDYWNoZS5zeXN0ZW0pIHtcbiAgICAgIHByb21wdENhY2hlLnN5c3RlbSA9IGF3YWl0IHJlZ2lzdHJ5LmRvdHByb21wdC5jb21waWxlKG9wdGlvbnMuc3lzdGVtKTtcbiAgICB9XG4gICAgbWVzc2FnZXMucHVzaCh7XG4gICAgICByb2xlOiBcInN5c3RlbVwiLFxuICAgICAgY29udGVudDogYXdhaXQgcmVuZGVyRG90cHJvbXB0VG9QYXJ0cyhcbiAgICAgICAgcmVnaXN0cnksXG4gICAgICAgIHByb21wdENhY2hlLnN5c3RlbSxcbiAgICAgICAgaW5wdXQsXG4gICAgICAgIHNlc3Npb24sXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICAgIHJlbmRlck9wdGlvbnNcbiAgICAgIClcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChvcHRpb25zLnN5c3RlbSkge1xuICAgIG1lc3NhZ2VzLnB1c2goe1xuICAgICAgcm9sZTogXCJzeXN0ZW1cIixcbiAgICAgIGNvbnRlbnQ6IG5vcm1hbGl6ZVBhcnRzKG9wdGlvbnMuc3lzdGVtKVxuICAgIH0pO1xuICB9XG59XG5hc3luYyBmdW5jdGlvbiByZW5kZXJNZXNzYWdlcyhyZWdpc3RyeSwgc2Vzc2lvbiwgaW5wdXQsIG1lc3NhZ2VzLCBvcHRpb25zLCByZW5kZXJPcHRpb25zLCBwcm9tcHRDYWNoZSkge1xuICBpZiAob3B0aW9ucy5tZXNzYWdlcykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5tZXNzYWdlcyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBtZXNzYWdlcy5wdXNoKFxuICAgICAgICAuLi5hd2FpdCBvcHRpb25zLm1lc3NhZ2VzKGlucHV0LCB7XG4gICAgICAgICAgc3RhdGU6IHNlc3Npb24/LnN0YXRlLFxuICAgICAgICAgIGNvbnRleHQ6IHJlbmRlck9wdGlvbnM/LmNvbnRleHQgfHwgKDAsIGltcG9ydF9jb3JlLmdldENvbnRleHQpKHJlZ2lzdHJ5KSB8fCB7fSxcbiAgICAgICAgICBoaXN0b3J5OiByZW5kZXJPcHRpb25zPy5tZXNzYWdlc1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLm1lc3NhZ2VzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBpZiAoIXByb21wdENhY2hlLm1lc3NhZ2VzKSB7XG4gICAgICAgIHByb21wdENhY2hlLm1lc3NhZ2VzID0gYXdhaXQgcmVnaXN0cnkuZG90cHJvbXB0LmNvbXBpbGUoXG4gICAgICAgICAgb3B0aW9ucy5tZXNzYWdlc1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVuZGVyZWQgPSBhd2FpdCBwcm9tcHRDYWNoZS5tZXNzYWdlcyh7XG4gICAgICAgIGlucHV0LFxuICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgLi4ucmVuZGVyT3B0aW9ucz8uY29udGV4dCB8fCAoMCwgaW1wb3J0X2NvcmUuZ2V0Q29udGV4dCkocmVnaXN0cnkpLFxuICAgICAgICAgIHN0YXRlOiBzZXNzaW9uPy5zdGF0ZVxuICAgICAgICB9LFxuICAgICAgICBtZXNzYWdlczogcmVuZGVyT3B0aW9ucz8ubWVzc2FnZXM/Lm1hcChcbiAgICAgICAgICAobSkgPT4gaW1wb3J0X21lc3NhZ2UuTWVzc2FnZS5wYXJzZURhdGEobSlcbiAgICAgICAgKVxuICAgICAgfSk7XG4gICAgICBtZXNzYWdlcy5wdXNoKC4uLnJlbmRlcmVkLm1lc3NhZ2VzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWVzc2FnZXMucHVzaCguLi5vcHRpb25zLm1lc3NhZ2VzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHJlbmRlck9wdGlvbnMubWVzc2FnZXMpIHtcbiAgICAgIG1lc3NhZ2VzLnB1c2goLi4ucmVuZGVyT3B0aW9ucy5tZXNzYWdlcyk7XG4gICAgfVxuICB9XG4gIGlmIChyZW5kZXJPcHRpb25zPy5tZXNzYWdlcykge1xuICAgIGRlbGV0ZSByZW5kZXJPcHRpb25zLm1lc3NhZ2VzO1xuICB9XG59XG5hc3luYyBmdW5jdGlvbiByZW5kZXJVc2VyUHJvbXB0KHJlZ2lzdHJ5LCBzZXNzaW9uLCBpbnB1dCwgbWVzc2FnZXMsIG9wdGlvbnMsIHByb21wdENhY2hlLCByZW5kZXJPcHRpb25zKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5wcm9tcHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIG1lc3NhZ2VzLnB1c2goe1xuICAgICAgcm9sZTogXCJ1c2VyXCIsXG4gICAgICBjb250ZW50OiBub3JtYWxpemVQYXJ0cyhcbiAgICAgICAgYXdhaXQgb3B0aW9ucy5wcm9tcHQoaW5wdXQsIHtcbiAgICAgICAgICBzdGF0ZTogc2Vzc2lvbj8uc3RhdGUsXG4gICAgICAgICAgY29udGV4dDogcmVuZGVyT3B0aW9ucz8uY29udGV4dCB8fCAoMCwgaW1wb3J0X2NvcmUuZ2V0Q29udGV4dCkocmVnaXN0cnkpIHx8IHt9XG4gICAgICAgIH0pXG4gICAgICApXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMucHJvbXB0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgaWYgKCFwcm9tcHRDYWNoZS51c2VyUHJvbXB0KSB7XG4gICAgICBwcm9tcHRDYWNoZS51c2VyUHJvbXB0ID0gYXdhaXQgcmVnaXN0cnkuZG90cHJvbXB0LmNvbXBpbGUob3B0aW9ucy5wcm9tcHQpO1xuICAgIH1cbiAgICBtZXNzYWdlcy5wdXNoKHtcbiAgICAgIHJvbGU6IFwidXNlclwiLFxuICAgICAgY29udGVudDogYXdhaXQgcmVuZGVyRG90cHJvbXB0VG9QYXJ0cyhcbiAgICAgICAgcmVnaXN0cnksXG4gICAgICAgIHByb21wdENhY2hlLnVzZXJQcm9tcHQsXG4gICAgICAgIGlucHV0LFxuICAgICAgICBzZXNzaW9uLFxuICAgICAgICBvcHRpb25zLFxuICAgICAgICByZW5kZXJPcHRpb25zXG4gICAgICApXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5wcm9tcHQpIHtcbiAgICBtZXNzYWdlcy5wdXNoKHtcbiAgICAgIHJvbGU6IFwidXNlclwiLFxuICAgICAgY29udGVudDogbm9ybWFsaXplUGFydHMob3B0aW9ucy5wcm9tcHQpXG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIG1vZGVsTmFtZShtb2RlbEFyZykge1xuICBpZiAobW9kZWxBcmcgPT09IHZvaWQgMCkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgaWYgKHR5cGVvZiBtb2RlbEFyZyA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBtb2RlbEFyZztcbiAgfVxuICBpZiAobW9kZWxBcmcubmFtZSkge1xuICAgIHJldHVybiBtb2RlbEFyZy5uYW1lO1xuICB9XG4gIHJldHVybiBtb2RlbEFyZy5fX2FjdGlvbi5uYW1lO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplUGFydHMocGFydHMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocGFydHMpKSByZXR1cm4gcGFydHM7XG4gIGlmICh0eXBlb2YgcGFydHMgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gW1xuICAgICAge1xuICAgICAgICB0ZXh0OiBwYXJ0c1xuICAgICAgfVxuICAgIF07XG4gIH1cbiAgcmV0dXJuIFtwYXJ0c107XG59XG5hc3luYyBmdW5jdGlvbiByZW5kZXJEb3Rwcm9tcHRUb1BhcnRzKHJlZ2lzdHJ5LCBwcm9tcHRGbiwgaW5wdXQsIHNlc3Npb24sIG9wdGlvbnMsIHJlbmRlck9wdGlvbnMpIHtcbiAgY29uc3QgcmVuZGVycmVkID0gYXdhaXQgcHJvbXB0Rm4oe1xuICAgIGlucHV0LFxuICAgIGNvbnRleHQ6IHtcbiAgICAgIC4uLnJlbmRlck9wdGlvbnM/LmNvbnRleHQgfHwgKDAsIGltcG9ydF9jb3JlLmdldENvbnRleHQpKHJlZ2lzdHJ5KSxcbiAgICAgIHN0YXRlOiBzZXNzaW9uPy5zdGF0ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChyZW5kZXJyZWQubWVzc2FnZXMubGVuZ3RoICE9PSAxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwicGFydHMgdGVtcGF0ZSBtdXN0IHByb2R1Y2Ugb25seSBvbmUgbWVzc2FnZVwiKTtcbiAgfVxuICByZXR1cm4gcmVuZGVycmVkLm1lc3NhZ2VzWzBdLmNvbnRlbnQ7XG59XG5mdW5jdGlvbiBpc0V4ZWN1dGFibGVQcm9tcHQob2JqKSB7XG4gIHJldHVybiAhIW9iaj8ucmVuZGVyICYmICEhb2JqPy5hc1Rvb2wgJiYgISFvYmo/LnN0cmVhbTtcbn1cbmZ1bmN0aW9uIGxvYWRQcm9tcHRGb2xkZXIocmVnaXN0cnksIGRpciA9IFwiLi9wcm9tcHRzXCIsIG5zKSB7XG4gIGNvbnN0IHByb21wdHNQYXRoID0gKDAsIGltcG9ydF9wYXRoLnJlc29sdmUpKGRpcik7XG4gIGlmICgoMCwgaW1wb3J0X2ZzLmV4aXN0c1N5bmMpKHByb21wdHNQYXRoKSkge1xuICAgIGxvYWRQcm9tcHRGb2xkZXJSZWN1cnNpdmVseShyZWdpc3RyeSwgZGlyLCBucywgXCJcIik7XG4gIH1cbn1cbmZ1bmN0aW9uIGxvYWRQcm9tcHRGb2xkZXJSZWN1cnNpdmVseShyZWdpc3RyeSwgZGlyLCBucywgc3ViRGlyKSB7XG4gIGNvbnN0IHByb21wdHNQYXRoID0gKDAsIGltcG9ydF9wYXRoLnJlc29sdmUpKGRpcik7XG4gIGNvbnN0IGRpckVudHMgPSAoMCwgaW1wb3J0X2ZzLnJlYWRkaXJTeW5jKSgoMCwgaW1wb3J0X3BhdGguam9pbikocHJvbXB0c1BhdGgsIHN1YkRpciksIHtcbiAgICB3aXRoRmlsZVR5cGVzOiB0cnVlXG4gIH0pO1xuICBmb3IgKGNvbnN0IGRpckVudCBvZiBkaXJFbnRzKSB7XG4gICAgY29uc3QgcGFyZW50UGF0aCA9ICgwLCBpbXBvcnRfcGF0aC5qb2luKShwcm9tcHRzUGF0aCwgc3ViRGlyKTtcbiAgICBjb25zdCBmaWxlTmFtZSA9IGRpckVudC5uYW1lO1xuICAgIGlmIChkaXJFbnQuaXNGaWxlKCkgJiYgZmlsZU5hbWUuZW5kc1dpdGgoXCIucHJvbXB0XCIpKSB7XG4gICAgICBpZiAoZmlsZU5hbWUuc3RhcnRzV2l0aChcIl9cIikpIHtcbiAgICAgICAgY29uc3QgcGFydGlhbE5hbWUgPSBmaWxlTmFtZS5zdWJzdHJpbmcoMSwgZmlsZU5hbWUubGVuZ3RoIC0gNyk7XG4gICAgICAgIGRlZmluZVBhcnRpYWwoXG4gICAgICAgICAgcmVnaXN0cnksXG4gICAgICAgICAgcGFydGlhbE5hbWUsXG4gICAgICAgICAgKDAsIGltcG9ydF9mcy5yZWFkRmlsZVN5bmMpKCgwLCBpbXBvcnRfcGF0aC5qb2luKShwYXJlbnRQYXRoLCBmaWxlTmFtZSksIHtcbiAgICAgICAgICAgIGVuY29kaW5nOiBcInV0ZjhcIlxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICAgIGltcG9ydF9sb2dnaW5nLmxvZ2dlci5kZWJ1ZyhcbiAgICAgICAgICBgUmVnaXN0ZXJlZCBEb3Rwcm9tcHQgcGFydGlhbCBcIiR7cGFydGlhbE5hbWV9XCIgZnJvbSBcIiR7KDAsIGltcG9ydF9wYXRoLmpvaW4pKHBhcmVudFBhdGgsIGZpbGVOYW1lKX1cImBcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvYWRQcm9tcHQoXG4gICAgICAgICAgcmVnaXN0cnksXG4gICAgICAgICAgcHJvbXB0c1BhdGgsXG4gICAgICAgICAgZmlsZU5hbWUsXG4gICAgICAgICAgc3ViRGlyID8gYCR7c3ViRGlyfS9gIDogXCJcIixcbiAgICAgICAgICBuc1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZGlyRW50LmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgIGxvYWRQcm9tcHRGb2xkZXJSZWN1cnNpdmVseShyZWdpc3RyeSwgZGlyLCBucywgKDAsIGltcG9ydF9wYXRoLmpvaW4pKHN1YkRpciwgZmlsZU5hbWUpKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGRlZmluZVBhcnRpYWwocmVnaXN0cnksIG5hbWUsIHNvdXJjZSkge1xuICByZWdpc3RyeS5kb3Rwcm9tcHQuZGVmaW5lUGFydGlhbChuYW1lLCBzb3VyY2UpO1xufVxuZnVuY3Rpb24gZGVmaW5lSGVscGVyKHJlZ2lzdHJ5LCBuYW1lLCBmbikge1xuICByZWdpc3RyeS5kb3Rwcm9tcHQuZGVmaW5lSGVscGVyKG5hbWUsIGZuKTtcbn1cbmZ1bmN0aW9uIGxvYWRQcm9tcHQocmVnaXN0cnksIHBhdGgsIGZpbGVuYW1lLCBwcmVmaXggPSBcIlwiLCBucyA9IFwiZG90cHJvbXB0XCIpIHtcbiAgbGV0IG5hbWUgPSBgJHtwcmVmaXggPz8gXCJcIn0keygwLCBpbXBvcnRfcGF0aC5iYXNlbmFtZSkoZmlsZW5hbWUsIFwiLnByb21wdFwiKX1gO1xuICBsZXQgdmFyaWFudCA9IG51bGw7XG4gIGlmIChuYW1lLmluY2x1ZGVzKFwiLlwiKSkge1xuICAgIGNvbnN0IHBhcnRzID0gbmFtZS5zcGxpdChcIi5cIik7XG4gICAgbmFtZSA9IHBhcnRzWzBdO1xuICAgIHZhcmlhbnQgPSBwYXJ0c1sxXTtcbiAgfVxuICBjb25zdCBzb3VyY2UgPSAoMCwgaW1wb3J0X2ZzLnJlYWRGaWxlU3luYykoKDAsIGltcG9ydF9wYXRoLmpvaW4pKHBhdGgsIHByZWZpeCA/PyBcIlwiLCBmaWxlbmFtZSksIFwidXRmOFwiKTtcbiAgY29uc3QgcGFyc2VkUHJvbXB0ID0gcmVnaXN0cnkuZG90cHJvbXB0LnBhcnNlKHNvdXJjZSk7XG4gIGRlZmluZVByb21wdEFzeW5jKFxuICAgIHJlZ2lzdHJ5LFxuICAgIHJlZ2lzdHJ5RGVmaW5pdGlvbktleShuYW1lLCB2YXJpYW50ID8/IHZvaWQgMCwgbnMpLFxuICAgIC8vIFdlIHVzZSBhIGxhenkgcHJvbWlzZSBoZXJlIGJlY2F1c2Ugd2Ugb25seSB3YW50IHByb21wdCBsb2FkZWQgd2hlbiBpdCdzIGZpcnN0IHVzZWQuXG4gICAgLy8gVGhpcyBpcyBpbXBvcnRhbnQgYmVjYXVzZSBvdGhlcndpc2UgdGhlIGxvYWRpbmcgbWF5IGhhcHBlbiBiZWZvcmUgdGhlIHVzZXIgaGFzIGNvbmZpZ3VyZWRcbiAgICAvLyBhbGwgdGhlIHNjaGVtYXMsIGV0Yy4sIHdoaWNoIHdpbGwgcmVzdWx0IGluIGRvdHByb21wdC5yZW5kZXJNZXRhZGF0YSBlcnJvcnMuXG4gICAgKDAsIGltcG9ydF9hc3luYy5sYXp5KShhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9tcHRNZXRhZGF0YTIgPSBhd2FpdCByZWdpc3RyeS5kb3Rwcm9tcHQucmVuZGVyTWV0YWRhdGEocGFyc2VkUHJvbXB0KTtcbiAgICAgIGlmICh2YXJpYW50KSB7XG4gICAgICAgIHByb21wdE1ldGFkYXRhMi52YXJpYW50ID0gdmFyaWFudDtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9tcHRNZXRhZGF0YTIub3V0cHV0Py5zY2hlbWE/LmRlc2NyaXB0aW9uID09PSBudWxsKSB7XG4gICAgICAgIGRlbGV0ZSBwcm9tcHRNZXRhZGF0YTIub3V0cHV0LnNjaGVtYS5kZXNjcmlwdGlvbjtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9tcHRNZXRhZGF0YTIuaW5wdXQ/LnNjaGVtYT8uZGVzY3JpcHRpb24gPT09IG51bGwpIHtcbiAgICAgICAgZGVsZXRlIHByb21wdE1ldGFkYXRhMi5pbnB1dC5zY2hlbWEuZGVzY3JpcHRpb247XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiByZWdpc3RyeURlZmluaXRpb25LZXkobmFtZSwgdmFyaWFudCA/PyB2b2lkIDAsIG5zKSxcbiAgICAgICAgbW9kZWw6IHByb21wdE1ldGFkYXRhMi5tb2RlbCxcbiAgICAgICAgY29uZmlnOiBwcm9tcHRNZXRhZGF0YTIuY29uZmlnLFxuICAgICAgICB0b29sczogcHJvbXB0TWV0YWRhdGEyLnRvb2xzLFxuICAgICAgICBkZXNjcmlwdGlvbjogcHJvbXB0TWV0YWRhdGEyLmRlc2NyaXB0aW9uLFxuICAgICAgICBvdXRwdXQ6IHtcbiAgICAgICAgICBqc29uU2NoZW1hOiBwcm9tcHRNZXRhZGF0YTIub3V0cHV0Py5zY2hlbWEsXG4gICAgICAgICAgZm9ybWF0OiBwcm9tcHRNZXRhZGF0YTIub3V0cHV0Py5mb3JtYXRcbiAgICAgICAgfSxcbiAgICAgICAgaW5wdXQ6IHtcbiAgICAgICAgICBqc29uU2NoZW1hOiBwcm9tcHRNZXRhZGF0YTIuaW5wdXQ/LnNjaGVtYVxuICAgICAgICB9LFxuICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgIC4uLnByb21wdE1ldGFkYXRhMi5tZXRhZGF0YSxcbiAgICAgICAgICB0eXBlOiBcInByb21wdFwiLFxuICAgICAgICAgIHByb21wdDoge1xuICAgICAgICAgICAgLi4ucHJvbXB0TWV0YWRhdGEyLFxuICAgICAgICAgICAgdGVtcGxhdGU6IHBhcnNlZFByb21wdC50ZW1wbGF0ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWF4VHVybnM6IHByb21wdE1ldGFkYXRhMi5yYXc/LltcIm1heFR1cm5zXCJdLFxuICAgICAgICB0b29sQ2hvaWNlOiBwcm9tcHRNZXRhZGF0YTIucmF3Py5bXCJ0b29sQ2hvaWNlXCJdLFxuICAgICAgICByZXR1cm5Ub29sUmVxdWVzdHM6IHByb21wdE1ldGFkYXRhMi5yYXc/LltcInJldHVyblRvb2xSZXF1ZXN0c1wiXSxcbiAgICAgICAgbWVzc2FnZXM6IHBhcnNlZFByb21wdC50ZW1wbGF0ZVxuICAgICAgfTtcbiAgICB9KVxuICApO1xufVxuYXN5bmMgZnVuY3Rpb24gcHJvbXB0KHJlZ2lzdHJ5LCBuYW1lLCBvcHRpb25zKSB7XG4gIHJldHVybiBhd2FpdCBsb29rdXBQcm9tcHQoXG4gICAgcmVnaXN0cnksXG4gICAgbmFtZSxcbiAgICBvcHRpb25zPy52YXJpYW50XG4gICk7XG59XG5mdW5jdGlvbiByZWdpc3RyeUxvb2t1cEtleShuYW1lLCB2YXJpYW50LCBucykge1xuICByZXR1cm4gYC9wcm9tcHQvJHtyZWdpc3RyeURlZmluaXRpb25LZXkobmFtZSwgdmFyaWFudCwgbnMpfWA7XG59XG5hc3luYyBmdW5jdGlvbiBsb29rdXBQcm9tcHQocmVnaXN0cnksIG5hbWUsIHZhcmlhbnQpIHtcbiAgY29uc3QgcmVnaXN0cnlQcm9tcHQgPSBhd2FpdCByZWdpc3RyeS5sb29rdXBBY3Rpb24oXG4gICAgcmVnaXN0cnlMb29rdXBLZXkobmFtZSwgdmFyaWFudClcbiAgKTtcbiAgaWYgKHJlZ2lzdHJ5UHJvbXB0KSB7XG4gICAgcmV0dXJuIHJlZ2lzdHJ5UHJvbXB0Ll9fZXhlY3V0YWJsZVByb21wdDtcbiAgfVxuICB0aHJvdyBuZXcgaW1wb3J0X2NvcmUuR2Vua2l0RXJyb3Ioe1xuICAgIHN0YXR1czogXCJOT1RfRk9VTkRcIixcbiAgICBtZXNzYWdlOiBgUHJvbXB0ICR7bmFtZSArICh2YXJpYW50ID8gYCAodmFyaWFudCAke3ZhcmlhbnR9KWAgOiBcIlwiKX0gbm90IGZvdW5kYFxuICB9KTtcbn1cbmZ1bmN0aW9uIHJlZ2lzdHJ5RGVmaW5pdGlvbktleShuYW1lLCB2YXJpYW50LCBucykge1xuICByZXR1cm4gYCR7bnMgPyBgJHtuc30vYCA6IFwiXCJ9JHtuYW1lfSR7dmFyaWFudCA/IGAuJHt2YXJpYW50fWAgOiBcIlwifWA7XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVmaW5lSGVscGVyLFxuICBkZWZpbmVQYXJ0aWFsLFxuICBkZWZpbmVQcm9tcHQsXG4gIGlzRXhlY3V0YWJsZVByb21wdCxcbiAgaXNQcm9tcHRBY3Rpb24sXG4gIGxvYWRQcm9tcHRGb2xkZXIsXG4gIGxvYWRQcm9tcHRGb2xkZXJSZWN1cnNpdmVseSxcbiAgcHJvbXB0XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb21wdC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/prompt.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/reranker.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/reranker.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar reranker_exports = {};\n__export(reranker_exports, {\n  CommonRerankerOptionsSchema: () => CommonRerankerOptionsSchema,\n  RankedDocument: () => RankedDocument,\n  RankedDocumentDataSchema: () => RankedDocumentDataSchema,\n  RankedDocumentMetadataSchema: () => RankedDocumentMetadataSchema,\n  RerankerInfoSchema: () => RerankerInfoSchema,\n  defineReranker: () => defineReranker,\n  rerank: () => rerank,\n  rerankerRef: () => rerankerRef\n});\nmodule.exports = __toCommonJS(reranker_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_retriever = __webpack_require__(/*! ./retriever.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/retriever.js\");\nconst RankedDocumentMetadataSchema = import_core.z.object({\n  score: import_core.z.number()\n  // Enforces that 'score' must be a number\n}).passthrough();\nconst RankedDocumentDataSchema = import_core.z.object({\n  content: import_core.z.array(import_document.PartSchema),\n  metadata: RankedDocumentMetadataSchema\n});\nclass RankedDocument extends import_retriever.Document {\n  content;\n  metadata;\n  constructor(data) {\n    super(data);\n    this.content = data.content;\n    this.metadata = data.metadata;\n  }\n  /**\n   * Returns the score of the document.\n   * @returns The score of the document.\n   */\n  score() {\n    return this.metadata.score;\n  }\n}\nconst RerankerRequestSchema = import_core.z.object({\n  query: import_retriever.DocumentDataSchema,\n  documents: import_core.z.array(import_retriever.DocumentDataSchema),\n  options: import_core.z.any().optional()\n});\nconst RerankerResponseSchema = import_core.z.object({\n  documents: import_core.z.array(RankedDocumentDataSchema)\n});\nconst RerankerInfoSchema = import_core.z.object({\n  label: import_core.z.string().optional(),\n  /** Supported model capabilities. */\n  supports: import_core.z.object({\n    /** Model can process media as part of the prompt (multimodal input). */\n    media: import_core.z.boolean().optional()\n  }).optional()\n});\nfunction rerankerWithMetadata(reranker, configSchema) {\n  const withMeta = reranker;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nfunction defineReranker(registry, options, runner) {\n  const reranker = (0, import_core.defineAction)(\n    registry,\n    {\n      actionType: \"reranker\",\n      name: options.name,\n      inputSchema: options.configSchema ? RerankerRequestSchema.extend({\n        options: options.configSchema.optional()\n      }) : RerankerRequestSchema,\n      outputSchema: RerankerResponseSchema,\n      metadata: {\n        type: \"reranker\",\n        info: options.info,\n        reranker: {\n          customOptions: options.configSchema ? (0, import_schema.toJsonSchema)({ schema: options.configSchema }) : void 0\n        }\n      }\n    },\n    (i) => runner(\n      new import_retriever.Document(i.query),\n      i.documents.map((d) => new import_retriever.Document(d)),\n      i.options\n    )\n  );\n  const rwm = rerankerWithMetadata(\n    reranker,\n    options.configSchema\n  );\n  return rwm;\n}\nasync function rerank(registry, params) {\n  let reranker;\n  if (typeof params.reranker === \"string\") {\n    reranker = await registry.lookupAction(`/reranker/${params.reranker}`);\n  } else if (Object.hasOwnProperty.call(params.reranker, \"info\")) {\n    reranker = await registry.lookupAction(`/reranker/${params.reranker.name}`);\n  } else {\n    reranker = params.reranker;\n  }\n  if (!reranker) {\n    throw new Error(\"Unable to resolve the reranker\");\n  }\n  const response = await reranker({\n    query: typeof params.query === \"string\" ? import_retriever.Document.fromText(params.query) : params.query,\n    documents: params.documents,\n    options: params.options\n  });\n  return response.documents.map((d) => new RankedDocument(d));\n}\nconst CommonRerankerOptionsSchema = import_core.z.object({\n  k: import_core.z.number().describe(\"Number of documents to rerank\").optional()\n});\nfunction rerankerRef(options) {\n  return { ...options };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=reranker.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/reranker.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/retriever.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/retriever.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar retriever_exports = {};\n__export(retriever_exports, {\n  CommonRetrieverOptionsSchema: () => CommonRetrieverOptionsSchema,\n  Document: () => import_document2.Document,\n  DocumentDataSchema: () => import_document2.DocumentDataSchema,\n  IndexerInfoSchema: () => IndexerInfoSchema,\n  RetrieverInfoSchema: () => RetrieverInfoSchema,\n  defineIndexer: () => defineIndexer,\n  defineRetriever: () => defineRetriever,\n  defineSimpleRetriever: () => defineSimpleRetriever,\n  index: () => index,\n  indexerRef: () => indexerRef,\n  retrieve: () => retrieve,\n  retrieverRef: () => retrieverRef\n});\nmodule.exports = __toCommonJS(retriever_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_document = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nvar import_document2 = __webpack_require__(/*! ./document.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/document.js\");\nconst RetrieverRequestSchema = import_core.z.object({\n  query: import_document.DocumentDataSchema,\n  options: import_core.z.any().optional()\n});\nconst RetrieverResponseSchema = import_core.z.object({\n  documents: import_core.z.array(import_document.DocumentDataSchema)\n  // TODO: stats, etc.\n});\nconst IndexerRequestSchema = import_core.z.object({\n  documents: import_core.z.array(import_document.DocumentDataSchema),\n  options: import_core.z.any().optional()\n});\nconst RetrieverInfoSchema = import_core.z.object({\n  label: import_core.z.string().optional(),\n  /** Supported model capabilities. */\n  supports: import_core.z.object({\n    /** Model can process media as part of the prompt (multimodal input). */\n    media: import_core.z.boolean().optional()\n  }).optional()\n});\nfunction retrieverWithMetadata(retriever, configSchema) {\n  const withMeta = retriever;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nfunction indexerWithMetadata(indexer, configSchema) {\n  const withMeta = indexer;\n  withMeta.__configSchema = configSchema;\n  return withMeta;\n}\nfunction defineRetriever(registry, options, runner) {\n  const retriever = (0, import_core.defineAction)(\n    registry,\n    {\n      actionType: \"retriever\",\n      name: options.name,\n      inputSchema: options.configSchema ? RetrieverRequestSchema.extend({\n        options: options.configSchema.optional()\n      }) : RetrieverRequestSchema,\n      outputSchema: RetrieverResponseSchema,\n      metadata: {\n        type: \"retriever\",\n        info: options.info,\n        retriever: {\n          customOptions: options.configSchema ? (0, import_schema.toJsonSchema)({ schema: options.configSchema }) : void 0\n        }\n      }\n    },\n    (i) => runner(new import_document.Document(i.query), i.options)\n  );\n  const rwm = retrieverWithMetadata(\n    retriever,\n    options.configSchema\n  );\n  return rwm;\n}\nfunction defineIndexer(registry, options, runner) {\n  const indexer = (0, import_core.defineAction)(\n    registry,\n    {\n      actionType: \"indexer\",\n      name: options.name,\n      inputSchema: options.configSchema ? IndexerRequestSchema.extend({\n        options: options.configSchema.optional()\n      }) : IndexerRequestSchema,\n      outputSchema: import_core.z.void(),\n      metadata: {\n        type: \"indexer\",\n        embedderInfo: options.embedderInfo,\n        indexer: {\n          customOptions: options.configSchema ? (0, import_schema.toJsonSchema)({ schema: options.configSchema }) : void 0\n        }\n      }\n    },\n    (i) => runner(\n      i.documents.map((dd) => new import_document.Document(dd)),\n      i.options\n    )\n  );\n  const iwm = indexerWithMetadata(\n    indexer,\n    options.configSchema\n  );\n  return iwm;\n}\nasync function retrieve(registry, params) {\n  let retriever;\n  if (typeof params.retriever === \"string\") {\n    retriever = await registry.lookupAction(`/retriever/${params.retriever}`);\n  } else if (Object.hasOwnProperty.call(params.retriever, \"info\")) {\n    retriever = await registry.lookupAction(\n      `/retriever/${params.retriever.name}`\n    );\n  } else {\n    retriever = params.retriever;\n  }\n  if (!retriever) {\n    throw new Error(\"Unable to resolve the retriever\");\n  }\n  const response = await retriever({\n    query: typeof params.query === \"string\" ? import_document.Document.fromText(params.query) : params.query,\n    options: params.options\n  });\n  return response.documents.map((d) => new import_document.Document(d));\n}\nasync function index(registry, params) {\n  let indexer;\n  if (typeof params.indexer === \"string\") {\n    indexer = await registry.lookupAction(`/indexer/${params.indexer}`);\n  } else if (Object.hasOwnProperty.call(params.indexer, \"info\")) {\n    indexer = await registry.lookupAction(`/indexer/${params.indexer.name}`);\n  } else {\n    indexer = params.indexer;\n  }\n  if (!indexer) {\n    throw new Error(\"Unable to utilize the provided indexer\");\n  }\n  return await indexer({\n    documents: params.documents,\n    options: params.options\n  });\n}\nconst CommonRetrieverOptionsSchema = import_core.z.object({\n  k: import_core.z.number().describe(\"Number of documents to retrieve\").optional()\n});\nfunction retrieverRef(options) {\n  return { ...options };\n}\nconst IndexerInfoSchema = RetrieverInfoSchema;\nfunction indexerRef(options) {\n  return { ...options };\n}\nfunction itemToDocument(item, options) {\n  if (!item)\n    throw new import_core.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: `Items returned from simple retriever must be non-null.`\n    });\n  if (typeof item === \"string\") return import_document.Document.fromText(item);\n  if (typeof options.content === \"function\") {\n    const transformed = options.content(item);\n    return typeof transformed === \"string\" ? import_document.Document.fromText(transformed) : new import_document.Document({ content: transformed });\n  }\n  if (typeof options.content === \"string\" && typeof item === \"object\")\n    return import_document.Document.fromText(item[options.content]);\n  throw new import_core.GenkitError({\n    status: \"INVALID_ARGUMENT\",\n    message: `Cannot convert item to document without content option. Item: ${JSON.stringify(item)}`\n  });\n}\nfunction itemToMetadata(item, options) {\n  if (typeof item === \"string\") return void 0;\n  if (Array.isArray(options.metadata) && typeof item === \"object\") {\n    const out = {};\n    options.metadata.forEach((key) => out[key] = item[key]);\n    return out;\n  }\n  if (typeof options.metadata === \"function\") return options.metadata(item);\n  if (!options.metadata && typeof item === \"object\") {\n    const out = { ...item };\n    if (typeof options.content === \"string\") delete out[options.content];\n    return out;\n  }\n  throw new import_core.GenkitError({\n    status: \"INVALID_ARGUMENT\",\n    message: `Unable to extract metadata from item with supplied options. Item: ${JSON.stringify(item)}`\n  });\n}\nfunction defineSimpleRetriever(registry, options, handler) {\n  return defineRetriever(\n    registry,\n    {\n      name: options.name,\n      configSchema: options.configSchema\n    },\n    async (query, config) => {\n      const result = await handler(query, config);\n      return {\n        documents: result.map((item) => {\n          const doc = itemToDocument(item, options);\n          if (typeof item !== \"string\")\n            doc.metadata = itemToMetadata(item, options);\n          return doc;\n        })\n      };\n    }\n  );\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=retriever.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/retriever.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/session.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/session.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar session_exports = {};\n__export(session_exports, {\n  Session: () => Session,\n  SessionError: () => SessionError,\n  getCurrentSession: () => getCurrentSession,\n  inMemorySessionStore: () => inMemorySessionStore,\n  runWithSession: () => runWithSession\n});\nmodule.exports = __toCommonJS(session_exports);\nvar import_uuid = __webpack_require__(/*! uuid */ \"(action-browser)/./node_modules/uuid/dist/esm-node/index.js\");\nvar import_chat = __webpack_require__(/*! ./chat.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/chat.js\");\nvar import_index = __webpack_require__(/*! ./index.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/index.js\");\nclass Session {\n  constructor(registry, options) {\n    this.registry = registry;\n    this.id = options?.id ?? (0, import_uuid.v4)();\n    this.sessionData = options?.sessionData ?? {\n      id: this.id\n    };\n    if (!this.sessionData) {\n      this.sessionData = { id: this.id };\n    }\n    if (!this.sessionData.threads) {\n      this.sessionData.threads = {};\n    }\n    this.store = options?.store ?? new InMemorySessionStore();\n  }\n  id;\n  sessionData;\n  store;\n  get state() {\n    return this.sessionData.state;\n  }\n  /**\n   * Update session state data.\n   */\n  async updateState(data) {\n    let sessionData = this.sessionData;\n    if (!sessionData) {\n      sessionData = {};\n    }\n    sessionData.state = data;\n    this.sessionData = sessionData;\n    await this.store.save(this.id, sessionData);\n  }\n  /**\n   * Update messages for a given thread.\n   */\n  async updateMessages(thread, messages) {\n    let sessionData = this.sessionData;\n    if (!sessionData) {\n      sessionData = {};\n    }\n    if (!sessionData.threads) {\n      sessionData.threads = {};\n    }\n    sessionData.threads[thread] = messages.map(\n      (m) => m.toJSON ? m.toJSON() : m\n    );\n    this.sessionData = sessionData;\n    await this.store.save(this.id, sessionData);\n  }\n  chat(optionsOrPreambleOrThreadName, maybeOptionsOrPreamble, maybeOptions) {\n    return runWithSession(this.registry, this, () => {\n      let options;\n      let threadName = import_chat.MAIN_THREAD;\n      let preamble;\n      if (optionsOrPreambleOrThreadName) {\n        if (typeof optionsOrPreambleOrThreadName === \"string\") {\n          threadName = optionsOrPreambleOrThreadName;\n        } else if ((0, import_index.isExecutablePrompt)(optionsOrPreambleOrThreadName)) {\n          preamble = optionsOrPreambleOrThreadName;\n        } else {\n          options = optionsOrPreambleOrThreadName;\n        }\n      }\n      if (maybeOptionsOrPreamble) {\n        if ((0, import_index.isExecutablePrompt)(maybeOptionsOrPreamble)) {\n          preamble = maybeOptionsOrPreamble;\n        } else {\n          options = maybeOptionsOrPreamble;\n        }\n      }\n      if (maybeOptions) {\n        options = maybeOptions;\n      }\n      let requestBase;\n      if (preamble) {\n        const renderOptions = options;\n        requestBase = preamble.render(renderOptions?.input, renderOptions).then((rb) => {\n          return {\n            ...rb,\n            messages: (0, import_index.tagAsPreamble)(rb?.messages)\n          };\n        });\n      } else {\n        const baseOptions = { ...options };\n        const messages = [];\n        if (baseOptions.system) {\n          messages.push({\n            role: \"system\",\n            content: import_index.Message.parseContent(baseOptions.system)\n          });\n        }\n        delete baseOptions.system;\n        if (baseOptions.messages) {\n          messages.push(...baseOptions.messages);\n        }\n        baseOptions.messages = (0, import_index.tagAsPreamble)(messages);\n        requestBase = Promise.resolve(baseOptions);\n      }\n      return new import_chat.Chat(this, requestBase, {\n        thread: threadName,\n        id: this.id,\n        messages: (this.sessionData?.threads && this.sessionData?.threads[threadName]) ?? []\n      });\n    });\n  }\n  /**\n   * Executes provided function within this session context allowing calling\n   * `ai.currentSession().state`\n   */\n  run(fn) {\n    return runWithSession(this.registry, this, fn);\n  }\n  toJSON() {\n    return this.sessionData;\n  }\n}\nconst sessionAlsKey = \"ai.session\";\nfunction runWithSession(registry, session, fn) {\n  return registry.asyncStore.run(sessionAlsKey, session, fn);\n}\nfunction getCurrentSession(registry) {\n  return registry.asyncStore.getStore(sessionAlsKey);\n}\nclass SessionError extends Error {\n  constructor(msg) {\n    super(msg);\n  }\n}\nfunction inMemorySessionStore() {\n  return new InMemorySessionStore();\n}\nclass InMemorySessionStore {\n  data = {};\n  async get(sessionId) {\n    return this.data[sessionId];\n  }\n  async save(sessionId, sessionData) {\n    this.data[sessionId] = sessionData;\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=session.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/session.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js":
/*!************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/tool.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar tool_exports = {};\n__export(tool_exports, {\n  ToolInterruptError: () => ToolInterruptError,\n  asTool: () => asTool,\n  defineInterrupt: () => defineInterrupt,\n  defineTool: () => defineTool,\n  dynamicTool: () => dynamicTool,\n  isDynamicTool: () => isDynamicTool,\n  isToolRequest: () => isToolRequest,\n  isToolResponse: () => isToolResponse,\n  lookupToolByName: () => lookupToolByName,\n  resolveTools: () => resolveTools,\n  toToolDefinition: () => toToolDefinition\n});\nmodule.exports = __toCommonJS(tool_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! @genkit-ai/core/tracing */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_prompt = __webpack_require__(/*! ./prompt.js */ \"(action-browser)/./node_modules/@genkit-ai/ai/lib/prompt.js\");\nfunction asTool(registry, action) {\n  if (action.__action?.metadata?.type === \"tool\") {\n    return action;\n  }\n  const fn = (input) => {\n    (0, import_tracing.setCustomMetadataAttributes)(registry, { subtype: \"tool\" });\n    return action(input);\n  };\n  fn.__action = {\n    ...action.__action,\n    metadata: { ...action.__action.metadata, type: \"tool\" }\n  };\n  return fn;\n}\nasync function resolveTools(registry, tools) {\n  if (!tools || tools.length === 0) {\n    return [];\n  }\n  return await Promise.all(\n    tools.map(async (ref) => {\n      if (typeof ref === \"string\") {\n        return await lookupToolByName(registry, ref);\n      } else if ((0, import_core.isAction)(ref)) {\n        return asTool(registry, ref);\n      } else if ((0, import_prompt.isExecutablePrompt)(ref)) {\n        return await ref.asTool();\n      } else if (ref.name) {\n        return await lookupToolByName(\n          registry,\n          ref.metadata?.originalName || ref.name\n        );\n      }\n      throw new Error(\"Tools must be strings, tool definitions, or actions.\");\n    })\n  );\n}\nasync function lookupToolByName(registry, name) {\n  const tool = await registry.lookupAction(name) || await registry.lookupAction(`/tool/${name}`) || await registry.lookupAction(`/prompt/${name}`);\n  if (!tool) {\n    throw new Error(`Tool ${name} not found`);\n  }\n  return tool;\n}\nfunction toToolDefinition(tool) {\n  const originalName = tool.__action.name;\n  let name = originalName;\n  if (originalName.includes(\"/\")) {\n    name = originalName.substring(originalName.lastIndexOf(\"/\") + 1);\n  }\n  const out = {\n    name,\n    description: tool.__action.description || \"\",\n    outputSchema: (0, import_schema.toJsonSchema)({\n      schema: tool.__action.outputSchema ?? import_core.z.void(),\n      jsonSchema: tool.__action.outputJsonSchema\n    }),\n    inputSchema: (0, import_schema.toJsonSchema)({\n      schema: tool.__action.inputSchema ?? import_core.z.void(),\n      jsonSchema: tool.__action.inputJsonSchema\n    })\n  };\n  if (originalName !== name) {\n    out.metadata = { originalName };\n  }\n  return out;\n}\nfunction defineTool(registry, config, fn) {\n  const a = (0, import_core.defineAction)(\n    registry,\n    {\n      ...config,\n      actionType: \"tool\",\n      metadata: { ...config.metadata || {}, type: \"tool\" }\n    },\n    (i, runOptions) => {\n      return fn(i, {\n        ...runOptions,\n        context: { ...runOptions.context },\n        interrupt: interruptTool(registry)\n      });\n    }\n  );\n  implementTool(a, config, registry);\n  return a;\n}\nfunction implementTool(a, config, registry) {\n  a.respond = (interrupt, responseData, options) => {\n    if (registry) {\n      (0, import_core.assertUnstable)(\n        registry,\n        \"beta\",\n        \"The 'tool.reply' method is part of the 'interrupts' beta feature.\"\n      );\n    }\n    (0, import_schema.parseSchema)(responseData, {\n      jsonSchema: config.outputJsonSchema,\n      schema: config.outputSchema\n    });\n    return {\n      toolResponse: (0, import_core.stripUndefinedProps)({\n        name: interrupt.toolRequest.name,\n        ref: interrupt.toolRequest.ref,\n        output: responseData\n      }),\n      metadata: {\n        interruptResponse: options?.metadata || true\n      }\n    };\n  };\n  a.restart = (interrupt, resumedMetadata, options) => {\n    if (registry) {\n      (0, import_core.assertUnstable)(\n        registry,\n        \"beta\",\n        \"The 'tool.restart' method is part of the 'interrupts' beta feature.\"\n      );\n    }\n    let replaceInput = options?.replaceInput;\n    if (replaceInput) {\n      replaceInput = (0, import_schema.parseSchema)(replaceInput, {\n        schema: config.inputSchema,\n        jsonSchema: config.inputJsonSchema\n      });\n    }\n    return {\n      toolRequest: (0, import_core.stripUndefinedProps)({\n        name: interrupt.toolRequest.name,\n        ref: interrupt.toolRequest.ref,\n        input: replaceInput || interrupt.toolRequest.input\n      }),\n      metadata: (0, import_core.stripUndefinedProps)({\n        ...interrupt.metadata,\n        resumed: resumedMetadata || true,\n        // annotate the original input if replacing it\n        replacedInput: replaceInput ? interrupt.toolRequest.input : void 0\n      })\n    };\n  };\n}\nfunction isToolRequest(part) {\n  return !!part.toolRequest;\n}\nfunction isToolResponse(part) {\n  return !!part.toolResponse;\n}\nfunction isDynamicTool(t) {\n  return ((0, import_core.isDetachedAction)(t) || (0, import_core.isAction)(t)) && t.__action.metadata?.type === \"tool\" && t.__action.metadata?.dynamic;\n}\nfunction defineInterrupt(registry, config) {\n  const { requestMetadata, ...toolConfig } = config;\n  return defineTool(\n    registry,\n    toolConfig,\n    async (input, { interrupt }) => {\n      if (!config.requestMetadata) interrupt();\n      else if (typeof config.requestMetadata === \"object\")\n        interrupt(config.requestMetadata);\n      else interrupt(await Promise.resolve(config.requestMetadata(input)));\n    }\n  );\n}\nclass ToolInterruptError extends Error {\n  constructor(metadata) {\n    super();\n    this.metadata = metadata;\n    this.name = \"ToolInterruptError\";\n  }\n}\nfunction interruptTool(registry) {\n  return (metadata) => {\n    (0, import_core.assertUnstable)(registry, \"beta\", \"Tool interrupts are a beta feature.\");\n    throw new ToolInterruptError(metadata);\n  };\n}\nfunction dynamicTool(config, fn) {\n  const a = (0, import_core.detachedAction)(\n    {\n      ...config,\n      actionType: \"tool\",\n      metadata: { ...config.metadata || {}, type: \"tool\", dynamic: true }\n    },\n    (i, runOptions) => {\n      const interrupt = interruptTool(runOptions.registry);\n      if (fn) {\n        return fn(i, {\n          ...runOptions,\n          context: { ...runOptions.context },\n          interrupt\n        });\n      }\n      return interrupt();\n    }\n  );\n  implementTool(a, config);\n  return {\n    __action: {\n      ...a.__action,\n      metadata: {\n        ...a.__action.metadata,\n        type: \"tool\"\n      }\n    },\n    attach(registry) {\n      const bound = a.attach(registry);\n      implementTool(bound, config);\n      return bound;\n    }\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=tool.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/tool.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/ai/lib/types.js":
/*!*************************************************!*\
  !*** ./node_modules/@genkit-ai/ai/lib/types.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar types_exports = {};\n__export(types_exports, {\n  LlmResponseSchema: () => LlmResponseSchema,\n  LlmStatsSchema: () => LlmStatsSchema,\n  ToolCallSchema: () => ToolCallSchema,\n  ToolSchema: () => ToolSchema,\n  toToolWireFormat: () => toToolWireFormat\n});\nmodule.exports = __toCommonJS(types_exports);\nvar import_core = __webpack_require__(/*! @genkit-ai/core */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_schema = __webpack_require__(/*! @genkit-ai/core/schema */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nconst LlmStatsSchema = import_core.z.object({\n  latencyMs: import_core.z.number().optional(),\n  inputTokenCount: import_core.z.number().optional(),\n  outputTokenCount: import_core.z.number().optional()\n});\nconst ToolSchema = import_core.z.object({\n  name: import_core.z.string(),\n  description: import_core.z.string().optional(),\n  schema: import_core.z.any()\n});\nconst ToolCallSchema = import_core.z.object({\n  toolName: import_core.z.string(),\n  arguments: import_core.z.any()\n});\nconst LlmResponseSchema = import_core.z.object({\n  completion: import_core.z.string(),\n  toolCalls: import_core.z.array(ToolCallSchema).optional(),\n  stats: LlmStatsSchema\n});\nfunction toToolWireFormat(actions) {\n  if (!actions) return void 0;\n  return actions.map((a) => {\n    return {\n      name: a.__action.name,\n      description: a.__action.description,\n      schema: {\n        input: (0, import_schema.toJsonSchema)({\n          schema: a.__action.inputSchema,\n          jsonSchema: a.__action.inputJsonSchema\n        }),\n        output: (0, import_schema.toJsonSchema)({\n          schema: a.__action.outputSchema,\n          jsonSchema: a.__action.outputJsonSchema\n        })\n      }\n    };\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2FpL2xpYi90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMscUZBQWlCO0FBQzNDLG9CQUFvQixtQkFBTyxDQUFDLDZGQUF3QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLE1BQU0sQ0FNTDtBQUNEIiwic291cmNlcyI6WyIvaG9tZS91c2VyL3N0dWRpby9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9haS9saWIvdHlwZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHR5cGVzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHR5cGVzX2V4cG9ydHMsIHtcbiAgTGxtUmVzcG9uc2VTY2hlbWE6ICgpID0+IExsbVJlc3BvbnNlU2NoZW1hLFxuICBMbG1TdGF0c1NjaGVtYTogKCkgPT4gTGxtU3RhdHNTY2hlbWEsXG4gIFRvb2xDYWxsU2NoZW1hOiAoKSA9PiBUb29sQ2FsbFNjaGVtYSxcbiAgVG9vbFNjaGVtYTogKCkgPT4gVG9vbFNjaGVtYSxcbiAgdG9Ub29sV2lyZUZvcm1hdDogKCkgPT4gdG9Ub29sV2lyZUZvcm1hdFxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyh0eXBlc19leHBvcnRzKTtcbnZhciBpbXBvcnRfY29yZSA9IHJlcXVpcmUoXCJAZ2Vua2l0LWFpL2NvcmVcIik7XG52YXIgaW1wb3J0X3NjaGVtYSA9IHJlcXVpcmUoXCJAZ2Vua2l0LWFpL2NvcmUvc2NoZW1hXCIpO1xuY29uc3QgTGxtU3RhdHNTY2hlbWEgPSBpbXBvcnRfY29yZS56Lm9iamVjdCh7XG4gIGxhdGVuY3lNczogaW1wb3J0X2NvcmUuei5udW1iZXIoKS5vcHRpb25hbCgpLFxuICBpbnB1dFRva2VuQ291bnQ6IGltcG9ydF9jb3JlLnoubnVtYmVyKCkub3B0aW9uYWwoKSxcbiAgb3V0cHV0VG9rZW5Db3VudDogaW1wb3J0X2NvcmUuei5udW1iZXIoKS5vcHRpb25hbCgpXG59KTtcbmNvbnN0IFRvb2xTY2hlbWEgPSBpbXBvcnRfY29yZS56Lm9iamVjdCh7XG4gIG5hbWU6IGltcG9ydF9jb3JlLnouc3RyaW5nKCksXG4gIGRlc2NyaXB0aW9uOiBpbXBvcnRfY29yZS56LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIHNjaGVtYTogaW1wb3J0X2NvcmUuei5hbnkoKVxufSk7XG5jb25zdCBUb29sQ2FsbFNjaGVtYSA9IGltcG9ydF9jb3JlLnoub2JqZWN0KHtcbiAgdG9vbE5hbWU6IGltcG9ydF9jb3JlLnouc3RyaW5nKCksXG4gIGFyZ3VtZW50czogaW1wb3J0X2NvcmUuei5hbnkoKVxufSk7XG5jb25zdCBMbG1SZXNwb25zZVNjaGVtYSA9IGltcG9ydF9jb3JlLnoub2JqZWN0KHtcbiAgY29tcGxldGlvbjogaW1wb3J0X2NvcmUuei5zdHJpbmcoKSxcbiAgdG9vbENhbGxzOiBpbXBvcnRfY29yZS56LmFycmF5KFRvb2xDYWxsU2NoZW1hKS5vcHRpb25hbCgpLFxuICBzdGF0czogTGxtU3RhdHNTY2hlbWFcbn0pO1xuZnVuY3Rpb24gdG9Ub29sV2lyZUZvcm1hdChhY3Rpb25zKSB7XG4gIGlmICghYWN0aW9ucykgcmV0dXJuIHZvaWQgMDtcbiAgcmV0dXJuIGFjdGlvbnMubWFwKChhKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IGEuX19hY3Rpb24ubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBhLl9fYWN0aW9uLmRlc2NyaXB0aW9uLFxuICAgICAgc2NoZW1hOiB7XG4gICAgICAgIGlucHV0OiAoMCwgaW1wb3J0X3NjaGVtYS50b0pzb25TY2hlbWEpKHtcbiAgICAgICAgICBzY2hlbWE6IGEuX19hY3Rpb24uaW5wdXRTY2hlbWEsXG4gICAgICAgICAganNvblNjaGVtYTogYS5fX2FjdGlvbi5pbnB1dEpzb25TY2hlbWFcbiAgICAgICAgfSksXG4gICAgICAgIG91dHB1dDogKDAsIGltcG9ydF9zY2hlbWEudG9Kc29uU2NoZW1hKSh7XG4gICAgICAgICAgc2NoZW1hOiBhLl9fYWN0aW9uLm91dHB1dFNjaGVtYSxcbiAgICAgICAgICBqc29uU2NoZW1hOiBhLl9fYWN0aW9uLm91dHB1dEpzb25TY2hlbWFcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBMbG1SZXNwb25zZVNjaGVtYSxcbiAgTGxtU3RhdHNTY2hlbWEsXG4gIFRvb2xDYWxsU2NoZW1hLFxuICBUb29sU2NoZW1hLFxuICB0b1Rvb2xXaXJlRm9ybWF0XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/ai/lib/types.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/__codegen/version.js":
/*!***************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/__codegen/version.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar version_exports = {};\n__export(version_exports, {\n  version: () => version\n});\nmodule.exports = __toCommonJS(version_exports);\nconst version = \"1.13.0\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL19fY29kZWdlbi92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FFTDtBQUNEIiwic291cmNlcyI6WyIvaG9tZS91c2VyL3N0dWRpby9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi9fX2NvZGVnZW4vdmVyc2lvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgdmVyc2lvbl9leHBvcnRzID0ge307XG5fX2V4cG9ydCh2ZXJzaW9uX2V4cG9ydHMsIHtcbiAgdmVyc2lvbjogKCkgPT4gdmVyc2lvblxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyh2ZXJzaW9uX2V4cG9ydHMpO1xuY29uc3QgdmVyc2lvbiA9IFwiMS4xMy4wXCI7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgdmVyc2lvblxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/__codegen/version.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/action.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/action.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar action_exports = {};\n__export(action_exports, {\n  StatusCodes: () => import_statusTypes.StatusCodes,\n  StatusSchema: () => import_statusTypes.StatusSchema,\n  action: () => action,\n  actionWithMiddleware: () => actionWithMiddleware,\n  defineAction: () => defineAction,\n  defineActionAsync: () => defineActionAsync,\n  detachedAction: () => detachedAction,\n  getStreamingCallback: () => getStreamingCallback,\n  isAction: () => isAction,\n  isDetachedAction: () => isDetachedAction,\n  isInRuntimeContext: () => isInRuntimeContext,\n  runInActionRuntimeContext: () => runInActionRuntimeContext,\n  runOutsideActionRuntimeContext: () => runOutsideActionRuntimeContext,\n  runWithStreamingCallback: () => runWithStreamingCallback,\n  sentinelNoopStreamingCallback: () => sentinelNoopStreamingCallback\n});\nmodule.exports = __toCommonJS(action_exports);\nvar import_async = __webpack_require__(/*! ./async.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/async.js\");\nvar import_context = __webpack_require__(/*! ./context.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/context.js\");\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! ./tracing.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nvar import_statusTypes = __webpack_require__(/*! ./statusTypes.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/statusTypes.js\");\nconst makeNoopAbortSignal = () => ({\n  aborted: false,\n  onabort(ev) {\n  },\n  throwIfAborted() {\n  }\n});\nfunction actionWithMiddleware(action2, middleware) {\n  const wrapped = async (req) => {\n    return (await wrapped.run(req)).result;\n  };\n  wrapped.__action = action2.__action;\n  wrapped.__registry = action2.__registry;\n  wrapped.run = async (req, options) => {\n    let telemetry;\n    const dispatch = async (index, req2, opts) => {\n      if (index === middleware.length) {\n        const result = await action2.run(req2, opts);\n        telemetry = result.telemetry;\n        return result.result;\n      }\n      const currentMiddleware = middleware[index];\n      if (currentMiddleware.length === 3) {\n        return currentMiddleware(\n          req2,\n          opts,\n          async (modifiedReq, modifiedOptions) => dispatch(index + 1, modifiedReq || req2, modifiedOptions || opts)\n        );\n      } else if (currentMiddleware.length === 2) {\n        return currentMiddleware(\n          req2,\n          async (modifiedReq) => dispatch(index + 1, modifiedReq || req2, opts)\n        );\n      } else {\n        throw new Error(\"unspported middleware function shape\");\n      }\n    };\n    wrapped.stream = action2.stream;\n    return { result: await dispatch(0, req, options), telemetry };\n  };\n  return wrapped;\n}\nfunction action(registry, config, fn) {\n  return detachedAction(config, fn).attach(registry);\n}\nfunction detachedAction(config, fn) {\n  const actionName = typeof config.name === \"string\" ? config.name : `${config.name.pluginId}/${config.name.actionId}`;\n  const actionMetadata = {\n    name: actionName,\n    description: config.description,\n    inputSchema: config.inputSchema,\n    inputJsonSchema: config.inputJsonSchema,\n    outputSchema: config.outputSchema,\n    outputJsonSchema: config.outputJsonSchema,\n    streamSchema: config.streamSchema,\n    metadata: config.metadata,\n    actionType: config.actionType,\n    detached: true\n  };\n  return {\n    __action: actionMetadata,\n    attach(registry) {\n      const actionFn = async (input, options) => {\n        return (await actionFn.run(input, options)).result;\n      };\n      actionFn.__registry = registry;\n      actionFn.__action = { ...actionMetadata };\n      delete actionFn.__action[\"detached\"];\n      actionFn.run = async (input, options) => {\n        input = (0, import_schema.parseSchema)(input, {\n          schema: config.inputSchema,\n          jsonSchema: config.inputJsonSchema\n        });\n        let traceId;\n        let spanId;\n        let output = await (0, import_tracing.newTrace)(\n          registry,\n          {\n            name: actionName,\n            labels: {\n              [import_tracing.SPAN_TYPE_ATTR]: \"action\",\n              \"genkit:metadata:subtype\": config.actionType,\n              ...options?.telemetryLabels\n            }\n          },\n          async (metadata, span) => {\n            (0, import_tracing.setCustomMetadataAttributes)(registry, {\n              subtype: config.actionType\n            });\n            if (options?.context) {\n              (0, import_tracing.setCustomMetadataAttributes)(registry, {\n                context: JSON.stringify(options.context)\n              });\n            }\n            traceId = span.spanContext().traceId;\n            spanId = span.spanContext().spanId;\n            metadata.name = actionName;\n            metadata.input = input;\n            try {\n              const actionFn2 = () => fn(input, {\n                ...options,\n                // Context can either be explicitly set, or inherited from the parent action.\n                context: {\n                  ...registry.context,\n                  ...options?.context ?? (0, import_context.getContext)(registry)\n                },\n                streamingRequested: !!options?.onChunk && options.onChunk !== sentinelNoopStreamingCallback,\n                sendChunk: options?.onChunk ?? sentinelNoopStreamingCallback,\n                trace: {\n                  traceId,\n                  spanId\n                },\n                registry,\n                abortSignal: options?.abortSignal ?? makeNoopAbortSignal()\n              });\n              const output2 = await (0, import_context.runWithContext)(\n                registry,\n                options?.context,\n                actionFn2\n              );\n              metadata.output = JSON.stringify(output2);\n              return output2;\n            } catch (err) {\n              if (typeof err === \"object\") {\n                err.traceId = traceId;\n              }\n              throw err;\n            }\n          }\n        );\n        output = (0, import_schema.parseSchema)(output, {\n          schema: config.outputSchema,\n          jsonSchema: config.outputJsonSchema\n        });\n        return {\n          result: output,\n          telemetry: {\n            traceId,\n            spanId\n          }\n        };\n      };\n      actionFn.stream = (input, opts) => {\n        let chunkStreamController;\n        const chunkStream = new ReadableStream({\n          start(controller) {\n            chunkStreamController = controller;\n          },\n          pull() {\n          },\n          cancel() {\n          }\n        });\n        const invocationPromise = actionFn.run(config.inputSchema ? config.inputSchema.parse(input) : input, {\n          onChunk: (chunk) => {\n            chunkStreamController.enqueue(chunk);\n          },\n          context: {\n            ...registry.context,\n            ...opts?.context ?? (0, import_context.getContext)(registry)\n          }\n        }).then((s) => s.result).finally(() => {\n          chunkStreamController.close();\n        });\n        return {\n          output: invocationPromise,\n          stream: async function* () {\n            const reader = chunkStream.getReader();\n            while (true) {\n              const chunk = await reader.read();\n              if (chunk.value) {\n                yield chunk.value;\n              }\n              if (chunk.done) {\n                break;\n              }\n            }\n            return await invocationPromise;\n          }()\n        };\n      };\n      if (config.use) {\n        return actionWithMiddleware(actionFn, config.use);\n      }\n      return actionFn;\n    }\n  };\n}\nfunction isAction(a) {\n  return typeof a === \"function\" && \"__action\" in a && !a.__action.detached;\n}\nfunction isDetachedAction(a) {\n  return !!a.__action && !!a.__action.detached && typeof a.attach === \"function\";\n}\nfunction defineAction(registry, config, fn) {\n  if (isInRuntimeContext(registry)) {\n    throw new Error(\n      \"Cannot define new actions at runtime.\\nSee: https://github.com/firebase/genkit/blob/main/docs/errors/no_new_actions_at_runtime.md\"\n    );\n  }\n  const act = action(\n    registry,\n    config,\n    async (i, options) => {\n      await registry.initializeAllPlugins();\n      return await runInActionRuntimeContext(registry, () => fn(i, options));\n    }\n  );\n  act.__action.actionType = config.actionType;\n  registry.registerAction(config.actionType, act);\n  return act;\n}\nfunction defineActionAsync(registry, actionType, name, config, onInit) {\n  const actionName = typeof name === \"string\" ? name : `${name.pluginId}/${name.actionId}`;\n  const actionPromise = (0, import_async.lazy)(\n    () => config.then((resolvedConfig) => {\n      const act = action(\n        registry,\n        resolvedConfig,\n        async (i, options) => {\n          await registry.initializeAllPlugins();\n          return await runInActionRuntimeContext(\n            registry,\n            () => resolvedConfig.fn(i, options)\n          );\n        }\n      );\n      act.__action.actionType = actionType;\n      onInit?.(act);\n      return act;\n    })\n  );\n  registry.registerActionAsync(actionType, actionName, actionPromise);\n  return actionPromise;\n}\nconst streamingAlsKey = \"core.action.streamingCallback\";\nconst sentinelNoopStreamingCallback = () => null;\nfunction runWithStreamingCallback(registry, streamingCallback, fn) {\n  return registry.asyncStore.run(\n    streamingAlsKey,\n    streamingCallback || sentinelNoopStreamingCallback,\n    fn\n  );\n}\nfunction getStreamingCallback(registry) {\n  const cb = registry.asyncStore.getStore(streamingAlsKey);\n  if (cb === sentinelNoopStreamingCallback) {\n    return void 0;\n  }\n  return cb;\n}\nconst runtimeContextAslKey = \"core.action.runtimeContext\";\nfunction isInRuntimeContext(registry) {\n  return registry.asyncStore.getStore(runtimeContextAslKey) === \"runtime\";\n}\nfunction runInActionRuntimeContext(registry, fn) {\n  return registry.asyncStore.run(runtimeContextAslKey, \"runtime\", fn);\n}\nfunction runOutsideActionRuntimeContext(registry, fn) {\n  return registry.asyncStore.run(runtimeContextAslKey, \"outside\", fn);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=action.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/async.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/async.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar async_exports = {};\n__export(async_exports, {\n  Channel: () => Channel,\n  LazyPromise: () => LazyPromise,\n  lazy: () => lazy\n});\nmodule.exports = __toCommonJS(async_exports);\nfunction createTask() {\n  let resolve, reject;\n  const promise = new Promise(\n    (res, rej) => [resolve, reject] = [res, rej]\n  );\n  return {\n    resolve,\n    reject,\n    promise\n  };\n}\nclass Channel {\n  ready = createTask();\n  buffer = [];\n  err = null;\n  send(value) {\n    this.buffer.push(value);\n    this.ready.resolve();\n  }\n  close() {\n    this.buffer.push(null);\n    this.ready.resolve();\n  }\n  error(err) {\n    this.err = err;\n    this.ready.reject(err);\n  }\n  [Symbol.asyncIterator]() {\n    return {\n      next: async () => {\n        if (this.err) {\n          throw this.err;\n        }\n        if (!this.buffer.length) {\n          await this.ready.promise;\n        }\n        const value = this.buffer.shift();\n        if (!this.buffer.length) {\n          this.ready = createTask();\n        }\n        return {\n          value,\n          done: !value\n        };\n      }\n    };\n  }\n}\nclass LazyPromise {\n  executor;\n  promise;\n  constructor(executor) {\n    this.executor = executor;\n  }\n  then(onfulfilled, onrejected) {\n    this.promise ??= new Promise(this.executor);\n    return this.promise.then(onfulfilled, onrejected);\n  }\n}\nfunction lazy(fn) {\n  return new LazyPromise((resolve, reject) => {\n    try {\n      resolve(fn());\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=async.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2FzeW5jLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxNQUFNLENBSUw7QUFDRCIsInNvdXJjZXMiOlsiL2hvbWUvdXNlci9zdHVkaW8vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvYXN5bmMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGFzeW5jX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGFzeW5jX2V4cG9ydHMsIHtcbiAgQ2hhbm5lbDogKCkgPT4gQ2hhbm5lbCxcbiAgTGF6eVByb21pc2U6ICgpID0+IExhenlQcm9taXNlLFxuICBsYXp5OiAoKSA9PiBsYXp5XG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGFzeW5jX2V4cG9ydHMpO1xuZnVuY3Rpb24gY3JlYXRlVGFzaygpIHtcbiAgbGV0IHJlc29sdmUsIHJlamVjdDtcbiAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKFxuICAgIChyZXMsIHJlaikgPT4gW3Jlc29sdmUsIHJlamVjdF0gPSBbcmVzLCByZWpdXG4gICk7XG4gIHJldHVybiB7XG4gICAgcmVzb2x2ZSxcbiAgICByZWplY3QsXG4gICAgcHJvbWlzZVxuICB9O1xufVxuY2xhc3MgQ2hhbm5lbCB7XG4gIHJlYWR5ID0gY3JlYXRlVGFzaygpO1xuICBidWZmZXIgPSBbXTtcbiAgZXJyID0gbnVsbDtcbiAgc2VuZCh2YWx1ZSkge1xuICAgIHRoaXMuYnVmZmVyLnB1c2godmFsdWUpO1xuICAgIHRoaXMucmVhZHkucmVzb2x2ZSgpO1xuICB9XG4gIGNsb3NlKCkge1xuICAgIHRoaXMuYnVmZmVyLnB1c2gobnVsbCk7XG4gICAgdGhpcy5yZWFkeS5yZXNvbHZlKCk7XG4gIH1cbiAgZXJyb3IoZXJyKSB7XG4gICAgdGhpcy5lcnIgPSBlcnI7XG4gICAgdGhpcy5yZWFkeS5yZWplY3QoZXJyKTtcbiAgfVxuICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuZXh0OiBhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmVycikge1xuICAgICAgICAgIHRocm93IHRoaXMuZXJyO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5idWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgYXdhaXQgdGhpcy5yZWFkeS5wcm9taXNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5idWZmZXIuc2hpZnQoKTtcbiAgICAgICAgaWYgKCF0aGlzLmJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLnJlYWR5ID0gY3JlYXRlVGFzaygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgZG9uZTogIXZhbHVlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuY2xhc3MgTGF6eVByb21pc2Uge1xuICBleGVjdXRvcjtcbiAgcHJvbWlzZTtcbiAgY29uc3RydWN0b3IoZXhlY3V0b3IpIHtcbiAgICB0aGlzLmV4ZWN1dG9yID0gZXhlY3V0b3I7XG4gIH1cbiAgdGhlbihvbmZ1bGZpbGxlZCwgb25yZWplY3RlZCkge1xuICAgIHRoaXMucHJvbWlzZSA/Pz0gbmV3IFByb21pc2UodGhpcy5leGVjdXRvcik7XG4gICAgcmV0dXJuIHRoaXMucHJvbWlzZS50aGVuKG9uZnVsZmlsbGVkLCBvbnJlamVjdGVkKTtcbiAgfVxufVxuZnVuY3Rpb24gbGF6eShmbikge1xuICByZXR1cm4gbmV3IExhenlQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB0cnkge1xuICAgICAgcmVzb2x2ZShmbigpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZWplY3QoZSk7XG4gICAgfVxuICB9KTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBDaGFubmVsLFxuICBMYXp5UHJvbWlzZSxcbiAgbGF6eVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3luYy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/async.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/background-action.js":
/*!***************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/background-action.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar background_action_exports = {};\n__export(background_action_exports, {\n  OperationSchema: () => OperationSchema,\n  defineBackgroundAction: () => defineBackgroundAction,\n  lookupBackgroundAction: () => lookupBackgroundAction\n});\nmodule.exports = __toCommonJS(background_action_exports);\nvar z = __toESM(__webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/lib/index.js\"));\nvar import_action = __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\");\nvar import_error = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nconst OperationSchema = z.object({\n  action: z.string().optional(),\n  id: z.string(),\n  done: z.boolean().optional(),\n  output: z.any().optional(),\n  error: z.object({ message: z.string() }).passthrough().optional(),\n  metadata: z.record(z.string(), z.any()).optional()\n});\nasync function lookupBackgroundAction(registry, key) {\n  const root = await registry.lookupAction(key);\n  if (!root) return void 0;\n  const actionName = key.substring(key.indexOf(\"/\", 1) + 1);\n  return new BackgroundActionImpl(\n    root,\n    await registry.lookupAction(`/check-operation/${actionName}/check`),\n    await registry.lookupAction(`/cancel-operation/${actionName}/cancel`)\n  );\n}\nclass BackgroundActionImpl {\n  __action;\n  startAction;\n  checkAction;\n  cancelAction;\n  constructor(startAction, checkAction, cancelAction) {\n    this.__action = {\n      name: startAction.__action.name,\n      description: startAction.__action.description,\n      inputSchema: startAction.__action.inputSchema,\n      inputJsonSchema: startAction.__action.inputJsonSchema,\n      metadata: startAction.__action.metadata,\n      actionType: startAction.__action.actionType\n    };\n    this.startAction = startAction;\n    this.checkAction = checkAction;\n    this.cancelAction = cancelAction;\n  }\n  async start(input, options) {\n    return await this.startAction(input, options);\n  }\n  async check(operation) {\n    return await this.checkAction(operation);\n  }\n  get supportsCancel() {\n    return !!this.cancelAction;\n  }\n  async cancel(operation) {\n    if (!this.cancelAction) {\n      return operation;\n    }\n    return await this.cancelAction(operation);\n  }\n}\nfunction defineBackgroundAction(registry, config) {\n  const startAction = (0, import_action.defineAction)(\n    registry,\n    {\n      actionType: config.actionType,\n      name: config.name,\n      description: config.description,\n      inputSchema: config.inputSchema,\n      inputJsonSchema: config.inputJsonSchema,\n      outputSchema: OperationSchema,\n      metadata: {\n        ...config.metadata,\n        outputSchema: (0, import_schema.toJsonSchema)({\n          schema: config.outputSchema,\n          jsonSchema: config.outputJsonSchema\n        })\n      },\n      use: config.use\n    },\n    async (input, options) => {\n      const operation = await config.start(input, options);\n      operation.action = `/${config.actionType}/${config.name}`;\n      return operation;\n    }\n  );\n  const checkAction = (0, import_action.defineAction)(\n    registry,\n    {\n      actionType: \"check-operation\",\n      name: `${config.name}/check`,\n      description: config.description,\n      inputSchema: OperationSchema,\n      inputJsonSchema: config.inputJsonSchema,\n      outputSchema: OperationSchema,\n      metadata: {\n        ...config.metadata,\n        outputSchema: (0, import_schema.toJsonSchema)({\n          schema: config.outputSchema,\n          jsonSchema: config.outputJsonSchema\n        })\n      }\n    },\n    async (input) => {\n      const operation = await config.check(input);\n      operation.action = `/${config.actionType}/${config.name}`;\n      return operation;\n    }\n  );\n  let cancelAction = void 0;\n  if (config.cancel) {\n    cancelAction = (0, import_action.defineAction)(\n      registry,\n      {\n        actionType: \"cancel-operation\",\n        name: `${config.name}/cancel`,\n        description: config.description,\n        inputSchema: OperationSchema,\n        inputJsonSchema: config.inputJsonSchema,\n        outputSchema: OperationSchema,\n        metadata: {\n          ...config.metadata,\n          outputSchema: (0, import_schema.toJsonSchema)({\n            schema: config.outputSchema,\n            jsonSchema: config.outputJsonSchema\n          })\n        }\n      },\n      async (input) => {\n        if (!config.cancel) {\n          throw new import_error.GenkitError({\n            status: \"UNAVAILABLE\",\n            message: `${config.name} does not support cancellation.`\n          });\n        }\n        const operation = await config.cancel(input);\n        operation.action = `/${config.actionType}/${config.name}`;\n        return operation;\n      }\n    );\n  }\n  return new BackgroundActionImpl(startAction, checkAction, cancelAction);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=background-action.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/background-action.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/context.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/context.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar context_exports = {};\n__export(context_exports, {\n  apiKey: () => apiKey,\n  getContext: () => getContext,\n  runWithContext: () => runWithContext\n});\nmodule.exports = __toCommonJS(context_exports);\nvar import_action = __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\");\nvar import_error = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\nconst contextAlsKey = \"core.auth.context\";\nfunction runWithContext(registry, context, fn) {\n  if (context === void 0) {\n    return fn();\n  }\n  return registry.asyncStore.run(\n    contextAlsKey,\n    context,\n    () => (0, import_action.runInActionRuntimeContext)(registry, fn)\n  );\n}\nfunction getContext(registry) {\n  if (registry.registry) {\n    registry = registry.registry;\n  }\n  registry = registry;\n  return registry.asyncStore.getStore(contextAlsKey);\n}\nfunction apiKey(valueOrPolicy) {\n  return async (request) => {\n    const context = {\n      auth: { apiKey: request.headers[\"authorization\"] }\n    };\n    if (typeof valueOrPolicy === \"string\") {\n      if (!context.auth?.apiKey) {\n        console.error(\"THROWING UNAUTHENTICATED\");\n        throw new import_error.UserFacingError(\"UNAUTHENTICATED\", \"Unauthenticated\");\n      }\n      if (context.auth?.apiKey != valueOrPolicy) {\n        console.error(\"Throwing PERMISSION_DENIED\");\n        throw new import_error.UserFacingError(\"PERMISSION_DENIED\", \"Permission Denied\");\n      }\n    } else if (typeof valueOrPolicy === \"function\") {\n      await valueOrPolicy(context);\n    } else if (typeof valueOrPolicy !== \"undefined\") {\n      throw new Error(\n        `Invalid type ${typeof valueOrPolicy} passed to apiKey()`\n      );\n    }\n    return context;\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=context.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2NvbnRleHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esb0JBQW9CLG1CQUFPLENBQUMsa0ZBQWE7QUFDekMsbUJBQW1CLG1CQUFPLENBQUMsZ0ZBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0Esd0JBQXdCLHNCQUFzQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBSUw7QUFDRCIsInNvdXJjZXMiOlsiL2hvbWUvdXNlci9zdHVkaW8vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvY29udGV4dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgY29udGV4dF9leHBvcnRzID0ge307XG5fX2V4cG9ydChjb250ZXh0X2V4cG9ydHMsIHtcbiAgYXBpS2V5OiAoKSA9PiBhcGlLZXksXG4gIGdldENvbnRleHQ6ICgpID0+IGdldENvbnRleHQsXG4gIHJ1bldpdGhDb250ZXh0OiAoKSA9PiBydW5XaXRoQ29udGV4dFxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhjb250ZXh0X2V4cG9ydHMpO1xudmFyIGltcG9ydF9hY3Rpb24gPSByZXF1aXJlKFwiLi9hY3Rpb24uanNcIik7XG52YXIgaW1wb3J0X2Vycm9yID0gcmVxdWlyZShcIi4vZXJyb3IuanNcIik7XG5jb25zdCBjb250ZXh0QWxzS2V5ID0gXCJjb3JlLmF1dGguY29udGV4dFwiO1xuZnVuY3Rpb24gcnVuV2l0aENvbnRleHQocmVnaXN0cnksIGNvbnRleHQsIGZuKSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICByZXR1cm4gZm4oKTtcbiAgfVxuICByZXR1cm4gcmVnaXN0cnkuYXN5bmNTdG9yZS5ydW4oXG4gICAgY29udGV4dEFsc0tleSxcbiAgICBjb250ZXh0LFxuICAgICgpID0+ICgwLCBpbXBvcnRfYWN0aW9uLnJ1bkluQWN0aW9uUnVudGltZUNvbnRleHQpKHJlZ2lzdHJ5LCBmbilcbiAgKTtcbn1cbmZ1bmN0aW9uIGdldENvbnRleHQocmVnaXN0cnkpIHtcbiAgaWYgKHJlZ2lzdHJ5LnJlZ2lzdHJ5KSB7XG4gICAgcmVnaXN0cnkgPSByZWdpc3RyeS5yZWdpc3RyeTtcbiAgfVxuICByZWdpc3RyeSA9IHJlZ2lzdHJ5O1xuICByZXR1cm4gcmVnaXN0cnkuYXN5bmNTdG9yZS5nZXRTdG9yZShjb250ZXh0QWxzS2V5KTtcbn1cbmZ1bmN0aW9uIGFwaUtleSh2YWx1ZU9yUG9saWN5KSB7XG4gIHJldHVybiBhc3luYyAocmVxdWVzdCkgPT4ge1xuICAgIGNvbnN0IGNvbnRleHQgPSB7XG4gICAgICBhdXRoOiB7IGFwaUtleTogcmVxdWVzdC5oZWFkZXJzW1wiYXV0aG9yaXphdGlvblwiXSB9XG4gICAgfTtcbiAgICBpZiAodHlwZW9mIHZhbHVlT3JQb2xpY3kgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGlmICghY29udGV4dC5hdXRoPy5hcGlLZXkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlRIUk9XSU5HIFVOQVVUSEVOVElDQVRFRFwiKTtcbiAgICAgICAgdGhyb3cgbmV3IGltcG9ydF9lcnJvci5Vc2VyRmFjaW5nRXJyb3IoXCJVTkFVVEhFTlRJQ0FURURcIiwgXCJVbmF1dGhlbnRpY2F0ZWRcIik7XG4gICAgICB9XG4gICAgICBpZiAoY29udGV4dC5hdXRoPy5hcGlLZXkgIT0gdmFsdWVPclBvbGljeSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVGhyb3dpbmcgUEVSTUlTU0lPTl9ERU5JRURcIik7XG4gICAgICAgIHRocm93IG5ldyBpbXBvcnRfZXJyb3IuVXNlckZhY2luZ0Vycm9yKFwiUEVSTUlTU0lPTl9ERU5JRURcIiwgXCJQZXJtaXNzaW9uIERlbmllZFwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZU9yUG9saWN5ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGF3YWl0IHZhbHVlT3JQb2xpY3koY29udGV4dCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWVPclBvbGljeSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgSW52YWxpZCB0eXBlICR7dHlwZW9mIHZhbHVlT3JQb2xpY3l9IHBhc3NlZCB0byBhcGlLZXkoKWBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZXh0O1xuICB9O1xufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFwaUtleSxcbiAgZ2V0Q29udGV4dCxcbiAgcnVuV2l0aENvbnRleHRcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udGV4dC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/context.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/error.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/error.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar error_exports = {};\n__export(error_exports, {\n  GenkitError: () => GenkitError,\n  UnstableApiError: () => UnstableApiError,\n  UserFacingError: () => UserFacingError,\n  assertUnstable: () => assertUnstable,\n  getCallableJSON: () => getCallableJSON,\n  getErrorMessage: () => getErrorMessage,\n  getErrorStack: () => getErrorStack,\n  getHttpStatus: () => getHttpStatus\n});\nmodule.exports = __toCommonJS(error_exports);\nvar import_statusTypes = __webpack_require__(/*! ./statusTypes.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/statusTypes.js\");\nclass GenkitError extends Error {\n  source;\n  status;\n  detail;\n  code;\n  // For easy printing, we wrap the error with information like the source\n  // and status, but that's redundant with JSON.\n  originalMessage;\n  constructor({\n    status,\n    message,\n    detail,\n    source\n  }) {\n    super(`${source ? `${source}: ` : \"\"}${status}: ${message}`);\n    this.originalMessage = message;\n    this.code = (0, import_statusTypes.httpStatusCode)(status);\n    this.status = status;\n    this.detail = detail;\n    this.name = \"GenkitError\";\n  }\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON() {\n    return {\n      // This error type is used by 3P authors with the field \"detail\",\n      // but the actual Callable protocol value is \"details\"\n      ...this.detail === void 0 ? {} : { details: this.detail },\n      status: this.status,\n      message: this.originalMessage\n    };\n  }\n}\nclass UnstableApiError extends GenkitError {\n  constructor(level, message) {\n    super({\n      status: \"FAILED_PRECONDITION\",\n      message: `${message ? message + \" \" : \"\"}This API requires '${level}' stability level.\n\nTo use this feature, initialize Genkit using \\`import {genkit} from \"genkit/${level}\"\\`.`\n    });\n    this.name = \"UnstableApiError\";\n  }\n}\nfunction assertUnstable(registry, level, message) {\n  if (level === \"beta\" && registry.apiStability === \"stable\") {\n    throw new UnstableApiError(level, message);\n  }\n}\nclass UserFacingError extends GenkitError {\n  constructor(status, message, details) {\n    super({ status, detail: details, message });\n    super.name = \"UserFacingError\";\n  }\n}\nfunction getHttpStatus(e) {\n  if (e instanceof GenkitError) {\n    return e.code;\n  }\n  return 500;\n}\nfunction getCallableJSON(e) {\n  if (e instanceof GenkitError) {\n    return e.toJSON();\n  }\n  return {\n    message: \"Internal Error\",\n    status: \"INTERNAL\"\n  };\n}\nfunction getErrorMessage(e) {\n  if (e instanceof Error) {\n    return e.message;\n  }\n  return `${e}`;\n}\nfunction getErrorStack(e) {\n  if (e instanceof Error) {\n    return e.stack;\n  }\n  return void 0;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2Vycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSx5QkFBeUIsbUJBQU8sQ0FBQyw0RkFBa0I7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsYUFBYSxZQUFZLE9BQU8sU0FBUyxFQUFFLE9BQU8sSUFBSSxRQUFRO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLElBQUksc0JBQXNCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiw2QkFBNkIscUJBQXFCLE1BQU07O0FBRTFFLHVEQUF1RCxRQUFRLGVBQWUsTUFBTTtBQUNwRixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGtDQUFrQztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksRUFBRTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBU0w7QUFDRCIsInNvdXJjZXMiOlsiL2hvbWUvdXNlci9zdHVkaW8vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvZXJyb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGVycm9yX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGVycm9yX2V4cG9ydHMsIHtcbiAgR2Vua2l0RXJyb3I6ICgpID0+IEdlbmtpdEVycm9yLFxuICBVbnN0YWJsZUFwaUVycm9yOiAoKSA9PiBVbnN0YWJsZUFwaUVycm9yLFxuICBVc2VyRmFjaW5nRXJyb3I6ICgpID0+IFVzZXJGYWNpbmdFcnJvcixcbiAgYXNzZXJ0VW5zdGFibGU6ICgpID0+IGFzc2VydFVuc3RhYmxlLFxuICBnZXRDYWxsYWJsZUpTT046ICgpID0+IGdldENhbGxhYmxlSlNPTixcbiAgZ2V0RXJyb3JNZXNzYWdlOiAoKSA9PiBnZXRFcnJvck1lc3NhZ2UsXG4gIGdldEVycm9yU3RhY2s6ICgpID0+IGdldEVycm9yU3RhY2ssXG4gIGdldEh0dHBTdGF0dXM6ICgpID0+IGdldEh0dHBTdGF0dXNcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoZXJyb3JfZXhwb3J0cyk7XG52YXIgaW1wb3J0X3N0YXR1c1R5cGVzID0gcmVxdWlyZShcIi4vc3RhdHVzVHlwZXMuanNcIik7XG5jbGFzcyBHZW5raXRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgc291cmNlO1xuICBzdGF0dXM7XG4gIGRldGFpbDtcbiAgY29kZTtcbiAgLy8gRm9yIGVhc3kgcHJpbnRpbmcsIHdlIHdyYXAgdGhlIGVycm9yIHdpdGggaW5mb3JtYXRpb24gbGlrZSB0aGUgc291cmNlXG4gIC8vIGFuZCBzdGF0dXMsIGJ1dCB0aGF0J3MgcmVkdW5kYW50IHdpdGggSlNPTi5cbiAgb3JpZ2luYWxNZXNzYWdlO1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgc3RhdHVzLFxuICAgIG1lc3NhZ2UsXG4gICAgZGV0YWlsLFxuICAgIHNvdXJjZVxuICB9KSB7XG4gICAgc3VwZXIoYCR7c291cmNlID8gYCR7c291cmNlfTogYCA6IFwiXCJ9JHtzdGF0dXN9OiAke21lc3NhZ2V9YCk7XG4gICAgdGhpcy5vcmlnaW5hbE1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHRoaXMuY29kZSA9ICgwLCBpbXBvcnRfc3RhdHVzVHlwZXMuaHR0cFN0YXR1c0NvZGUpKHN0YXR1cyk7XG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgdGhpcy5kZXRhaWwgPSBkZXRhaWw7XG4gICAgdGhpcy5uYW1lID0gXCJHZW5raXRFcnJvclwiO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgSlNPTi1zZXJpYWxpemFibGUgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBvYmplY3QuXG4gICAqL1xuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFRoaXMgZXJyb3IgdHlwZSBpcyB1c2VkIGJ5IDNQIGF1dGhvcnMgd2l0aCB0aGUgZmllbGQgXCJkZXRhaWxcIixcbiAgICAgIC8vIGJ1dCB0aGUgYWN0dWFsIENhbGxhYmxlIHByb3RvY29sIHZhbHVlIGlzIFwiZGV0YWlsc1wiXG4gICAgICAuLi50aGlzLmRldGFpbCA9PT0gdm9pZCAwID8ge30gOiB7IGRldGFpbHM6IHRoaXMuZGV0YWlsIH0sXG4gICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgICAgbWVzc2FnZTogdGhpcy5vcmlnaW5hbE1lc3NhZ2VcbiAgICB9O1xuICB9XG59XG5jbGFzcyBVbnN0YWJsZUFwaUVycm9yIGV4dGVuZHMgR2Vua2l0RXJyb3Ige1xuICBjb25zdHJ1Y3RvcihsZXZlbCwgbWVzc2FnZSkge1xuICAgIHN1cGVyKHtcbiAgICAgIHN0YXR1czogXCJGQUlMRURfUFJFQ09ORElUSU9OXCIsXG4gICAgICBtZXNzYWdlOiBgJHttZXNzYWdlID8gbWVzc2FnZSArIFwiIFwiIDogXCJcIn1UaGlzIEFQSSByZXF1aXJlcyAnJHtsZXZlbH0nIHN0YWJpbGl0eSBsZXZlbC5cblxuVG8gdXNlIHRoaXMgZmVhdHVyZSwgaW5pdGlhbGl6ZSBHZW5raXQgdXNpbmcgXFxgaW1wb3J0IHtnZW5raXR9IGZyb20gXCJnZW5raXQvJHtsZXZlbH1cIlxcYC5gXG4gICAgfSk7XG4gICAgdGhpcy5uYW1lID0gXCJVbnN0YWJsZUFwaUVycm9yXCI7XG4gIH1cbn1cbmZ1bmN0aW9uIGFzc2VydFVuc3RhYmxlKHJlZ2lzdHJ5LCBsZXZlbCwgbWVzc2FnZSkge1xuICBpZiAobGV2ZWwgPT09IFwiYmV0YVwiICYmIHJlZ2lzdHJ5LmFwaVN0YWJpbGl0eSA9PT0gXCJzdGFibGVcIikge1xuICAgIHRocm93IG5ldyBVbnN0YWJsZUFwaUVycm9yKGxldmVsLCBtZXNzYWdlKTtcbiAgfVxufVxuY2xhc3MgVXNlckZhY2luZ0Vycm9yIGV4dGVuZHMgR2Vua2l0RXJyb3Ige1xuICBjb25zdHJ1Y3RvcihzdGF0dXMsIG1lc3NhZ2UsIGRldGFpbHMpIHtcbiAgICBzdXBlcih7IHN0YXR1cywgZGV0YWlsOiBkZXRhaWxzLCBtZXNzYWdlIH0pO1xuICAgIHN1cGVyLm5hbWUgPSBcIlVzZXJGYWNpbmdFcnJvclwiO1xuICB9XG59XG5mdW5jdGlvbiBnZXRIdHRwU3RhdHVzKGUpIHtcbiAgaWYgKGUgaW5zdGFuY2VvZiBHZW5raXRFcnJvcikge1xuICAgIHJldHVybiBlLmNvZGU7XG4gIH1cbiAgcmV0dXJuIDUwMDtcbn1cbmZ1bmN0aW9uIGdldENhbGxhYmxlSlNPTihlKSB7XG4gIGlmIChlIGluc3RhbmNlb2YgR2Vua2l0RXJyb3IpIHtcbiAgICByZXR1cm4gZS50b0pTT04oKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1lc3NhZ2U6IFwiSW50ZXJuYWwgRXJyb3JcIixcbiAgICBzdGF0dXM6IFwiSU5URVJOQUxcIlxuICB9O1xufVxuZnVuY3Rpb24gZ2V0RXJyb3JNZXNzYWdlKGUpIHtcbiAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBlLm1lc3NhZ2U7XG4gIH1cbiAgcmV0dXJuIGAke2V9YDtcbn1cbmZ1bmN0aW9uIGdldEVycm9yU3RhY2soZSkge1xuICBpZiAoZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIGUuc3RhY2s7XG4gIH1cbiAgcmV0dXJuIHZvaWQgMDtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBHZW5raXRFcnJvcixcbiAgVW5zdGFibGVBcGlFcnJvcixcbiAgVXNlckZhY2luZ0Vycm9yLFxuICBhc3NlcnRVbnN0YWJsZSxcbiAgZ2V0Q2FsbGFibGVKU09OLFxuICBnZXRFcnJvck1lc3NhZ2UsXG4gIGdldEVycm9yU3RhY2ssXG4gIGdldEh0dHBTdGF0dXNcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3IuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/flow.js":
/*!**************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/flow.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar flow_exports = {};\n__export(flow_exports, {\n  defineFlow: () => defineFlow,\n  run: () => run\n});\nmodule.exports = __toCommonJS(flow_exports);\nvar import_node_async_hooks = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\");\nvar import_action = __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\");\nvar import_registry = __webpack_require__(/*! ./registry.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js\");\nvar import_tracing = __webpack_require__(/*! ./tracing.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nfunction defineFlow(registry, config, fn) {\n  const resolvedConfig = typeof config === \"string\" ? { name: config } : config;\n  return defineFlowAction(registry, resolvedConfig, fn);\n}\nfunction defineFlowAction(registry, config, fn) {\n  return (0, import_action.defineAction)(\n    registry,\n    {\n      actionType: \"flow\",\n      name: config.name,\n      inputSchema: config.inputSchema,\n      outputSchema: config.outputSchema,\n      streamSchema: config.streamSchema,\n      metadata: config.metadata\n    },\n    async (input, { sendChunk, context, trace, abortSignal, streamingRequested }) => {\n      return await legacyRegistryAls.run(registry, () => {\n        const ctx = sendChunk;\n        ctx.sendChunk = sendChunk;\n        ctx.context = context;\n        ctx.trace = trace;\n        ctx.abortSignal = abortSignal;\n        ctx.streamingRequested = streamingRequested;\n        return fn(input, ctx);\n      });\n    }\n  );\n}\nconst legacyRegistryAls = new import_node_async_hooks.AsyncLocalStorage();\nfunction run(name, funcOrInput, fnOrRegistry, maybeRegistry) {\n  let func;\n  let input;\n  let registry;\n  if (typeof funcOrInput === \"function\") {\n    func = funcOrInput;\n  } else {\n    input = funcOrInput;\n  }\n  if (typeof fnOrRegistry === \"function\") {\n    func = fnOrRegistry;\n  } else if (fnOrRegistry instanceof import_registry.Registry || fnOrRegistry?.registry) {\n    registry = fnOrRegistry?.registry ? fnOrRegistry?.registry : fnOrRegistry;\n  }\n  if (maybeRegistry) {\n    registry = maybeRegistry.registry ? maybeRegistry.registry : maybeRegistry;\n  }\n  if (!registry) {\n    registry = legacyRegistryAls.getStore();\n  }\n  if (!registry) {\n    throw new Error(\n      \"Unable to resolve registry. Consider explicitly passing Genkit instance.\"\n    );\n  }\n  if (!func) {\n    throw new Error(\"unable to resolve run function\");\n  }\n  return (0, import_tracing.runInNewSpan)(\n    registry,\n    {\n      metadata: { name },\n      labels: {\n        [import_tracing.SPAN_TYPE_ATTR]: \"flowStep\"\n      }\n    },\n    async (meta) => {\n      meta.input = input;\n      const output = arguments.length === 3 ? await func(input) : await func();\n      meta.output = JSON.stringify(output);\n      return output;\n    }\n  );\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=flow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2Zsb3cuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDhCQUE4QixtQkFBTyxDQUFDLDBDQUFrQjtBQUN4RCxvQkFBb0IsbUJBQU8sQ0FBQyxrRkFBYTtBQUN6QyxzQkFBc0IsbUJBQU8sQ0FBQyxzRkFBZTtBQUM3QyxxQkFBcUIsbUJBQU8sQ0FBQyxvRkFBYztBQUMzQztBQUNBLHdEQUF3RCxlQUFlO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxvQkFBb0IsNERBQTREO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsTUFBTTtBQUN4QjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUdMO0FBQ0QiLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvc3R1ZGlvL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2Zsb3cuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGZsb3dfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoZmxvd19leHBvcnRzLCB7XG4gIGRlZmluZUZsb3c6ICgpID0+IGRlZmluZUZsb3csXG4gIHJ1bjogKCkgPT4gcnVuXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGZsb3dfZXhwb3J0cyk7XG52YXIgaW1wb3J0X25vZGVfYXN5bmNfaG9va3MgPSByZXF1aXJlKFwibm9kZTphc3luY19ob29rc1wiKTtcbnZhciBpbXBvcnRfYWN0aW9uID0gcmVxdWlyZShcIi4vYWN0aW9uLmpzXCIpO1xudmFyIGltcG9ydF9yZWdpc3RyeSA9IHJlcXVpcmUoXCIuL3JlZ2lzdHJ5LmpzXCIpO1xudmFyIGltcG9ydF90cmFjaW5nID0gcmVxdWlyZShcIi4vdHJhY2luZy5qc1wiKTtcbmZ1bmN0aW9uIGRlZmluZUZsb3cocmVnaXN0cnksIGNvbmZpZywgZm4pIHtcbiAgY29uc3QgcmVzb2x2ZWRDb25maWcgPSB0eXBlb2YgY29uZmlnID09PSBcInN0cmluZ1wiID8geyBuYW1lOiBjb25maWcgfSA6IGNvbmZpZztcbiAgcmV0dXJuIGRlZmluZUZsb3dBY3Rpb24ocmVnaXN0cnksIHJlc29sdmVkQ29uZmlnLCBmbik7XG59XG5mdW5jdGlvbiBkZWZpbmVGbG93QWN0aW9uKHJlZ2lzdHJ5LCBjb25maWcsIGZuKSB7XG4gIHJldHVybiAoMCwgaW1wb3J0X2FjdGlvbi5kZWZpbmVBY3Rpb24pKFxuICAgIHJlZ2lzdHJ5LFxuICAgIHtcbiAgICAgIGFjdGlvblR5cGU6IFwiZmxvd1wiLFxuICAgICAgbmFtZTogY29uZmlnLm5hbWUsXG4gICAgICBpbnB1dFNjaGVtYTogY29uZmlnLmlucHV0U2NoZW1hLFxuICAgICAgb3V0cHV0U2NoZW1hOiBjb25maWcub3V0cHV0U2NoZW1hLFxuICAgICAgc3RyZWFtU2NoZW1hOiBjb25maWcuc3RyZWFtU2NoZW1hLFxuICAgICAgbWV0YWRhdGE6IGNvbmZpZy5tZXRhZGF0YVxuICAgIH0sXG4gICAgYXN5bmMgKGlucHV0LCB7IHNlbmRDaHVuaywgY29udGV4dCwgdHJhY2UsIGFib3J0U2lnbmFsLCBzdHJlYW1pbmdSZXF1ZXN0ZWQgfSkgPT4ge1xuICAgICAgcmV0dXJuIGF3YWl0IGxlZ2FjeVJlZ2lzdHJ5QWxzLnJ1bihyZWdpc3RyeSwgKCkgPT4ge1xuICAgICAgICBjb25zdCBjdHggPSBzZW5kQ2h1bms7XG4gICAgICAgIGN0eC5zZW5kQ2h1bmsgPSBzZW5kQ2h1bms7XG4gICAgICAgIGN0eC5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgY3R4LnRyYWNlID0gdHJhY2U7XG4gICAgICAgIGN0eC5hYm9ydFNpZ25hbCA9IGFib3J0U2lnbmFsO1xuICAgICAgICBjdHguc3RyZWFtaW5nUmVxdWVzdGVkID0gc3RyZWFtaW5nUmVxdWVzdGVkO1xuICAgICAgICByZXR1cm4gZm4oaW5wdXQsIGN0eCk7XG4gICAgICB9KTtcbiAgICB9XG4gICk7XG59XG5jb25zdCBsZWdhY3lSZWdpc3RyeUFscyA9IG5ldyBpbXBvcnRfbm9kZV9hc3luY19ob29rcy5Bc3luY0xvY2FsU3RvcmFnZSgpO1xuZnVuY3Rpb24gcnVuKG5hbWUsIGZ1bmNPcklucHV0LCBmbk9yUmVnaXN0cnksIG1heWJlUmVnaXN0cnkpIHtcbiAgbGV0IGZ1bmM7XG4gIGxldCBpbnB1dDtcbiAgbGV0IHJlZ2lzdHJ5O1xuICBpZiAodHlwZW9mIGZ1bmNPcklucHV0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmdW5jID0gZnVuY09ySW5wdXQ7XG4gIH0gZWxzZSB7XG4gICAgaW5wdXQgPSBmdW5jT3JJbnB1dDtcbiAgfVxuICBpZiAodHlwZW9mIGZuT3JSZWdpc3RyeSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZnVuYyA9IGZuT3JSZWdpc3RyeTtcbiAgfSBlbHNlIGlmIChmbk9yUmVnaXN0cnkgaW5zdGFuY2VvZiBpbXBvcnRfcmVnaXN0cnkuUmVnaXN0cnkgfHwgZm5PclJlZ2lzdHJ5Py5yZWdpc3RyeSkge1xuICAgIHJlZ2lzdHJ5ID0gZm5PclJlZ2lzdHJ5Py5yZWdpc3RyeSA/IGZuT3JSZWdpc3RyeT8ucmVnaXN0cnkgOiBmbk9yUmVnaXN0cnk7XG4gIH1cbiAgaWYgKG1heWJlUmVnaXN0cnkpIHtcbiAgICByZWdpc3RyeSA9IG1heWJlUmVnaXN0cnkucmVnaXN0cnkgPyBtYXliZVJlZ2lzdHJ5LnJlZ2lzdHJ5IDogbWF5YmVSZWdpc3RyeTtcbiAgfVxuICBpZiAoIXJlZ2lzdHJ5KSB7XG4gICAgcmVnaXN0cnkgPSBsZWdhY3lSZWdpc3RyeUFscy5nZXRTdG9yZSgpO1xuICB9XG4gIGlmICghcmVnaXN0cnkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIlVuYWJsZSB0byByZXNvbHZlIHJlZ2lzdHJ5LiBDb25zaWRlciBleHBsaWNpdGx5IHBhc3NpbmcgR2Vua2l0IGluc3RhbmNlLlwiXG4gICAgKTtcbiAgfVxuICBpZiAoIWZ1bmMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bmFibGUgdG8gcmVzb2x2ZSBydW4gZnVuY3Rpb25cIik7XG4gIH1cbiAgcmV0dXJuICgwLCBpbXBvcnRfdHJhY2luZy5ydW5Jbk5ld1NwYW4pKFxuICAgIHJlZ2lzdHJ5LFxuICAgIHtcbiAgICAgIG1ldGFkYXRhOiB7IG5hbWUgfSxcbiAgICAgIGxhYmVsczoge1xuICAgICAgICBbaW1wb3J0X3RyYWNpbmcuU1BBTl9UWVBFX0FUVFJdOiBcImZsb3dTdGVwXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIChtZXRhKSA9PiB7XG4gICAgICBtZXRhLmlucHV0ID0gaW5wdXQ7XG4gICAgICBjb25zdCBvdXRwdXQgPSBhcmd1bWVudHMubGVuZ3RoID09PSAzID8gYXdhaXQgZnVuYyhpbnB1dCkgOiBhd2FpdCBmdW5jKCk7XG4gICAgICBtZXRhLm91dHB1dCA9IEpTT04uc3RyaW5naWZ5KG91dHB1dCk7XG4gICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cbiAgKTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBkZWZpbmVGbG93LFxuICBydW5cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zmxvdy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/flow.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar index_exports = {};\n__export(index_exports, {\n  GENKIT_CLIENT_HEADER: () => GENKIT_CLIENT_HEADER,\n  GENKIT_REFLECTION_API_SPEC_VERSION: () => GENKIT_REFLECTION_API_SPEC_VERSION,\n  GENKIT_VERSION: () => GENKIT_VERSION,\n  GenkitError: () => import_error.GenkitError,\n  OperationSchema: () => import_background_action.OperationSchema,\n  UnstableApiError: () => import_error.UnstableApiError,\n  UserFacingError: () => import_error.UserFacingError,\n  apiKey: () => import_context.apiKey,\n  assertUnstable: () => import_error.assertUnstable,\n  defineBackgroundAction: () => import_background_action.defineBackgroundAction,\n  defineFlow: () => import_flow.defineFlow,\n  defineJsonSchema: () => import_schema.defineJsonSchema,\n  defineSchema: () => import_schema.defineSchema,\n  getCallableJSON: () => import_error.getCallableJSON,\n  getContext: () => import_context.getContext,\n  getHttpStatus: () => import_error.getHttpStatus,\n  run: () => import_flow.run,\n  runWithContext: () => import_context.runWithContext,\n  z: () => import_zod.z\n});\nmodule.exports = __toCommonJS(index_exports);\nvar import_version = __webpack_require__(/*! ./__codegen/version.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/__codegen/version.js\");\nvar import_zod = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/lib/index.js\");\n__reExport(index_exports, __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\"), module.exports);\nvar import_background_action = __webpack_require__(/*! ./background-action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/background-action.js\");\nvar import_context = __webpack_require__(/*! ./context.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/context.js\");\nvar import_error = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\nvar import_flow = __webpack_require__(/*! ./flow.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/flow.js\");\n__reExport(index_exports, __webpack_require__(/*! ./plugin.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/plugin.js\"), module.exports);\n__reExport(index_exports, __webpack_require__(/*! ./reflection.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/reflection.js\"), module.exports);\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\n__reExport(index_exports, __webpack_require__(/*! ./telemetryTypes.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/telemetryTypes.js\"), module.exports);\n__reExport(index_exports, __webpack_require__(/*! ./utils.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/utils.js\"), module.exports);\nconst GENKIT_VERSION = import_version.version;\nconst GENKIT_CLIENT_HEADER = `genkit-node/${GENKIT_VERSION} gl-node/${process.versions.node}`;\nconst GENKIT_REFLECTION_API_SPEC_VERSION = 1;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxxQkFBcUIsbUJBQU8sQ0FBQyx3R0FBd0I7QUFDckQsaUJBQWlCLG1CQUFPLENBQUMsNkRBQUs7QUFDOUIsMEJBQTBCLG1CQUFPLENBQUMsa0ZBQWE7QUFDL0MsK0JBQStCLG1CQUFPLENBQUMsd0dBQXdCO0FBQy9ELHFCQUFxQixtQkFBTyxDQUFDLG9GQUFjO0FBQzNDLG1CQUFtQixtQkFBTyxDQUFDLGdGQUFZO0FBQ3ZDLGtCQUFrQixtQkFBTyxDQUFDLDhFQUFXO0FBQ3JDLDBCQUEwQixtQkFBTyxDQUFDLGtGQUFhO0FBQy9DLDBCQUEwQixtQkFBTyxDQUFDLDBGQUFpQjtBQUNuRCxvQkFBb0IsbUJBQU8sQ0FBQyxrRkFBYTtBQUN6QywwQkFBMEIsbUJBQU8sQ0FBQyxrR0FBcUI7QUFDdkQsMEJBQTBCLG1CQUFPLENBQUMsZ0ZBQVk7QUFDOUM7QUFDQSw0Q0FBNEMsZ0JBQWdCLFVBQVUsc0JBQXNCO0FBQzVGO0FBQ0E7QUFDQSxNQUFNLENBeUJMO0FBQ0QiLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvc3R1ZGlvL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX19yZUV4cG9ydCA9ICh0YXJnZXQsIG1vZCwgc2Vjb25kVGFyZ2V0KSA9PiAoX19jb3B5UHJvcHModGFyZ2V0LCBtb2QsIFwiZGVmYXVsdFwiKSwgc2Vjb25kVGFyZ2V0ICYmIF9fY29weVByb3BzKHNlY29uZFRhcmdldCwgbW9kLCBcImRlZmF1bHRcIikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgaW5kZXhfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoaW5kZXhfZXhwb3J0cywge1xuICBHRU5LSVRfQ0xJRU5UX0hFQURFUjogKCkgPT4gR0VOS0lUX0NMSUVOVF9IRUFERVIsXG4gIEdFTktJVF9SRUZMRUNUSU9OX0FQSV9TUEVDX1ZFUlNJT046ICgpID0+IEdFTktJVF9SRUZMRUNUSU9OX0FQSV9TUEVDX1ZFUlNJT04sXG4gIEdFTktJVF9WRVJTSU9OOiAoKSA9PiBHRU5LSVRfVkVSU0lPTixcbiAgR2Vua2l0RXJyb3I6ICgpID0+IGltcG9ydF9lcnJvci5HZW5raXRFcnJvcixcbiAgT3BlcmF0aW9uU2NoZW1hOiAoKSA9PiBpbXBvcnRfYmFja2dyb3VuZF9hY3Rpb24uT3BlcmF0aW9uU2NoZW1hLFxuICBVbnN0YWJsZUFwaUVycm9yOiAoKSA9PiBpbXBvcnRfZXJyb3IuVW5zdGFibGVBcGlFcnJvcixcbiAgVXNlckZhY2luZ0Vycm9yOiAoKSA9PiBpbXBvcnRfZXJyb3IuVXNlckZhY2luZ0Vycm9yLFxuICBhcGlLZXk6ICgpID0+IGltcG9ydF9jb250ZXh0LmFwaUtleSxcbiAgYXNzZXJ0VW5zdGFibGU6ICgpID0+IGltcG9ydF9lcnJvci5hc3NlcnRVbnN0YWJsZSxcbiAgZGVmaW5lQmFja2dyb3VuZEFjdGlvbjogKCkgPT4gaW1wb3J0X2JhY2tncm91bmRfYWN0aW9uLmRlZmluZUJhY2tncm91bmRBY3Rpb24sXG4gIGRlZmluZUZsb3c6ICgpID0+IGltcG9ydF9mbG93LmRlZmluZUZsb3csXG4gIGRlZmluZUpzb25TY2hlbWE6ICgpID0+IGltcG9ydF9zY2hlbWEuZGVmaW5lSnNvblNjaGVtYSxcbiAgZGVmaW5lU2NoZW1hOiAoKSA9PiBpbXBvcnRfc2NoZW1hLmRlZmluZVNjaGVtYSxcbiAgZ2V0Q2FsbGFibGVKU09OOiAoKSA9PiBpbXBvcnRfZXJyb3IuZ2V0Q2FsbGFibGVKU09OLFxuICBnZXRDb250ZXh0OiAoKSA9PiBpbXBvcnRfY29udGV4dC5nZXRDb250ZXh0LFxuICBnZXRIdHRwU3RhdHVzOiAoKSA9PiBpbXBvcnRfZXJyb3IuZ2V0SHR0cFN0YXR1cyxcbiAgcnVuOiAoKSA9PiBpbXBvcnRfZmxvdy5ydW4sXG4gIHJ1bldpdGhDb250ZXh0OiAoKSA9PiBpbXBvcnRfY29udGV4dC5ydW5XaXRoQ29udGV4dCxcbiAgejogKCkgPT4gaW1wb3J0X3pvZC56XG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGluZGV4X2V4cG9ydHMpO1xudmFyIGltcG9ydF92ZXJzaW9uID0gcmVxdWlyZShcIi4vX19jb2RlZ2VuL3ZlcnNpb24uanNcIik7XG52YXIgaW1wb3J0X3pvZCA9IHJlcXVpcmUoXCJ6b2RcIik7XG5fX3JlRXhwb3J0KGluZGV4X2V4cG9ydHMsIHJlcXVpcmUoXCIuL2FjdGlvbi5qc1wiKSwgbW9kdWxlLmV4cG9ydHMpO1xudmFyIGltcG9ydF9iYWNrZ3JvdW5kX2FjdGlvbiA9IHJlcXVpcmUoXCIuL2JhY2tncm91bmQtYWN0aW9uLmpzXCIpO1xudmFyIGltcG9ydF9jb250ZXh0ID0gcmVxdWlyZShcIi4vY29udGV4dC5qc1wiKTtcbnZhciBpbXBvcnRfZXJyb3IgPSByZXF1aXJlKFwiLi9lcnJvci5qc1wiKTtcbnZhciBpbXBvcnRfZmxvdyA9IHJlcXVpcmUoXCIuL2Zsb3cuanNcIik7XG5fX3JlRXhwb3J0KGluZGV4X2V4cG9ydHMsIHJlcXVpcmUoXCIuL3BsdWdpbi5qc1wiKSwgbW9kdWxlLmV4cG9ydHMpO1xuX19yZUV4cG9ydChpbmRleF9leHBvcnRzLCByZXF1aXJlKFwiLi9yZWZsZWN0aW9uLmpzXCIpLCBtb2R1bGUuZXhwb3J0cyk7XG52YXIgaW1wb3J0X3NjaGVtYSA9IHJlcXVpcmUoXCIuL3NjaGVtYS5qc1wiKTtcbl9fcmVFeHBvcnQoaW5kZXhfZXhwb3J0cywgcmVxdWlyZShcIi4vdGVsZW1ldHJ5VHlwZXMuanNcIiksIG1vZHVsZS5leHBvcnRzKTtcbl9fcmVFeHBvcnQoaW5kZXhfZXhwb3J0cywgcmVxdWlyZShcIi4vdXRpbHMuanNcIiksIG1vZHVsZS5leHBvcnRzKTtcbmNvbnN0IEdFTktJVF9WRVJTSU9OID0gaW1wb3J0X3ZlcnNpb24udmVyc2lvbjtcbmNvbnN0IEdFTktJVF9DTElFTlRfSEVBREVSID0gYGdlbmtpdC1ub2RlLyR7R0VOS0lUX1ZFUlNJT059IGdsLW5vZGUvJHtwcm9jZXNzLnZlcnNpb25zLm5vZGV9YDtcbmNvbnN0IEdFTktJVF9SRUZMRUNUSU9OX0FQSV9TUEVDX1ZFUlNJT04gPSAxO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIEdFTktJVF9DTElFTlRfSEVBREVSLFxuICBHRU5LSVRfUkVGTEVDVElPTl9BUElfU1BFQ19WRVJTSU9OLFxuICBHRU5LSVRfVkVSU0lPTixcbiAgR2Vua2l0RXJyb3IsXG4gIE9wZXJhdGlvblNjaGVtYSxcbiAgVW5zdGFibGVBcGlFcnJvcixcbiAgVXNlckZhY2luZ0Vycm9yLFxuICBhcGlLZXksXG4gIGFzc2VydFVuc3RhYmxlLFxuICBkZWZpbmVCYWNrZ3JvdW5kQWN0aW9uLFxuICBkZWZpbmVGbG93LFxuICBkZWZpbmVKc29uU2NoZW1hLFxuICBkZWZpbmVTY2hlbWEsXG4gIGdldENhbGxhYmxlSlNPTixcbiAgZ2V0Q29udGV4dCxcbiAgZ2V0SHR0cFN0YXR1cyxcbiAgcnVuLFxuICBydW5XaXRoQ29udGV4dCxcbiAgeixcbiAgLi4ucmVxdWlyZShcIi4vYWN0aW9uLmpzXCIpLFxuICAuLi5yZXF1aXJlKFwiLi9wbHVnaW4uanNcIiksXG4gIC4uLnJlcXVpcmUoXCIuL3JlZmxlY3Rpb24uanNcIiksXG4gIC4uLnJlcXVpcmUoXCIuL3RlbGVtZXRyeVR5cGVzLmpzXCIpLFxuICAuLi5yZXF1aXJlKFwiLi91dGlscy5qc1wiKVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GENKIT_CLIENT_HEADER: () => (/* binding */ GENKIT_CLIENT_HEADER),\n/* harmony export */   GENKIT_REFLECTION_API_SPEC_VERSION: () => (/* binding */ GENKIT_REFLECTION_API_SPEC_VERSION),\n/* harmony export */   GENKIT_VERSION: () => (/* binding */ GENKIT_VERSION),\n/* harmony export */   GenkitError: () => (/* reexport safe */ _error_js__WEBPACK_IMPORTED_MODULE_4__.GenkitError),\n/* harmony export */   OperationSchema: () => (/* reexport safe */ _background_action_js__WEBPACK_IMPORTED_MODULE_2__.OperationSchema),\n/* harmony export */   UnstableApiError: () => (/* reexport safe */ _error_js__WEBPACK_IMPORTED_MODULE_4__.UnstableApiError),\n/* harmony export */   UserFacingError: () => (/* reexport safe */ _error_js__WEBPACK_IMPORTED_MODULE_4__.UserFacingError),\n/* harmony export */   apiKey: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_3__.apiKey),\n/* harmony export */   assertUnstable: () => (/* reexport safe */ _error_js__WEBPACK_IMPORTED_MODULE_4__.assertUnstable),\n/* harmony export */   defineBackgroundAction: () => (/* reexport safe */ _background_action_js__WEBPACK_IMPORTED_MODULE_2__.defineBackgroundAction),\n/* harmony export */   defineFlow: () => (/* reexport safe */ _flow_js__WEBPACK_IMPORTED_MODULE_5__.defineFlow),\n/* harmony export */   defineJsonSchema: () => (/* reexport safe */ _schema_js__WEBPACK_IMPORTED_MODULE_8__.defineJsonSchema),\n/* harmony export */   defineSchema: () => (/* reexport safe */ _schema_js__WEBPACK_IMPORTED_MODULE_8__.defineSchema),\n/* harmony export */   getCallableJSON: () => (/* reexport safe */ _error_js__WEBPACK_IMPORTED_MODULE_4__.getCallableJSON),\n/* harmony export */   getContext: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_3__.getContext),\n/* harmony export */   getHttpStatus: () => (/* reexport safe */ _error_js__WEBPACK_IMPORTED_MODULE_4__.getHttpStatus),\n/* harmony export */   run: () => (/* reexport safe */ _flow_js__WEBPACK_IMPORTED_MODULE_5__.run),\n/* harmony export */   runWithContext: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_3__.runWithContext),\n/* harmony export */   z: () => (/* reexport safe */ zod__WEBPACK_IMPORTED_MODULE_11__.z)\n/* harmony export */ });\n/* harmony import */ var _codegen_version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./__codegen/version.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/__codegen/version.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _action_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _action_js__WEBPACK_IMPORTED_MODULE_1__) if([\"default\",\"GENKIT_CLIENT_HEADER\",\"GENKIT_REFLECTION_API_SPEC_VERSION\",\"GENKIT_VERSION\",\"GenkitError\",\"OperationSchema\",\"UnstableApiError\",\"UserFacingError\",\"apiKey\",\"assertUnstable\",\"defineBackgroundAction\",\"defineFlow\",\"defineJsonSchema\",\"defineSchema\",\"getCallableJSON\",\"getContext\",\"getHttpStatus\",\"run\",\"runWithContext\",\"z\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _action_js__WEBPACK_IMPORTED_MODULE_1__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _background_action_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./background-action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/background-action.js\");\n/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./context.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/context.js\");\n/* harmony import */ var _error_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\n/* harmony import */ var _flow_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./flow.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/flow.js\");\n/* harmony import */ var _plugin_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./plugin.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/plugin.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _plugin_js__WEBPACK_IMPORTED_MODULE_6__) if([\"default\",\"GENKIT_CLIENT_HEADER\",\"GENKIT_REFLECTION_API_SPEC_VERSION\",\"GENKIT_VERSION\",\"GenkitError\",\"OperationSchema\",\"UnstableApiError\",\"UserFacingError\",\"apiKey\",\"assertUnstable\",\"defineBackgroundAction\",\"defineFlow\",\"defineJsonSchema\",\"defineSchema\",\"getCallableJSON\",\"getContext\",\"getHttpStatus\",\"run\",\"runWithContext\",\"z\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _plugin_js__WEBPACK_IMPORTED_MODULE_6__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _reflection_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./reflection.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/reflection.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _reflection_js__WEBPACK_IMPORTED_MODULE_7__) if([\"default\",\"GENKIT_CLIENT_HEADER\",\"GENKIT_REFLECTION_API_SPEC_VERSION\",\"GENKIT_VERSION\",\"GenkitError\",\"OperationSchema\",\"UnstableApiError\",\"UserFacingError\",\"apiKey\",\"assertUnstable\",\"defineBackgroundAction\",\"defineFlow\",\"defineJsonSchema\",\"defineSchema\",\"getCallableJSON\",\"getContext\",\"getHttpStatus\",\"run\",\"runWithContext\",\"z\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _reflection_js__WEBPACK_IMPORTED_MODULE_7__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _schema_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./schema.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\n/* harmony import */ var _telemetryTypes_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./telemetryTypes.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/telemetryTypes.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _telemetryTypes_js__WEBPACK_IMPORTED_MODULE_9__) if([\"default\",\"GENKIT_CLIENT_HEADER\",\"GENKIT_REFLECTION_API_SPEC_VERSION\",\"GENKIT_VERSION\",\"GenkitError\",\"OperationSchema\",\"UnstableApiError\",\"UserFacingError\",\"apiKey\",\"assertUnstable\",\"defineBackgroundAction\",\"defineFlow\",\"defineJsonSchema\",\"defineSchema\",\"getCallableJSON\",\"getContext\",\"getHttpStatus\",\"run\",\"runWithContext\",\"z\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _telemetryTypes_js__WEBPACK_IMPORTED_MODULE_9__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/utils.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _utils_js__WEBPACK_IMPORTED_MODULE_10__) if([\"default\",\"GENKIT_CLIENT_HEADER\",\"GENKIT_REFLECTION_API_SPEC_VERSION\",\"GENKIT_VERSION\",\"GenkitError\",\"OperationSchema\",\"UnstableApiError\",\"UserFacingError\",\"apiKey\",\"assertUnstable\",\"defineBackgroundAction\",\"defineFlow\",\"defineJsonSchema\",\"defineSchema\",\"getCallableJSON\",\"getContext\",\"getHttpStatus\",\"run\",\"runWithContext\",\"z\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _utils_js__WEBPACK_IMPORTED_MODULE_10__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\nconst GENKIT_VERSION = _codegen_version_js__WEBPACK_IMPORTED_MODULE_0__.version;\nconst GENKIT_CLIENT_HEADER = `genkit-node/${GENKIT_VERSION} gl-node/${process.versions.node}`;\nconst GENKIT_REFLECTION_API_SPEC_VERSION = 1;\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWlEO0FBQ2pELHVCQUF1Qix3REFBTztBQUM5Qiw0Q0FBNEMsZ0JBQWdCLFVBQVUsc0JBQXNCO0FBQzVGO0FBQ3dCO0FBQ0k7QUFJSTtBQUtWO0FBUUY7QUFJRDtBQUNTO0FBQ0k7QUFDNkI7QUFDekI7QUFDVDtBQXFCekI7QUFDRiIsInNvdXJjZXMiOlsiL2hvbWUvdXNlci9zdHVkaW8vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fX2NvZGVnZW4vdmVyc2lvbi5qc1wiO1xuY29uc3QgR0VOS0lUX1ZFUlNJT04gPSB2ZXJzaW9uO1xuY29uc3QgR0VOS0lUX0NMSUVOVF9IRUFERVIgPSBgZ2Vua2l0LW5vZGUvJHtHRU5LSVRfVkVSU0lPTn0gZ2wtbm9kZS8ke3Byb2Nlc3MudmVyc2lvbnMubm9kZX1gO1xuY29uc3QgR0VOS0lUX1JFRkxFQ1RJT05fQVBJX1NQRUNfVkVSU0lPTiA9IDE7XG5pbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vYWN0aW9uLmpzXCI7XG5pbXBvcnQge1xuICBPcGVyYXRpb25TY2hlbWEsXG4gIGRlZmluZUJhY2tncm91bmRBY3Rpb25cbn0gZnJvbSBcIi4vYmFja2dyb3VuZC1hY3Rpb24uanNcIjtcbmltcG9ydCB7XG4gIGFwaUtleSxcbiAgZ2V0Q29udGV4dCxcbiAgcnVuV2l0aENvbnRleHRcbn0gZnJvbSBcIi4vY29udGV4dC5qc1wiO1xuaW1wb3J0IHtcbiAgR2Vua2l0RXJyb3IsXG4gIFVuc3RhYmxlQXBpRXJyb3IsXG4gIFVzZXJGYWNpbmdFcnJvcixcbiAgYXNzZXJ0VW5zdGFibGUsXG4gIGdldENhbGxhYmxlSlNPTixcbiAgZ2V0SHR0cFN0YXR1c1xufSBmcm9tIFwiLi9lcnJvci5qc1wiO1xuaW1wb3J0IHtcbiAgZGVmaW5lRmxvdyxcbiAgcnVuXG59IGZyb20gXCIuL2Zsb3cuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3BsdWdpbi5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcmVmbGVjdGlvbi5qc1wiO1xuaW1wb3J0IHsgZGVmaW5lSnNvblNjaGVtYSwgZGVmaW5lU2NoZW1hIH0gZnJvbSBcIi4vc2NoZW1hLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90ZWxlbWV0cnlUeXBlcy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdXRpbHMuanNcIjtcbmV4cG9ydCB7XG4gIEdFTktJVF9DTElFTlRfSEVBREVSLFxuICBHRU5LSVRfUkVGTEVDVElPTl9BUElfU1BFQ19WRVJTSU9OLFxuICBHRU5LSVRfVkVSU0lPTixcbiAgR2Vua2l0RXJyb3IsXG4gIE9wZXJhdGlvblNjaGVtYSxcbiAgVW5zdGFibGVBcGlFcnJvcixcbiAgVXNlckZhY2luZ0Vycm9yLFxuICBhcGlLZXksXG4gIGFzc2VydFVuc3RhYmxlLFxuICBkZWZpbmVCYWNrZ3JvdW5kQWN0aW9uLFxuICBkZWZpbmVGbG93LFxuICBkZWZpbmVKc29uU2NoZW1hLFxuICBkZWZpbmVTY2hlbWEsXG4gIGdldENhbGxhYmxlSlNPTixcbiAgZ2V0Q29udGV4dCxcbiAgZ2V0SHR0cFN0YXR1cyxcbiAgcnVuLFxuICBydW5XaXRoQ29udGV4dCxcbiAgelxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/index.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/logging.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar logging_exports = {};\n__export(logging_exports, {\n  logger: () => logger\n});\nmodule.exports = __toCommonJS(logging_exports);\nconst LOG_LEVELS = [\"debug\", \"info\", \"warn\", \"error\"];\nconst loggerKey = \"__genkit_logger\";\nconst _defaultLogger = {\n  shouldLog(targetLevel) {\n    return LOG_LEVELS.indexOf(this.level) <= LOG_LEVELS.indexOf(targetLevel);\n  },\n  debug(...args) {\n    this.shouldLog(\"debug\") && console.debug(...args);\n  },\n  info(...args) {\n    this.shouldLog(\"info\") && console.info(...args);\n  },\n  warn(...args) {\n    this.shouldLog(\"warn\") && console.warn(...args);\n  },\n  error(...args) {\n    this.shouldLog(\"error\") && console.error(...args);\n  },\n  level: \"info\"\n};\nfunction getLogger() {\n  if (!global[loggerKey]) {\n    global[loggerKey] = _defaultLogger;\n  }\n  return global[loggerKey];\n}\nclass Logger {\n  defaultLogger = _defaultLogger;\n  init(fn) {\n    global[loggerKey] = fn;\n  }\n  info(...args) {\n    getLogger().info.apply(getLogger(), args);\n  }\n  debug(...args) {\n    getLogger().debug.apply(getLogger(), args);\n  }\n  error(...args) {\n    getLogger().error.apply(getLogger(), args);\n  }\n  warn(...args) {\n    getLogger().warn.apply(getLogger(), args);\n  }\n  setLogLevel(level) {\n    getLogger().level = level;\n  }\n  logStructured(msg, metadata) {\n    getLogger().info(msg, metadata);\n  }\n  logStructuredError(msg, metadata) {\n    getLogger().error(msg, metadata);\n  }\n}\nconst logger = new Logger();\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=logging.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2xvZ2dpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsiL2hvbWUvdXNlci9zdHVkaW8vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvbG9nZ2luZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgbG9nZ2luZ19leHBvcnRzID0ge307XG5fX2V4cG9ydChsb2dnaW5nX2V4cG9ydHMsIHtcbiAgbG9nZ2VyOiAoKSA9PiBsb2dnZXJcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMobG9nZ2luZ19leHBvcnRzKTtcbmNvbnN0IExPR19MRVZFTFMgPSBbXCJkZWJ1Z1wiLCBcImluZm9cIiwgXCJ3YXJuXCIsIFwiZXJyb3JcIl07XG5jb25zdCBsb2dnZXJLZXkgPSBcIl9fZ2Vua2l0X2xvZ2dlclwiO1xuY29uc3QgX2RlZmF1bHRMb2dnZXIgPSB7XG4gIHNob3VsZExvZyh0YXJnZXRMZXZlbCkge1xuICAgIHJldHVybiBMT0dfTEVWRUxTLmluZGV4T2YodGhpcy5sZXZlbCkgPD0gTE9HX0xFVkVMUy5pbmRleE9mKHRhcmdldExldmVsKTtcbiAgfSxcbiAgZGVidWcoLi4uYXJncykge1xuICAgIHRoaXMuc2hvdWxkTG9nKFwiZGVidWdcIikgJiYgY29uc29sZS5kZWJ1ZyguLi5hcmdzKTtcbiAgfSxcbiAgaW5mbyguLi5hcmdzKSB7XG4gICAgdGhpcy5zaG91bGRMb2coXCJpbmZvXCIpICYmIGNvbnNvbGUuaW5mbyguLi5hcmdzKTtcbiAgfSxcbiAgd2FybiguLi5hcmdzKSB7XG4gICAgdGhpcy5zaG91bGRMb2coXCJ3YXJuXCIpICYmIGNvbnNvbGUud2FybiguLi5hcmdzKTtcbiAgfSxcbiAgZXJyb3IoLi4uYXJncykge1xuICAgIHRoaXMuc2hvdWxkTG9nKFwiZXJyb3JcIikgJiYgY29uc29sZS5lcnJvciguLi5hcmdzKTtcbiAgfSxcbiAgbGV2ZWw6IFwiaW5mb1wiXG59O1xuZnVuY3Rpb24gZ2V0TG9nZ2VyKCkge1xuICBpZiAoIWdsb2JhbFtsb2dnZXJLZXldKSB7XG4gICAgZ2xvYmFsW2xvZ2dlcktleV0gPSBfZGVmYXVsdExvZ2dlcjtcbiAgfVxuICByZXR1cm4gZ2xvYmFsW2xvZ2dlcktleV07XG59XG5jbGFzcyBMb2dnZXIge1xuICBkZWZhdWx0TG9nZ2VyID0gX2RlZmF1bHRMb2dnZXI7XG4gIGluaXQoZm4pIHtcbiAgICBnbG9iYWxbbG9nZ2VyS2V5XSA9IGZuO1xuICB9XG4gIGluZm8oLi4uYXJncykge1xuICAgIGdldExvZ2dlcigpLmluZm8uYXBwbHkoZ2V0TG9nZ2VyKCksIGFyZ3MpO1xuICB9XG4gIGRlYnVnKC4uLmFyZ3MpIHtcbiAgICBnZXRMb2dnZXIoKS5kZWJ1Zy5hcHBseShnZXRMb2dnZXIoKSwgYXJncyk7XG4gIH1cbiAgZXJyb3IoLi4uYXJncykge1xuICAgIGdldExvZ2dlcigpLmVycm9yLmFwcGx5KGdldExvZ2dlcigpLCBhcmdzKTtcbiAgfVxuICB3YXJuKC4uLmFyZ3MpIHtcbiAgICBnZXRMb2dnZXIoKS53YXJuLmFwcGx5KGdldExvZ2dlcigpLCBhcmdzKTtcbiAgfVxuICBzZXRMb2dMZXZlbChsZXZlbCkge1xuICAgIGdldExvZ2dlcigpLmxldmVsID0gbGV2ZWw7XG4gIH1cbiAgbG9nU3RydWN0dXJlZChtc2csIG1ldGFkYXRhKSB7XG4gICAgZ2V0TG9nZ2VyKCkuaW5mbyhtc2csIG1ldGFkYXRhKTtcbiAgfVxuICBsb2dTdHJ1Y3R1cmVkRXJyb3IobXNnLCBtZXRhZGF0YSkge1xuICAgIGdldExvZ2dlcigpLmVycm9yKG1zZywgbWV0YWRhdGEpO1xuICB9XG59XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKCk7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgbG9nZ2VyXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ2dpbmcuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/logging.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/logging.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\nconst LOG_LEVELS = [\"debug\", \"info\", \"warn\", \"error\"];\nconst loggerKey = \"__genkit_logger\";\nconst _defaultLogger = {\n  shouldLog(targetLevel) {\n    return LOG_LEVELS.indexOf(this.level) <= LOG_LEVELS.indexOf(targetLevel);\n  },\n  debug(...args) {\n    this.shouldLog(\"debug\") && console.debug(...args);\n  },\n  info(...args) {\n    this.shouldLog(\"info\") && console.info(...args);\n  },\n  warn(...args) {\n    this.shouldLog(\"warn\") && console.warn(...args);\n  },\n  error(...args) {\n    this.shouldLog(\"error\") && console.error(...args);\n  },\n  level: \"info\"\n};\nfunction getLogger() {\n  if (!global[loggerKey]) {\n    global[loggerKey] = _defaultLogger;\n  }\n  return global[loggerKey];\n}\nclass Logger {\n  defaultLogger = _defaultLogger;\n  init(fn) {\n    global[loggerKey] = fn;\n  }\n  info(...args) {\n    getLogger().info.apply(getLogger(), args);\n  }\n  debug(...args) {\n    getLogger().debug.apply(getLogger(), args);\n  }\n  error(...args) {\n    getLogger().error.apply(getLogger(), args);\n  }\n  warn(...args) {\n    getLogger().warn.apply(getLogger(), args);\n  }\n  setLogLevel(level) {\n    getLogger().level = level;\n  }\n  logStructured(msg, metadata) {\n    getLogger().info(msg, metadata);\n  }\n  logStructuredError(msg, metadata) {\n    getLogger().error(msg, metadata);\n  }\n}\nconst logger = new Logger();\n\n//# sourceMappingURL=logging.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL2xvZ2dpbmcubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0U7QUFDRiIsInNvdXJjZXMiOlsiL2hvbWUvdXNlci9zdHVkaW8vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvbG9nZ2luZy5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTE9HX0xFVkVMUyA9IFtcImRlYnVnXCIsIFwiaW5mb1wiLCBcIndhcm5cIiwgXCJlcnJvclwiXTtcbmNvbnN0IGxvZ2dlcktleSA9IFwiX19nZW5raXRfbG9nZ2VyXCI7XG5jb25zdCBfZGVmYXVsdExvZ2dlciA9IHtcbiAgc2hvdWxkTG9nKHRhcmdldExldmVsKSB7XG4gICAgcmV0dXJuIExPR19MRVZFTFMuaW5kZXhPZih0aGlzLmxldmVsKSA8PSBMT0dfTEVWRUxTLmluZGV4T2YodGFyZ2V0TGV2ZWwpO1xuICB9LFxuICBkZWJ1ZyguLi5hcmdzKSB7XG4gICAgdGhpcy5zaG91bGRMb2coXCJkZWJ1Z1wiKSAmJiBjb25zb2xlLmRlYnVnKC4uLmFyZ3MpO1xuICB9LFxuICBpbmZvKC4uLmFyZ3MpIHtcbiAgICB0aGlzLnNob3VsZExvZyhcImluZm9cIikgJiYgY29uc29sZS5pbmZvKC4uLmFyZ3MpO1xuICB9LFxuICB3YXJuKC4uLmFyZ3MpIHtcbiAgICB0aGlzLnNob3VsZExvZyhcIndhcm5cIikgJiYgY29uc29sZS53YXJuKC4uLmFyZ3MpO1xuICB9LFxuICBlcnJvciguLi5hcmdzKSB7XG4gICAgdGhpcy5zaG91bGRMb2coXCJlcnJvclwiKSAmJiBjb25zb2xlLmVycm9yKC4uLmFyZ3MpO1xuICB9LFxuICBsZXZlbDogXCJpbmZvXCJcbn07XG5mdW5jdGlvbiBnZXRMb2dnZXIoKSB7XG4gIGlmICghZ2xvYmFsW2xvZ2dlcktleV0pIHtcbiAgICBnbG9iYWxbbG9nZ2VyS2V5XSA9IF9kZWZhdWx0TG9nZ2VyO1xuICB9XG4gIHJldHVybiBnbG9iYWxbbG9nZ2VyS2V5XTtcbn1cbmNsYXNzIExvZ2dlciB7XG4gIGRlZmF1bHRMb2dnZXIgPSBfZGVmYXVsdExvZ2dlcjtcbiAgaW5pdChmbikge1xuICAgIGdsb2JhbFtsb2dnZXJLZXldID0gZm47XG4gIH1cbiAgaW5mbyguLi5hcmdzKSB7XG4gICAgZ2V0TG9nZ2VyKCkuaW5mby5hcHBseShnZXRMb2dnZXIoKSwgYXJncyk7XG4gIH1cbiAgZGVidWcoLi4uYXJncykge1xuICAgIGdldExvZ2dlcigpLmRlYnVnLmFwcGx5KGdldExvZ2dlcigpLCBhcmdzKTtcbiAgfVxuICBlcnJvciguLi5hcmdzKSB7XG4gICAgZ2V0TG9nZ2VyKCkuZXJyb3IuYXBwbHkoZ2V0TG9nZ2VyKCksIGFyZ3MpO1xuICB9XG4gIHdhcm4oLi4uYXJncykge1xuICAgIGdldExvZ2dlcigpLndhcm4uYXBwbHkoZ2V0TG9nZ2VyKCksIGFyZ3MpO1xuICB9XG4gIHNldExvZ0xldmVsKGxldmVsKSB7XG4gICAgZ2V0TG9nZ2VyKCkubGV2ZWwgPSBsZXZlbDtcbiAgfVxuICBsb2dTdHJ1Y3R1cmVkKG1zZywgbWV0YWRhdGEpIHtcbiAgICBnZXRMb2dnZXIoKS5pbmZvKG1zZywgbWV0YWRhdGEpO1xuICB9XG4gIGxvZ1N0cnVjdHVyZWRFcnJvcihtc2csIG1ldGFkYXRhKSB7XG4gICAgZ2V0TG9nZ2VyKCkuZXJyb3IobXNnLCBtZXRhZGF0YSk7XG4gIH1cbn1cbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoKTtcbmV4cG9ydCB7XG4gIGxvZ2dlclxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ2dpbmcubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/logging.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/plugin.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/plugin.js ***!
  \****************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar plugin_exports = {};\nmodule.exports = __toCommonJS(plugin_exports);\n//# sourceMappingURL=plugin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3BsdWdpbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvc3R1ZGlvL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3BsdWdpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgcGx1Z2luX2V4cG9ydHMgPSB7fTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHBsdWdpbl9leHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBsdWdpbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/plugin.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/reflection.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/reflection.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar reflection_exports = {};\n__export(reflection_exports, {\n  ReflectionServer: () => ReflectionServer,\n  RunActionResponseSchema: () => RunActionResponseSchema\n});\nmodule.exports = __toCommonJS(reflection_exports);\nvar import_express = __toESM(__webpack_require__(/*! express */ \"express\"));\nvar import_promises = __toESM(__webpack_require__(/*! fs/promises */ \"fs/promises\"));\nvar import_get_port = __toESM(__webpack_require__(/*! get-port */ \"(action-browser)/./node_modules/get-port/index.js\"));\nvar import_path = __toESM(__webpack_require__(/*! path */ \"path\"));\nvar z = __toESM(__webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/lib/index.js\"));\nvar import_action = __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\");\nvar import_index = __webpack_require__(/*! ./index.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/index.js\");\nvar import_logging = __webpack_require__(/*! ./logging.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nvar import_tracing = __webpack_require__(/*! ./tracing.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nconst RunActionResponseSchema = z.object({\n  result: z.unknown().optional(),\n  error: z.unknown().optional(),\n  telemetry: z.object({\n    traceId: z.string().optional()\n  }).optional()\n});\nclass ReflectionServer {\n  /** List of all running servers needed to be cleaned up on process exit. */\n  static RUNNING_SERVERS = [];\n  /** Registry instance to be used for API calls. */\n  registry;\n  /** Options for the reflection server. */\n  options;\n  /** Port the server is actually running on. This may differ from `options.port` if the original was occupied. Null if server is not running. */\n  port = null;\n  /** Express server instance. Null if server is not running. */\n  server = null;\n  /** Path to the runtime file. Null if server is not running. */\n  runtimeFilePath = null;\n  constructor(registry, options) {\n    this.registry = registry;\n    this.options = {\n      port: 3100,\n      bodyLimit: \"30mb\",\n      configuredEnvs: [\"dev\"],\n      ...options\n    };\n  }\n  /**\n   * Finds a free port to run the server on based on the original chosen port and environment.\n   */\n  async findPort() {\n    const chosenPort = this.options.port;\n    const freePort = await (0, import_get_port.default)({\n      port: (0, import_get_port.makeRange)(chosenPort, chosenPort + 100)\n    });\n    if (freePort !== chosenPort) {\n      import_logging.logger.warn(\n        `Port ${chosenPort} is already in use, using next available port ${freePort} instead.`\n      );\n    }\n    return freePort;\n  }\n  /**\n   * Starts the server.\n   *\n   * The server will be registered to be shut down on process exit.\n   */\n  async start() {\n    const server = (0, import_express.default)();\n    server.use(import_express.default.json({ limit: this.options.bodyLimit }));\n    server.use((req, res, next) => {\n      res.header(\"x-genkit-version\", import_index.GENKIT_VERSION);\n      next();\n    });\n    server.get(\"/api/__health\", async (_, response) => {\n      await this.registry.listActions();\n      response.status(200).send(\"OK\");\n    });\n    server.get(\"/api/__quitquitquit\", async (_, response) => {\n      import_logging.logger.debug(\"Received quitquitquit\");\n      response.status(200).send(\"OK\");\n      await this.stop();\n    });\n    server.get(\"/api/actions\", async (_, response, next) => {\n      import_logging.logger.debug(\"Fetching actions.\");\n      try {\n        const actions = await this.registry.listResolvableActions();\n        const convertedActions = {};\n        Object.keys(actions).forEach((key) => {\n          const action = actions[key];\n          convertedActions[key] = {\n            key,\n            name: action.name,\n            description: action.description,\n            metadata: action.metadata\n          };\n          if (action.inputSchema || action.inputJsonSchema) {\n            convertedActions[key].inputSchema = (0, import_schema.toJsonSchema)({\n              schema: action.inputSchema,\n              jsonSchema: action.inputJsonSchema\n            });\n          }\n          if (action.outputSchema || action.outputJsonSchema) {\n            convertedActions[key].outputSchema = (0, import_schema.toJsonSchema)({\n              schema: action.outputSchema,\n              jsonSchema: action.outputJsonSchema\n            });\n          }\n        });\n        response.send(convertedActions);\n      } catch (err) {\n        const { message, stack } = err;\n        next({ message, stack });\n      }\n    });\n    server.post(\"/api/runAction\", async (request, response, next) => {\n      const { key, input, context, telemetryLabels } = request.body;\n      const { stream } = request.query;\n      import_logging.logger.debug(`Running action \\`${key}\\` with stream=${stream}...`);\n      try {\n        const action = await this.registry.lookupAction(key);\n        if (!action) {\n          response.status(404).send(`action ${key} not found`);\n          return;\n        }\n        if (stream === \"true\") {\n          try {\n            const callback = (chunk) => {\n              response.write(JSON.stringify(chunk) + \"\\n\");\n            };\n            const result = await (0, import_action.runWithStreamingCallback)(\n              this.registry,\n              callback,\n              () => action.run(input, { context, onChunk: callback })\n            );\n            await (0, import_tracing.flushTracing)();\n            response.write(\n              JSON.stringify({\n                result: result.result,\n                telemetry: {\n                  traceId: result.telemetry.traceId\n                }\n              })\n            );\n            response.end();\n          } catch (err) {\n            const { message, stack } = err;\n            const errorResponse = {\n              code: import_action.StatusCodes.INTERNAL,\n              message,\n              details: {\n                stack\n              }\n            };\n            if (err.traceId) {\n              errorResponse.details.traceId = err.traceId;\n            }\n            response.write(\n              JSON.stringify({\n                error: errorResponse\n              })\n            );\n            response.end();\n          }\n        } else {\n          const result = await action.run(input, { context, telemetryLabels });\n          await (0, import_tracing.flushTracing)();\n          response.send({\n            result: result.result,\n            telemetry: {\n              traceId: result.telemetry.traceId\n            }\n          });\n        }\n      } catch (err) {\n        const { message, stack, traceId } = err;\n        next({ message, stack, traceId });\n      }\n    });\n    server.get(\"/api/envs\", async (_, response) => {\n      response.json(this.options.configuredEnvs);\n    });\n    server.post(\"/api/notify\", async (request, response) => {\n      const { telemetryServerUrl, reflectionApiSpecVersion } = request.body;\n      if (!process.env.GENKIT_TELEMETRY_SERVER) {\n        if (typeof telemetryServerUrl === \"string\") {\n          (0, import_tracing.setTelemetryServerUrl)(telemetryServerUrl);\n          import_logging.logger.debug(\n            `Connected to telemetry server on ${telemetryServerUrl}`\n          );\n        }\n      }\n      if (reflectionApiSpecVersion !== import_index.GENKIT_REFLECTION_API_SPEC_VERSION) {\n        if (!reflectionApiSpecVersion || reflectionApiSpecVersion < import_index.GENKIT_REFLECTION_API_SPEC_VERSION) {\n          import_logging.logger.warn(\n            \"WARNING: Genkit CLI version may be outdated. Please update `genkit-cli` to the latest version.\"\n          );\n        } else {\n          import_logging.logger.warn(\n            `Genkit CLI is newer than runtime library. Some feature may not be supported. Consider upgrading your runtime library version (debug info: expected ${import_index.GENKIT_REFLECTION_API_SPEC_VERSION}, got ${reflectionApiSpecVersion}).`\n          );\n        }\n      }\n      response.status(200).send(\"OK\");\n    });\n    server.use((err, req, res, next) => {\n      import_logging.logger.error(err.stack);\n      const error = err;\n      const { message, stack } = error;\n      const errorResponse = {\n        code: import_action.StatusCodes.INTERNAL,\n        message,\n        details: {\n          stack\n        }\n      };\n      if (err.traceId) {\n        errorResponse.details.traceId = err.traceId;\n      }\n      res.status(500).json(errorResponse);\n    });\n    this.port = await this.findPort();\n    this.server = server.listen(this.port, async () => {\n      import_logging.logger.debug(\n        `Reflection server (${process.pid}) running on http://localhost:${this.port}`\n      );\n      ReflectionServer.RUNNING_SERVERS.push(this);\n      await this.writeRuntimeFile();\n    });\n  }\n  /**\n   * Stops the server and removes it from the list of running servers to clean up on exit.\n   */\n  async stop() {\n    if (!this.server) {\n      return;\n    }\n    return new Promise(async (resolve, reject) => {\n      await this.cleanupRuntimeFile();\n      this.server.close(async (err) => {\n        if (err) {\n          import_logging.logger.error(\n            `Error shutting down reflection server on port ${this.port}: ${err}`\n          );\n          reject(err);\n        }\n        const index = ReflectionServer.RUNNING_SERVERS.indexOf(this);\n        if (index > -1) {\n          ReflectionServer.RUNNING_SERVERS.splice(index, 1);\n        }\n        import_logging.logger.debug(\n          `Reflection server on port ${this.port} has successfully shut down.`\n        );\n        this.port = null;\n        this.server = null;\n        resolve();\n      });\n    });\n  }\n  /**\n   * Writes the runtime file to the project root.\n   */\n  async writeRuntimeFile() {\n    try {\n      const rootDir = await findProjectRoot();\n      const runtimesDir = import_path.default.join(rootDir, \".genkit\", \"runtimes\");\n      const date = /* @__PURE__ */ new Date();\n      const time = date.getTime();\n      const timestamp = date.toISOString();\n      this.runtimeFilePath = import_path.default.join(\n        runtimesDir,\n        `${process.pid}-${time}.json`\n      );\n      const fileContent = JSON.stringify(\n        {\n          id: process.env.GENKIT_RUNTIME_ID || process.pid.toString(),\n          pid: process.pid,\n          reflectionServerUrl: `http://localhost:${this.port}`,\n          timestamp,\n          genkitVersion: `nodejs/${import_index.GENKIT_VERSION}`,\n          reflectionApiSpecVersion: import_index.GENKIT_REFLECTION_API_SPEC_VERSION\n        },\n        null,\n        2\n      );\n      await import_promises.default.mkdir(runtimesDir, { recursive: true });\n      await import_promises.default.writeFile(this.runtimeFilePath, fileContent, \"utf8\");\n      import_logging.logger.debug(`Runtime file written: ${this.runtimeFilePath}`);\n    } catch (error) {\n      import_logging.logger.error(`Error writing runtime file: ${error}`);\n    }\n  }\n  /**\n   * Cleans up the port file.\n   */\n  async cleanupRuntimeFile() {\n    if (!this.runtimeFilePath) {\n      return;\n    }\n    try {\n      const fileContent = await import_promises.default.readFile(this.runtimeFilePath, \"utf8\");\n      const data = JSON.parse(fileContent);\n      if (data.pid === process.pid) {\n        await import_promises.default.unlink(this.runtimeFilePath);\n        import_logging.logger.debug(`Runtime file cleaned up: ${this.runtimeFilePath}`);\n      }\n    } catch (error) {\n      import_logging.logger.error(`Error cleaning up runtime file: ${error}`);\n    }\n  }\n  /**\n   * Stops all running reflection servers.\n   */\n  static async stopAll() {\n    return Promise.all(\n      ReflectionServer.RUNNING_SERVERS.map((server) => server.stop())\n    );\n  }\n}\nasync function findProjectRoot() {\n  let currentDir = process.cwd();\n  while (currentDir !== import_path.default.parse(currentDir).root) {\n    const packageJsonPath = import_path.default.join(currentDir, \"package.json\");\n    try {\n      await import_promises.default.access(packageJsonPath);\n      return currentDir;\n    } catch {\n      currentDir = import_path.default.dirname(currentDir);\n    }\n  }\n  throw new Error(\"Could not find project root (package.json not found)\");\n}\nif ( true && \"hot\" in module) {\n  module.hot.accept();\n  module.hot.dispose(async () => {\n    import_logging.logger.debug(\"Cleaning up reflection server(s) before module reload...\");\n    await ReflectionServer.stopAll();\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=reflection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/reflection.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js":
/*!******************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/registry.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar registry_exports = {};\n__export(registry_exports, {\n  AsyncStore: () => AsyncStore,\n  Registry: () => Registry,\n  parseRegistryKey: () => parseRegistryKey\n});\nmodule.exports = __toCommonJS(registry_exports);\nvar import_dotprompt = __webpack_require__(/*! dotprompt */ \"(action-browser)/./node_modules/dotprompt/dist/index.js\");\nvar import_node_async_hooks = __webpack_require__(/*! node:async_hooks */ \"node:async_hooks\");\nvar import_action = __webpack_require__(/*! ./action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/action.js\");\nvar import_background_action = __webpack_require__(/*! ./background-action.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/background-action.js\");\nvar import_error = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\nvar import_logging = __webpack_require__(/*! ./logging.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_schema = __webpack_require__(/*! ./schema.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\");\nfunction parsePluginName(registryKey) {\n  const tokens = registryKey.split(\"/\");\n  if (tokens.length >= 4) {\n    return tokens[2];\n  }\n  return void 0;\n}\nfunction parseRegistryKey(registryKey) {\n  const tokens = registryKey.split(\"/\");\n  if (tokens.length < 3) {\n    return void 0;\n  }\n  if (tokens.length >= 4) {\n    return {\n      actionType: tokens[1],\n      pluginName: tokens[2],\n      actionName: tokens.slice(3).join(\"/\")\n    };\n  }\n  return {\n    actionType: tokens[1],\n    actionName: tokens[2]\n  };\n}\nclass Registry {\n  actionsById = {};\n  pluginsByName = {};\n  schemasByName = {};\n  valueByTypeAndName = {};\n  allPluginsInitialized = false;\n  apiStability = \"stable\";\n  asyncStore;\n  dotprompt;\n  parent;\n  /** Additional runtime context data for flows and tools. */\n  context;\n  constructor(parent) {\n    if (parent) {\n      this.parent = parent;\n      this.apiStability = parent?.apiStability;\n      this.asyncStore = parent.asyncStore;\n      this.dotprompt = parent.dotprompt;\n    } else {\n      this.asyncStore = new AsyncStore();\n      this.dotprompt = new import_dotprompt.Dotprompt({\n        schemaResolver: async (name) => {\n          const resolvedSchema = await this.lookupSchema(name);\n          if (!resolvedSchema) {\n            throw new import_error.GenkitError({\n              message: `Schema '${name}' not found`,\n              status: \"NOT_FOUND\"\n            });\n          }\n          return (0, import_schema.toJsonSchema)(resolvedSchema);\n        }\n      });\n    }\n  }\n  /**\n   * Creates a new registry overlaid onto the provided registry.\n   * @param parent The parent registry.\n   * @returns The new overlaid registry.\n   */\n  static withParent(parent) {\n    return new Registry(parent);\n  }\n  /**\n   * Looks up an action in the registry.\n   * @param key The key of the action to lookup.\n   * @returns The action.\n   */\n  async lookupAction(key) {\n    const parsedKey = parseRegistryKey(key);\n    if (parsedKey?.pluginName && this.pluginsByName[parsedKey.pluginName]) {\n      await this.initializePlugin(parsedKey.pluginName);\n      if (!this.actionsById[key]) {\n        await this.resolvePluginAction(\n          parsedKey.pluginName,\n          parsedKey.actionType,\n          parsedKey.actionName\n        );\n      }\n    }\n    return await this.actionsById[key] || this.parent?.lookupAction(key);\n  }\n  /**\n   * Looks up a background action from the registry.\n   * @param key The key of the action to lookup.\n   * @returns The action.\n   */\n  async lookupBackgroundAction(key) {\n    return (0, import_background_action.lookupBackgroundAction)(this, key);\n  }\n  /**\n   * Registers an action in the registry.\n   * @param type The type of the action to register.\n   * @param action The action to register.\n   */\n  registerAction(type, action) {\n    if (type !== action.__action.actionType) {\n      throw new import_error.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: `action type (${type}) does not match type on action (${action.__action.actionType})`\n      });\n    }\n    const key = `/${type}/${action.__action.name}`;\n    import_logging.logger.debug(`registering ${key}`);\n    if (this.actionsById.hasOwnProperty(key)) {\n      import_logging.logger.warn(\n        `WARNING: ${key} already has an entry in the registry. Overwriting.`\n      );\n    }\n    this.actionsById[key] = action;\n  }\n  /**\n   * Registers an action promise in the registry.\n   */\n  registerActionAsync(type, name, action) {\n    const key = `/${type}/${name}`;\n    import_logging.logger.debug(`registering ${key} (async)`);\n    if (this.actionsById.hasOwnProperty(key)) {\n      import_logging.logger.warn(\n        `WARNING: ${key} already has an entry in the registry. Overwriting.`\n      );\n    }\n    this.actionsById[key] = action;\n  }\n  /**\n   * Returns all actions that have been registered in the registry.\n   * @returns All actions in the registry as a map of <key, action>.\n   */\n  async listActions() {\n    await this.initializeAllPlugins();\n    const actions = {};\n    await Promise.all(\n      Object.entries(this.actionsById).map(async ([key, action]) => {\n        actions[key] = await action;\n      })\n    );\n    return {\n      ...await this.parent?.listActions(),\n      ...actions\n    };\n  }\n  /**\n   * Returns all actions that are resolvable by plugins as well as those that are already\n   * in the registry.\n   *\n   * NOTE: this method should not be used in latency sensitive code paths.\n   * It may rely on \"admin\" API calls such as \"list models\", which may cause increased cold start latency.\n   *\n   * @returns All resolvable action metadata as a map of <key, action metadata>.\n   */\n  async listResolvableActions() {\n    const resolvableActions = {};\n    await Promise.all(\n      Object.entries(this.pluginsByName).map(async ([pluginName, plugin]) => {\n        if (plugin.listActions) {\n          try {\n            (await plugin.listActions()).forEach((meta) => {\n              if (!meta.name) {\n                throw new import_error.GenkitError({\n                  status: \"INVALID_ARGUMENT\",\n                  message: `Invalid metadata when listing actions from ${pluginName} - name required`\n                });\n              }\n              if (!meta.actionType) {\n                throw new import_error.GenkitError({\n                  status: \"INVALID_ARGUMENT\",\n                  message: `Invalid metadata when listing actions from ${pluginName} - actionType required`\n                });\n              }\n              resolvableActions[`/${meta.actionType}/${meta.name}`] = meta;\n            });\n          } catch (e) {\n            import_logging.logger.error(`Error listing actions for ${pluginName}\n`, e);\n          }\n        }\n      })\n    );\n    for (const [key, action] of Object.entries(await this.listActions())) {\n      resolvableActions[key] = action.__action;\n    }\n    return {\n      ...await this.parent?.listResolvableActions(),\n      ...resolvableActions\n    };\n  }\n  /**\n   * Initializes all plugins in the registry.\n   */\n  async initializeAllPlugins() {\n    if (this.allPluginsInitialized) {\n      return;\n    }\n    for (const pluginName of Object.keys(this.pluginsByName)) {\n      await this.initializePlugin(pluginName);\n    }\n    this.allPluginsInitialized = true;\n  }\n  /**\n   * Registers a plugin provider. This plugin must be initialized before it can be used by calling {@link initializePlugin} or {@link initializeAllPlugins}.\n   * @param name The name of the plugin to register.\n   * @param provider The plugin provider.\n   */\n  registerPluginProvider(name, provider) {\n    if (this.pluginsByName[name]) {\n      throw new Error(`Plugin ${name} already registered`);\n    }\n    this.allPluginsInitialized = false;\n    let cached;\n    let isInitialized = false;\n    this.pluginsByName[name] = {\n      name: provider.name,\n      initializer: () => {\n        if (!isInitialized) {\n          cached = provider.initializer();\n          isInitialized = true;\n        }\n        return cached;\n      },\n      resolver: async (actionType, actionName) => {\n        if (provider.resolver) {\n          await provider.resolver(actionType, actionName);\n        }\n      },\n      listActions: async () => {\n        if (provider.listActions) {\n          return await provider.listActions();\n        }\n        return [];\n      }\n    };\n  }\n  /**\n   * Looks up a plugin.\n   * @param name The name of the plugin to lookup.\n   * @returns The plugin provider.\n   */\n  lookupPlugin(name) {\n    return this.pluginsByName[name] || this.parent?.lookupPlugin(name);\n  }\n  /**\n   * Resolves a new Action dynamically by registering it.\n   * @param pluginName The name of the plugin\n   * @param actionType The type of the action\n   * @param actionName The name of the action\n   * @returns\n   */\n  async resolvePluginAction(pluginName, actionType, actionName) {\n    const plugin = this.pluginsByName[pluginName];\n    if (plugin) {\n      return await (0, import_action.runOutsideActionRuntimeContext)(this, async () => {\n        if (plugin.resolver) {\n          await plugin.resolver(actionType, actionName);\n        }\n      });\n    }\n  }\n  /**\n   * Initializes a plugin already registered with {@link registerPluginProvider}.\n   * @param name The name of the plugin to initialize.\n   * @returns The plugin.\n   */\n  async initializePlugin(name) {\n    if (this.pluginsByName[name]) {\n      return await (0, import_action.runOutsideActionRuntimeContext)(\n        this,\n        () => this.pluginsByName[name].initializer()\n      );\n    }\n  }\n  /**\n   * Registers a schema.\n   * @param name The name of the schema to register.\n   * @param data The schema to register (either a Zod schema or a JSON schema).\n   */\n  registerSchema(name, data) {\n    if (this.schemasByName[name]) {\n      throw new Error(`Schema ${name} already registered`);\n    }\n    this.schemasByName[name] = data;\n  }\n  registerValue(type, name, value) {\n    if (!this.valueByTypeAndName[type]) {\n      this.valueByTypeAndName[type] = {};\n    }\n    this.valueByTypeAndName[type][name] = value;\n  }\n  async lookupValue(type, key) {\n    const pluginName = parsePluginName(key);\n    if (!this.valueByTypeAndName[type]?.[key] && pluginName) {\n      await this.initializePlugin(pluginName);\n    }\n    return this.valueByTypeAndName[type]?.[key] || this.parent?.lookupValue(type, key);\n  }\n  async listValues(type) {\n    await this.initializeAllPlugins();\n    return {\n      ...await this.parent?.listValues(type) || {},\n      ...this.valueByTypeAndName[type] || {}\n    };\n  }\n  /**\n   * Looks up a schema.\n   * @param name The name of the schema to lookup.\n   * @returns The schema.\n   */\n  lookupSchema(name) {\n    return this.schemasByName[name] || this.parent?.lookupSchema(name);\n  }\n}\nclass AsyncStore {\n  asls = {};\n  getStore(key) {\n    return this.asls[key]?.getStore();\n  }\n  run(key, store, callback) {\n    if (!this.asls[key]) {\n      this.asls[key] = new import_node_async_hooks.AsyncLocalStorage();\n    }\n    return this.asls[key].run(store, callback);\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=registry.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/registry.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js":
/*!****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/schema.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar schema_exports = {};\n__export(schema_exports, {\n  ValidationError: () => ValidationError,\n  defineJsonSchema: () => defineJsonSchema,\n  defineSchema: () => defineSchema,\n  parseSchema: () => parseSchema,\n  toJsonSchema: () => toJsonSchema,\n  validateSchema: () => validateSchema,\n  z: () => import_zod.z\n});\nmodule.exports = __toCommonJS(schema_exports);\nvar import_ajv = __toESM(__webpack_require__(/*! ajv */ \"(action-browser)/./node_modules/ajv/dist/ajv.js\"));\nvar import_ajv_formats = __toESM(__webpack_require__(/*! ajv-formats */ \"(action-browser)/./node_modules/ajv-formats/dist/index.js\"));\nvar import_zod = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/lib/index.js\");\nvar import_zod_to_json_schema = __toESM(__webpack_require__(/*! zod-to-json-schema */ \"(action-browser)/./node_modules/zod-to-json-schema/dist/cjs/index.js\"));\nvar import_error = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\nconst ajv = new import_ajv.default();\n(0, import_ajv_formats.default)(ajv);\nconst jsonSchemas = /* @__PURE__ */ new WeakMap();\nconst validators = /* @__PURE__ */ new WeakMap();\nclass ValidationError extends import_error.GenkitError {\n  constructor({\n    data,\n    errors,\n    schema\n  }) {\n    super({\n      status: \"INVALID_ARGUMENT\",\n      message: `Schema validation failed. Parse Errors:\n\n${errors.map((e) => `- ${e.path}: ${e.message}`).join(\"\\n\")}\n\nProvided data:\n\n${JSON.stringify(data, null, 2)}\n\nRequired JSON schema:\n\n${JSON.stringify(schema, null, 2)}`,\n      detail: { errors, schema }\n    });\n  }\n}\nfunction toJsonSchema({\n  jsonSchema,\n  schema\n}) {\n  if (!jsonSchema && !schema) return null;\n  if (jsonSchema) return jsonSchema;\n  if (jsonSchemas.has(schema)) return jsonSchemas.get(schema);\n  const outSchema = (0, import_zod_to_json_schema.default)(schema, {\n    $refStrategy: \"none\",\n    removeAdditionalStrategy: \"strict\"\n  });\n  jsonSchemas.set(schema, outSchema);\n  return outSchema;\n}\nfunction toErrorDetail(error) {\n  return {\n    path: error.instancePath.substring(1).replace(/\\//g, \".\") || \"(root)\",\n    message: error.message\n  };\n}\nfunction validateSchema(data, options) {\n  const toValidate = toJsonSchema(options);\n  if (!toValidate) {\n    return { valid: true, schema: toValidate };\n  }\n  const validator = validators.get(toValidate) || ajv.compile(toValidate);\n  const valid = validator(data);\n  const errors = validator.errors?.map((e) => e);\n  return { valid, errors: errors?.map(toErrorDetail), schema: toValidate };\n}\nfunction parseSchema(data, options) {\n  const { valid, errors, schema } = validateSchema(data, options);\n  if (!valid) throw new ValidationError({ data, errors, schema });\n  return data;\n}\nfunction defineSchema(registry, name, schema) {\n  registry.registerSchema(name, { schema });\n  return schema;\n}\nfunction defineJsonSchema(registry, name, jsonSchema) {\n  registry.registerSchema(name, { jsonSchema });\n  return jsonSchema;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=schema.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3NjaGVtYS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG1HQUFtRztBQUNuRztBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSw4QkFBOEI7QUFDdkc7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSx5QkFBeUIsbUJBQU8sQ0FBQyw0REFBSztBQUN0QyxpQ0FBaUMsbUJBQU8sQ0FBQyw4RUFBYTtBQUN0RCxpQkFBaUIsbUJBQU8sQ0FBQyw2REFBSztBQUM5Qix3Q0FBd0MsbUJBQU8sQ0FBQyxnR0FBb0I7QUFDcEUsbUJBQW1CLG1CQUFPLENBQUMsZ0ZBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQSxFQUFFLHVCQUF1QixPQUFPLElBQUksVUFBVTs7QUFFOUM7O0FBRUEsRUFBRTs7QUFFRjs7QUFFQSxFQUFFLGdDQUFnQztBQUNsQyxnQkFBZ0I7QUFDaEIsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsVUFBVSx3QkFBd0I7QUFDbEMsMENBQTBDLHNCQUFzQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsUUFBUTtBQUMxQztBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsWUFBWTtBQUM5QztBQUNBO0FBQ0E7QUFDQSxNQUFNLENBUUw7QUFDRCIsInNvdXJjZXMiOlsiL2hvbWUvdXNlci9zdHVkaW8vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvc2NoZW1hLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2dldFByb3RvT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvRVNNID0gKG1vZCwgaXNOb2RlTW9kZSwgdGFyZ2V0KSA9PiAodGFyZ2V0ID0gbW9kICE9IG51bGwgPyBfX2NyZWF0ZShfX2dldFByb3RvT2YobW9kKSkgOiB7fSwgX19jb3B5UHJvcHMoXG4gIC8vIElmIHRoZSBpbXBvcnRlciBpcyBpbiBub2RlIGNvbXBhdGliaWxpdHkgbW9kZSBvciB0aGlzIGlzIG5vdCBhbiBFU01cbiAgLy8gZmlsZSB0aGF0IGhhcyBiZWVuIGNvbnZlcnRlZCB0byBhIENvbW1vbkpTIGZpbGUgdXNpbmcgYSBCYWJlbC1cbiAgLy8gY29tcGF0aWJsZSB0cmFuc2Zvcm0gKGkuZS4gXCJfX2VzTW9kdWxlXCIgaGFzIG5vdCBiZWVuIHNldCksIHRoZW4gc2V0XG4gIC8vIFwiZGVmYXVsdFwiIHRvIHRoZSBDb21tb25KUyBcIm1vZHVsZS5leHBvcnRzXCIgZm9yIG5vZGUgY29tcGF0aWJpbGl0eS5cbiAgaXNOb2RlTW9kZSB8fCAhbW9kIHx8ICFtb2QuX19lc01vZHVsZSA/IF9fZGVmUHJvcCh0YXJnZXQsIFwiZGVmYXVsdFwiLCB7IHZhbHVlOiBtb2QsIGVudW1lcmFibGU6IHRydWUgfSkgOiB0YXJnZXQsXG4gIG1vZFxuKSk7XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBzY2hlbWFfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc2NoZW1hX2V4cG9ydHMsIHtcbiAgVmFsaWRhdGlvbkVycm9yOiAoKSA9PiBWYWxpZGF0aW9uRXJyb3IsXG4gIGRlZmluZUpzb25TY2hlbWE6ICgpID0+IGRlZmluZUpzb25TY2hlbWEsXG4gIGRlZmluZVNjaGVtYTogKCkgPT4gZGVmaW5lU2NoZW1hLFxuICBwYXJzZVNjaGVtYTogKCkgPT4gcGFyc2VTY2hlbWEsXG4gIHRvSnNvblNjaGVtYTogKCkgPT4gdG9Kc29uU2NoZW1hLFxuICB2YWxpZGF0ZVNjaGVtYTogKCkgPT4gdmFsaWRhdGVTY2hlbWEsXG4gIHo6ICgpID0+IGltcG9ydF96b2QuelxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzY2hlbWFfZXhwb3J0cyk7XG52YXIgaW1wb3J0X2FqdiA9IF9fdG9FU00ocmVxdWlyZShcImFqdlwiKSk7XG52YXIgaW1wb3J0X2Fqdl9mb3JtYXRzID0gX190b0VTTShyZXF1aXJlKFwiYWp2LWZvcm1hdHNcIikpO1xudmFyIGltcG9ydF96b2QgPSByZXF1aXJlKFwiem9kXCIpO1xudmFyIGltcG9ydF96b2RfdG9fanNvbl9zY2hlbWEgPSBfX3RvRVNNKHJlcXVpcmUoXCJ6b2QtdG8tanNvbi1zY2hlbWFcIikpO1xudmFyIGltcG9ydF9lcnJvciA9IHJlcXVpcmUoXCIuL2Vycm9yLmpzXCIpO1xuY29uc3QgYWp2ID0gbmV3IGltcG9ydF9hanYuZGVmYXVsdCgpO1xuKDAsIGltcG9ydF9hanZfZm9ybWF0cy5kZWZhdWx0KShhanYpO1xuY29uc3QganNvblNjaGVtYXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHZhbGlkYXRvcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmNsYXNzIFZhbGlkYXRpb25FcnJvciBleHRlbmRzIGltcG9ydF9lcnJvci5HZW5raXRFcnJvciB7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICBkYXRhLFxuICAgIGVycm9ycyxcbiAgICBzY2hlbWFcbiAgfSkge1xuICAgIHN1cGVyKHtcbiAgICAgIHN0YXR1czogXCJJTlZBTElEX0FSR1VNRU5UXCIsXG4gICAgICBtZXNzYWdlOiBgU2NoZW1hIHZhbGlkYXRpb24gZmFpbGVkLiBQYXJzZSBFcnJvcnM6XG5cbiR7ZXJyb3JzLm1hcCgoZSkgPT4gYC0gJHtlLnBhdGh9OiAke2UubWVzc2FnZX1gKS5qb2luKFwiXFxuXCIpfVxuXG5Qcm92aWRlZCBkYXRhOlxuXG4ke0pTT04uc3RyaW5naWZ5KGRhdGEsIG51bGwsIDIpfVxuXG5SZXF1aXJlZCBKU09OIHNjaGVtYTpcblxuJHtKU09OLnN0cmluZ2lmeShzY2hlbWEsIG51bGwsIDIpfWAsXG4gICAgICBkZXRhaWw6IHsgZXJyb3JzLCBzY2hlbWEgfVxuICAgIH0pO1xuICB9XG59XG5mdW5jdGlvbiB0b0pzb25TY2hlbWEoe1xuICBqc29uU2NoZW1hLFxuICBzY2hlbWFcbn0pIHtcbiAgaWYgKCFqc29uU2NoZW1hICYmICFzY2hlbWEpIHJldHVybiBudWxsO1xuICBpZiAoanNvblNjaGVtYSkgcmV0dXJuIGpzb25TY2hlbWE7XG4gIGlmIChqc29uU2NoZW1hcy5oYXMoc2NoZW1hKSkgcmV0dXJuIGpzb25TY2hlbWFzLmdldChzY2hlbWEpO1xuICBjb25zdCBvdXRTY2hlbWEgPSAoMCwgaW1wb3J0X3pvZF90b19qc29uX3NjaGVtYS5kZWZhdWx0KShzY2hlbWEsIHtcbiAgICAkcmVmU3RyYXRlZ3k6IFwibm9uZVwiLFxuICAgIHJlbW92ZUFkZGl0aW9uYWxTdHJhdGVneTogXCJzdHJpY3RcIlxuICB9KTtcbiAganNvblNjaGVtYXMuc2V0KHNjaGVtYSwgb3V0U2NoZW1hKTtcbiAgcmV0dXJuIG91dFNjaGVtYTtcbn1cbmZ1bmN0aW9uIHRvRXJyb3JEZXRhaWwoZXJyb3IpIHtcbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBlcnJvci5pbnN0YW5jZVBhdGguc3Vic3RyaW5nKDEpLnJlcGxhY2UoL1xcLy9nLCBcIi5cIikgfHwgXCIocm9vdClcIixcbiAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlXG4gIH07XG59XG5mdW5jdGlvbiB2YWxpZGF0ZVNjaGVtYShkYXRhLCBvcHRpb25zKSB7XG4gIGNvbnN0IHRvVmFsaWRhdGUgPSB0b0pzb25TY2hlbWEob3B0aW9ucyk7XG4gIGlmICghdG9WYWxpZGF0ZSkge1xuICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBzY2hlbWE6IHRvVmFsaWRhdGUgfTtcbiAgfVxuICBjb25zdCB2YWxpZGF0b3IgPSB2YWxpZGF0b3JzLmdldCh0b1ZhbGlkYXRlKSB8fCBhanYuY29tcGlsZSh0b1ZhbGlkYXRlKTtcbiAgY29uc3QgdmFsaWQgPSB2YWxpZGF0b3IoZGF0YSk7XG4gIGNvbnN0IGVycm9ycyA9IHZhbGlkYXRvci5lcnJvcnM/Lm1hcCgoZSkgPT4gZSk7XG4gIHJldHVybiB7IHZhbGlkLCBlcnJvcnM6IGVycm9ycz8ubWFwKHRvRXJyb3JEZXRhaWwpLCBzY2hlbWE6IHRvVmFsaWRhdGUgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlU2NoZW1hKGRhdGEsIG9wdGlvbnMpIHtcbiAgY29uc3QgeyB2YWxpZCwgZXJyb3JzLCBzY2hlbWEgfSA9IHZhbGlkYXRlU2NoZW1hKGRhdGEsIG9wdGlvbnMpO1xuICBpZiAoIXZhbGlkKSB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKHsgZGF0YSwgZXJyb3JzLCBzY2hlbWEgfSk7XG4gIHJldHVybiBkYXRhO1xufVxuZnVuY3Rpb24gZGVmaW5lU2NoZW1hKHJlZ2lzdHJ5LCBuYW1lLCBzY2hlbWEpIHtcbiAgcmVnaXN0cnkucmVnaXN0ZXJTY2hlbWEobmFtZSwgeyBzY2hlbWEgfSk7XG4gIHJldHVybiBzY2hlbWE7XG59XG5mdW5jdGlvbiBkZWZpbmVKc29uU2NoZW1hKHJlZ2lzdHJ5LCBuYW1lLCBqc29uU2NoZW1hKSB7XG4gIHJlZ2lzdHJ5LnJlZ2lzdGVyU2NoZW1hKG5hbWUsIHsganNvblNjaGVtYSB9KTtcbiAgcmV0dXJuIGpzb25TY2hlbWE7XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgVmFsaWRhdGlvbkVycm9yLFxuICBkZWZpbmVKc29uU2NoZW1hLFxuICBkZWZpbmVTY2hlbWEsXG4gIHBhcnNlU2NoZW1hLFxuICB0b0pzb25TY2hlbWEsXG4gIHZhbGlkYXRlU2NoZW1hLFxuICB6XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVtYS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/schema.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/schema.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/schema.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ValidationError: () => (/* binding */ ValidationError),\n/* harmony export */   defineJsonSchema: () => (/* binding */ defineJsonSchema),\n/* harmony export */   defineSchema: () => (/* binding */ defineSchema),\n/* harmony export */   parseSchema: () => (/* binding */ parseSchema),\n/* harmony export */   toJsonSchema: () => (/* binding */ toJsonSchema),\n/* harmony export */   validateSchema: () => (/* binding */ validateSchema),\n/* harmony export */   z: () => (/* reexport safe */ zod__WEBPACK_IMPORTED_MODULE_4__.z)\n/* harmony export */ });\n/* harmony import */ var ajv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ajv */ \"(action-browser)/./node_modules/ajv/dist/ajv.js\");\n/* harmony import */ var ajv_formats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ajv-formats */ \"(action-browser)/./node_modules/ajv-formats/dist/index.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod-to-json-schema */ \"(action-browser)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var _error_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./error.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/error.js\");\n\n\n\n\n\nconst ajv = new ajv__WEBPACK_IMPORTED_MODULE_0__();\najv_formats__WEBPACK_IMPORTED_MODULE_1__(ajv);\nconst jsonSchemas = /* @__PURE__ */ new WeakMap();\nconst validators = /* @__PURE__ */ new WeakMap();\nclass ValidationError extends _error_js__WEBPACK_IMPORTED_MODULE_3__.GenkitError {\n  constructor({\n    data,\n    errors,\n    schema\n  }) {\n    super({\n      status: \"INVALID_ARGUMENT\",\n      message: `Schema validation failed. Parse Errors:\n\n${errors.map((e) => `- ${e.path}: ${e.message}`).join(\"\\n\")}\n\nProvided data:\n\n${JSON.stringify(data, null, 2)}\n\nRequired JSON schema:\n\n${JSON.stringify(schema, null, 2)}`,\n      detail: { errors, schema }\n    });\n  }\n}\nfunction toJsonSchema({\n  jsonSchema,\n  schema\n}) {\n  if (!jsonSchema && !schema) return null;\n  if (jsonSchema) return jsonSchema;\n  if (jsonSchemas.has(schema)) return jsonSchemas.get(schema);\n  const outSchema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(schema, {\n    $refStrategy: \"none\",\n    removeAdditionalStrategy: \"strict\"\n  });\n  jsonSchemas.set(schema, outSchema);\n  return outSchema;\n}\nfunction toErrorDetail(error) {\n  return {\n    path: error.instancePath.substring(1).replace(/\\//g, \".\") || \"(root)\",\n    message: error.message\n  };\n}\nfunction validateSchema(data, options) {\n  const toValidate = toJsonSchema(options);\n  if (!toValidate) {\n    return { valid: true, schema: toValidate };\n  }\n  const validator = validators.get(toValidate) || ajv.compile(toValidate);\n  const valid = validator(data);\n  const errors = validator.errors?.map((e) => e);\n  return { valid, errors: errors?.map(toErrorDetail), schema: toValidate };\n}\nfunction parseSchema(data, options) {\n  const { valid, errors, schema } = validateSchema(data, options);\n  if (!valid) throw new ValidationError({ data, errors, schema });\n  return data;\n}\nfunction defineSchema(registry, name, schema) {\n  registry.registerSchema(name, { schema });\n  return schema;\n}\nfunction defineJsonSchema(registry, name, jsonSchema) {\n  registry.registerSchema(name, { jsonSchema });\n  return jsonSchema;\n}\n\n//# sourceMappingURL=schema.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3NjaGVtYS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNCO0FBQ2U7QUFDYjtBQUN5QjtBQUNSO0FBQ3pDLGdCQUFnQixnQ0FBRztBQUNuQix3Q0FBVTtBQUNWO0FBQ0E7QUFDQSw4QkFBOEIsa0RBQVc7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBLEVBQUUsdUJBQXVCLE9BQU8sSUFBSSxVQUFVOztBQUU5Qzs7QUFFQSxFQUFFOztBQUVGOztBQUVBLEVBQUUsZ0NBQWdDO0FBQ2xDLGdCQUFnQjtBQUNoQixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsOERBQWU7QUFDbkM7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFVBQVUsd0JBQXdCO0FBQ2xDLDBDQUEwQyxzQkFBc0I7QUFDaEU7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLFFBQVE7QUFDMUM7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLFlBQVk7QUFDOUM7QUFDQTtBQVNFO0FBQ0YiLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvc3R1ZGlvL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3NjaGVtYS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFqdiBmcm9tIFwiYWp2XCI7XG5pbXBvcnQgYWRkRm9ybWF0cyBmcm9tIFwiYWp2LWZvcm1hdHNcIjtcbmltcG9ydCB7IHogfSBmcm9tIFwiem9kXCI7XG5pbXBvcnQgem9kVG9Kc29uU2NoZW1hIGZyb20gXCJ6b2QtdG8tanNvbi1zY2hlbWFcIjtcbmltcG9ydCB7IEdlbmtpdEVycm9yIH0gZnJvbSBcIi4vZXJyb3IuanNcIjtcbmNvbnN0IGFqdiA9IG5ldyBBanYoKTtcbmFkZEZvcm1hdHMoYWp2KTtcbmNvbnN0IGpzb25TY2hlbWFzID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG5jb25zdCB2YWxpZGF0b3JzID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG5jbGFzcyBWYWxpZGF0aW9uRXJyb3IgZXh0ZW5kcyBHZW5raXRFcnJvciB7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICBkYXRhLFxuICAgIGVycm9ycyxcbiAgICBzY2hlbWFcbiAgfSkge1xuICAgIHN1cGVyKHtcbiAgICAgIHN0YXR1czogXCJJTlZBTElEX0FSR1VNRU5UXCIsXG4gICAgICBtZXNzYWdlOiBgU2NoZW1hIHZhbGlkYXRpb24gZmFpbGVkLiBQYXJzZSBFcnJvcnM6XG5cbiR7ZXJyb3JzLm1hcCgoZSkgPT4gYC0gJHtlLnBhdGh9OiAke2UubWVzc2FnZX1gKS5qb2luKFwiXFxuXCIpfVxuXG5Qcm92aWRlZCBkYXRhOlxuXG4ke0pTT04uc3RyaW5naWZ5KGRhdGEsIG51bGwsIDIpfVxuXG5SZXF1aXJlZCBKU09OIHNjaGVtYTpcblxuJHtKU09OLnN0cmluZ2lmeShzY2hlbWEsIG51bGwsIDIpfWAsXG4gICAgICBkZXRhaWw6IHsgZXJyb3JzLCBzY2hlbWEgfVxuICAgIH0pO1xuICB9XG59XG5mdW5jdGlvbiB0b0pzb25TY2hlbWEoe1xuICBqc29uU2NoZW1hLFxuICBzY2hlbWFcbn0pIHtcbiAgaWYgKCFqc29uU2NoZW1hICYmICFzY2hlbWEpIHJldHVybiBudWxsO1xuICBpZiAoanNvblNjaGVtYSkgcmV0dXJuIGpzb25TY2hlbWE7XG4gIGlmIChqc29uU2NoZW1hcy5oYXMoc2NoZW1hKSkgcmV0dXJuIGpzb25TY2hlbWFzLmdldChzY2hlbWEpO1xuICBjb25zdCBvdXRTY2hlbWEgPSB6b2RUb0pzb25TY2hlbWEoc2NoZW1hLCB7XG4gICAgJHJlZlN0cmF0ZWd5OiBcIm5vbmVcIixcbiAgICByZW1vdmVBZGRpdGlvbmFsU3RyYXRlZ3k6IFwic3RyaWN0XCJcbiAgfSk7XG4gIGpzb25TY2hlbWFzLnNldChzY2hlbWEsIG91dFNjaGVtYSk7XG4gIHJldHVybiBvdXRTY2hlbWE7XG59XG5mdW5jdGlvbiB0b0Vycm9yRGV0YWlsKGVycm9yKSB7XG4gIHJldHVybiB7XG4gICAgcGF0aDogZXJyb3IuaW5zdGFuY2VQYXRoLnN1YnN0cmluZygxKS5yZXBsYWNlKC9cXC8vZywgXCIuXCIpIHx8IFwiKHJvb3QpXCIsXG4gICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZVxuICB9O1xufVxuZnVuY3Rpb24gdmFsaWRhdGVTY2hlbWEoZGF0YSwgb3B0aW9ucykge1xuICBjb25zdCB0b1ZhbGlkYXRlID0gdG9Kc29uU2NoZW1hKG9wdGlvbnMpO1xuICBpZiAoIXRvVmFsaWRhdGUpIHtcbiAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgc2NoZW1hOiB0b1ZhbGlkYXRlIH07XG4gIH1cbiAgY29uc3QgdmFsaWRhdG9yID0gdmFsaWRhdG9ycy5nZXQodG9WYWxpZGF0ZSkgfHwgYWp2LmNvbXBpbGUodG9WYWxpZGF0ZSk7XG4gIGNvbnN0IHZhbGlkID0gdmFsaWRhdG9yKGRhdGEpO1xuICBjb25zdCBlcnJvcnMgPSB2YWxpZGF0b3IuZXJyb3JzPy5tYXAoKGUpID0+IGUpO1xuICByZXR1cm4geyB2YWxpZCwgZXJyb3JzOiBlcnJvcnM/Lm1hcCh0b0Vycm9yRGV0YWlsKSwgc2NoZW1hOiB0b1ZhbGlkYXRlIH07XG59XG5mdW5jdGlvbiBwYXJzZVNjaGVtYShkYXRhLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgdmFsaWQsIGVycm9ycywgc2NoZW1hIH0gPSB2YWxpZGF0ZVNjaGVtYShkYXRhLCBvcHRpb25zKTtcbiAgaWYgKCF2YWxpZCkgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcih7IGRhdGEsIGVycm9ycywgc2NoZW1hIH0pO1xuICByZXR1cm4gZGF0YTtcbn1cbmZ1bmN0aW9uIGRlZmluZVNjaGVtYShyZWdpc3RyeSwgbmFtZSwgc2NoZW1hKSB7XG4gIHJlZ2lzdHJ5LnJlZ2lzdGVyU2NoZW1hKG5hbWUsIHsgc2NoZW1hIH0pO1xuICByZXR1cm4gc2NoZW1hO1xufVxuZnVuY3Rpb24gZGVmaW5lSnNvblNjaGVtYShyZWdpc3RyeSwgbmFtZSwganNvblNjaGVtYSkge1xuICByZWdpc3RyeS5yZWdpc3RlclNjaGVtYShuYW1lLCB7IGpzb25TY2hlbWEgfSk7XG4gIHJldHVybiBqc29uU2NoZW1hO1xufVxuZXhwb3J0IHtcbiAgVmFsaWRhdGlvbkVycm9yLFxuICBkZWZpbmVKc29uU2NoZW1hLFxuICBkZWZpbmVTY2hlbWEsXG4gIHBhcnNlU2NoZW1hLFxuICB0b0pzb25TY2hlbWEsXG4gIHZhbGlkYXRlU2NoZW1hLFxuICB6XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZW1hLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/schema.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/statusTypes.js":
/*!*********************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/statusTypes.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar statusTypes_exports = {};\n__export(statusTypes_exports, {\n  StatusCodes: () => StatusCodes,\n  StatusNameSchema: () => StatusNameSchema,\n  StatusSchema: () => StatusSchema,\n  httpStatusCode: () => httpStatusCode\n});\nmodule.exports = __toCommonJS(statusTypes_exports);\nvar z = __toESM(__webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/lib/index.js\"));\nvar StatusCodes = /* @__PURE__ */ ((StatusCodes2) => {\n  StatusCodes2[StatusCodes2[\"OK\"] = 0] = \"OK\";\n  StatusCodes2[StatusCodes2[\"CANCELLED\"] = 1] = \"CANCELLED\";\n  StatusCodes2[StatusCodes2[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n  StatusCodes2[StatusCodes2[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n  StatusCodes2[StatusCodes2[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n  StatusCodes2[StatusCodes2[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n  StatusCodes2[StatusCodes2[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n  StatusCodes2[StatusCodes2[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n  StatusCodes2[StatusCodes2[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n  StatusCodes2[StatusCodes2[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n  StatusCodes2[StatusCodes2[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n  StatusCodes2[StatusCodes2[\"ABORTED\"] = 10] = \"ABORTED\";\n  StatusCodes2[StatusCodes2[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n  StatusCodes2[StatusCodes2[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n  StatusCodes2[StatusCodes2[\"INTERNAL\"] = 13] = \"INTERNAL\";\n  StatusCodes2[StatusCodes2[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n  StatusCodes2[StatusCodes2[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n  return StatusCodes2;\n})(StatusCodes || {});\nconst StatusNameSchema = z.enum([\n  \"OK\",\n  \"CANCELLED\",\n  \"UNKNOWN\",\n  \"INVALID_ARGUMENT\",\n  \"DEADLINE_EXCEEDED\",\n  \"NOT_FOUND\",\n  \"ALREADY_EXISTS\",\n  \"PERMISSION_DENIED\",\n  \"UNAUTHENTICATED\",\n  \"RESOURCE_EXHAUSTED\",\n  \"FAILED_PRECONDITION\",\n  \"ABORTED\",\n  \"OUT_OF_RANGE\",\n  \"UNIMPLEMENTED\",\n  \"INTERNAL\",\n  \"UNAVAILABLE\",\n  \"DATA_LOSS\"\n]);\nconst statusCodeMap = {\n  OK: 200,\n  CANCELLED: 499,\n  UNKNOWN: 500,\n  INVALID_ARGUMENT: 400,\n  DEADLINE_EXCEEDED: 504,\n  NOT_FOUND: 404,\n  ALREADY_EXISTS: 409,\n  PERMISSION_DENIED: 403,\n  UNAUTHENTICATED: 401,\n  RESOURCE_EXHAUSTED: 429,\n  FAILED_PRECONDITION: 400,\n  ABORTED: 409,\n  OUT_OF_RANGE: 400,\n  UNIMPLEMENTED: 501,\n  INTERNAL: 500,\n  UNAVAILABLE: 503,\n  DATA_LOSS: 500\n};\nfunction httpStatusCode(status) {\n  if (!(status in statusCodeMap)) {\n    throw new Error(`Invalid status code ${status}`);\n  }\n  return statusCodeMap[status];\n}\nconst StatusCodesSchema = z.nativeEnum(StatusCodes);\nconst StatusSchema = z.object({\n  code: StatusCodesSchema,\n  message: z.string(),\n  details: z.any().optional()\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=statusTypes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3N0YXR1c1R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0EsbUdBQW1HO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLDhCQUE4QjtBQUN2RztBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLGdCQUFnQixtQkFBTyxDQUFDLDZEQUFLO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxtQkFBbUI7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsT0FBTztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsTUFBTSxDQUtMO0FBQ0QiLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvc3R1ZGlvL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3N0YXR1c1R5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2dldFByb3RvT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvRVNNID0gKG1vZCwgaXNOb2RlTW9kZSwgdGFyZ2V0KSA9PiAodGFyZ2V0ID0gbW9kICE9IG51bGwgPyBfX2NyZWF0ZShfX2dldFByb3RvT2YobW9kKSkgOiB7fSwgX19jb3B5UHJvcHMoXG4gIC8vIElmIHRoZSBpbXBvcnRlciBpcyBpbiBub2RlIGNvbXBhdGliaWxpdHkgbW9kZSBvciB0aGlzIGlzIG5vdCBhbiBFU01cbiAgLy8gZmlsZSB0aGF0IGhhcyBiZWVuIGNvbnZlcnRlZCB0byBhIENvbW1vbkpTIGZpbGUgdXNpbmcgYSBCYWJlbC1cbiAgLy8gY29tcGF0aWJsZSB0cmFuc2Zvcm0gKGkuZS4gXCJfX2VzTW9kdWxlXCIgaGFzIG5vdCBiZWVuIHNldCksIHRoZW4gc2V0XG4gIC8vIFwiZGVmYXVsdFwiIHRvIHRoZSBDb21tb25KUyBcIm1vZHVsZS5leHBvcnRzXCIgZm9yIG5vZGUgY29tcGF0aWJpbGl0eS5cbiAgaXNOb2RlTW9kZSB8fCAhbW9kIHx8ICFtb2QuX19lc01vZHVsZSA/IF9fZGVmUHJvcCh0YXJnZXQsIFwiZGVmYXVsdFwiLCB7IHZhbHVlOiBtb2QsIGVudW1lcmFibGU6IHRydWUgfSkgOiB0YXJnZXQsXG4gIG1vZFxuKSk7XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBzdGF0dXNUeXBlc19leHBvcnRzID0ge307XG5fX2V4cG9ydChzdGF0dXNUeXBlc19leHBvcnRzLCB7XG4gIFN0YXR1c0NvZGVzOiAoKSA9PiBTdGF0dXNDb2RlcyxcbiAgU3RhdHVzTmFtZVNjaGVtYTogKCkgPT4gU3RhdHVzTmFtZVNjaGVtYSxcbiAgU3RhdHVzU2NoZW1hOiAoKSA9PiBTdGF0dXNTY2hlbWEsXG4gIGh0dHBTdGF0dXNDb2RlOiAoKSA9PiBodHRwU3RhdHVzQ29kZVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzdGF0dXNUeXBlc19leHBvcnRzKTtcbnZhciB6ID0gX190b0VTTShyZXF1aXJlKFwiem9kXCIpKTtcbnZhciBTdGF0dXNDb2RlcyA9IC8qIEBfX1BVUkVfXyAqLyAoKFN0YXR1c0NvZGVzMikgPT4ge1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiT0tcIl0gPSAwXSA9IFwiT0tcIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIkNBTkNFTExFRFwiXSA9IDFdID0gXCJDQU5DRUxMRURcIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIlVOS05PV05cIl0gPSAyXSA9IFwiVU5LTk9XTlwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiSU5WQUxJRF9BUkdVTUVOVFwiXSA9IDNdID0gXCJJTlZBTElEX0FSR1VNRU5UXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJERUFETElORV9FWENFRURFRFwiXSA9IDRdID0gXCJERUFETElORV9FWENFRURFRFwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiTk9UX0ZPVU5EXCJdID0gNV0gPSBcIk5PVF9GT1VORFwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiQUxSRUFEWV9FWElTVFNcIl0gPSA2XSA9IFwiQUxSRUFEWV9FWElTVFNcIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIlBFUk1JU1NJT05fREVOSUVEXCJdID0gN10gPSBcIlBFUk1JU1NJT05fREVOSUVEXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJVTkFVVEhFTlRJQ0FURURcIl0gPSAxNl0gPSBcIlVOQVVUSEVOVElDQVRFRFwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiUkVTT1VSQ0VfRVhIQVVTVEVEXCJdID0gOF0gPSBcIlJFU09VUkNFX0VYSEFVU1RFRFwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiRkFJTEVEX1BSRUNPTkRJVElPTlwiXSA9IDldID0gXCJGQUlMRURfUFJFQ09ORElUSU9OXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJBQk9SVEVEXCJdID0gMTBdID0gXCJBQk9SVEVEXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJPVVRfT0ZfUkFOR0VcIl0gPSAxMV0gPSBcIk9VVF9PRl9SQU5HRVwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiVU5JTVBMRU1FTlRFRFwiXSA9IDEyXSA9IFwiVU5JTVBMRU1FTlRFRFwiO1xuICBTdGF0dXNDb2RlczJbU3RhdHVzQ29kZXMyW1wiSU5URVJOQUxcIl0gPSAxM10gPSBcIklOVEVSTkFMXCI7XG4gIFN0YXR1c0NvZGVzMltTdGF0dXNDb2RlczJbXCJVTkFWQUlMQUJMRVwiXSA9IDE0XSA9IFwiVU5BVkFJTEFCTEVcIjtcbiAgU3RhdHVzQ29kZXMyW1N0YXR1c0NvZGVzMltcIkRBVEFfTE9TU1wiXSA9IDE1XSA9IFwiREFUQV9MT1NTXCI7XG4gIHJldHVybiBTdGF0dXNDb2RlczI7XG59KShTdGF0dXNDb2RlcyB8fCB7fSk7XG5jb25zdCBTdGF0dXNOYW1lU2NoZW1hID0gei5lbnVtKFtcbiAgXCJPS1wiLFxuICBcIkNBTkNFTExFRFwiLFxuICBcIlVOS05PV05cIixcbiAgXCJJTlZBTElEX0FSR1VNRU5UXCIsXG4gIFwiREVBRExJTkVfRVhDRUVERURcIixcbiAgXCJOT1RfRk9VTkRcIixcbiAgXCJBTFJFQURZX0VYSVNUU1wiLFxuICBcIlBFUk1JU1NJT05fREVOSUVEXCIsXG4gIFwiVU5BVVRIRU5USUNBVEVEXCIsXG4gIFwiUkVTT1VSQ0VfRVhIQVVTVEVEXCIsXG4gIFwiRkFJTEVEX1BSRUNPTkRJVElPTlwiLFxuICBcIkFCT1JURURcIixcbiAgXCJPVVRfT0ZfUkFOR0VcIixcbiAgXCJVTklNUExFTUVOVEVEXCIsXG4gIFwiSU5URVJOQUxcIixcbiAgXCJVTkFWQUlMQUJMRVwiLFxuICBcIkRBVEFfTE9TU1wiXG5dKTtcbmNvbnN0IHN0YXR1c0NvZGVNYXAgPSB7XG4gIE9LOiAyMDAsXG4gIENBTkNFTExFRDogNDk5LFxuICBVTktOT1dOOiA1MDAsXG4gIElOVkFMSURfQVJHVU1FTlQ6IDQwMCxcbiAgREVBRExJTkVfRVhDRUVERUQ6IDUwNCxcbiAgTk9UX0ZPVU5EOiA0MDQsXG4gIEFMUkVBRFlfRVhJU1RTOiA0MDksXG4gIFBFUk1JU1NJT05fREVOSUVEOiA0MDMsXG4gIFVOQVVUSEVOVElDQVRFRDogNDAxLFxuICBSRVNPVVJDRV9FWEhBVVNURUQ6IDQyOSxcbiAgRkFJTEVEX1BSRUNPTkRJVElPTjogNDAwLFxuICBBQk9SVEVEOiA0MDksXG4gIE9VVF9PRl9SQU5HRTogNDAwLFxuICBVTklNUExFTUVOVEVEOiA1MDEsXG4gIElOVEVSTkFMOiA1MDAsXG4gIFVOQVZBSUxBQkxFOiA1MDMsXG4gIERBVEFfTE9TUzogNTAwXG59O1xuZnVuY3Rpb24gaHR0cFN0YXR1c0NvZGUoc3RhdHVzKSB7XG4gIGlmICghKHN0YXR1cyBpbiBzdGF0dXNDb2RlTWFwKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBzdGF0dXMgY29kZSAke3N0YXR1c31gKTtcbiAgfVxuICByZXR1cm4gc3RhdHVzQ29kZU1hcFtzdGF0dXNdO1xufVxuY29uc3QgU3RhdHVzQ29kZXNTY2hlbWEgPSB6Lm5hdGl2ZUVudW0oU3RhdHVzQ29kZXMpO1xuY29uc3QgU3RhdHVzU2NoZW1hID0gei5vYmplY3Qoe1xuICBjb2RlOiBTdGF0dXNDb2Rlc1NjaGVtYSxcbiAgbWVzc2FnZTogei5zdHJpbmcoKSxcbiAgZGV0YWlsczogei5hbnkoKS5vcHRpb25hbCgpXG59KTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBTdGF0dXNDb2RlcyxcbiAgU3RhdHVzTmFtZVNjaGVtYSxcbiAgU3RhdHVzU2NoZW1hLFxuICBodHRwU3RhdHVzQ29kZVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0dXNUeXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/statusTypes.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/telemetryTypes.js":
/*!************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/telemetryTypes.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar telemetryTypes_exports = {};\nmodule.exports = __toCommonJS(telemetryTypes_exports);\n//# sourceMappingURL=telemetryTypes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RlbGVtZXRyeVR5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvdXNlci9zdHVkaW8vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvdGVsZW1ldHJ5VHlwZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHRlbGVtZXRyeVR5cGVzX2V4cG9ydHMgPSB7fTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHRlbGVtZXRyeVR5cGVzX2V4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVsZW1ldHJ5VHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/telemetryTypes.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar tracing_exports = {};\n__export(tracing_exports, {\n  cleanUpTracing: () => cleanUpTracing,\n  enableTelemetry: () => enableTelemetry,\n  ensureBasicTelemetryInstrumentation: () => ensureBasicTelemetryInstrumentation,\n  flushTracing: () => flushTracing\n});\nmodule.exports = __toCommonJS(tracing_exports);\nvar import_sdk_node = __webpack_require__(/*! @opentelemetry/sdk-node */ \"(action-browser)/./node_modules/@opentelemetry/sdk-node/build/src/index.js\");\nvar import_sdk_trace_base = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"(action-browser)/./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\");\nvar import_logging = __webpack_require__(/*! ./logging.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_exporter = __webpack_require__(/*! ./tracing/exporter.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/exporter.js\");\nvar import_utils = __webpack_require__(/*! ./utils.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/utils.js\");\n__reExport(tracing_exports, __webpack_require__(/*! ./tracing/exporter.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/exporter.js\"), module.exports);\n__reExport(tracing_exports, __webpack_require__(/*! ./tracing/instrumentation.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js\"), module.exports);\n__reExport(tracing_exports, __webpack_require__(/*! ./tracing/processor.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/processor.js\"), module.exports);\n__reExport(tracing_exports, __webpack_require__(/*! ./tracing/types.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/types.js\"), module.exports);\nlet telemetrySDK = null;\nlet nodeOtelConfig = null;\nconst instrumentationKey = \"__GENKIT_TELEMETRY_INSTRUMENTED\";\nasync function ensureBasicTelemetryInstrumentation() {\n  if (global[instrumentationKey]) {\n    return await global[instrumentationKey];\n  }\n  await enableTelemetry({});\n}\nasync function enableTelemetry(telemetryConfig) {\n  if (process.env.GENKIT_TELEMETRY_SERVER) {\n    (0, import_exporter.setTelemetryServerUrl)(process.env.GENKIT_TELEMETRY_SERVER);\n  }\n  global[instrumentationKey] = telemetryConfig instanceof Promise ? telemetryConfig : Promise.resolve();\n  telemetryConfig = telemetryConfig instanceof Promise ? await telemetryConfig : telemetryConfig;\n  nodeOtelConfig = telemetryConfig || {};\n  const processors = [createTelemetryServerProcessor()];\n  if (nodeOtelConfig.traceExporter) {\n    throw new Error(\"Please specify spanProcessors instead.\");\n  }\n  if (nodeOtelConfig.spanProcessors) {\n    processors.push(...nodeOtelConfig.spanProcessors);\n  }\n  if (nodeOtelConfig.spanProcessor) {\n    processors.push(nodeOtelConfig.spanProcessor);\n    delete nodeOtelConfig.spanProcessor;\n  }\n  nodeOtelConfig.spanProcessors = processors;\n  telemetrySDK = new import_sdk_node.NodeSDK(nodeOtelConfig);\n  telemetrySDK.start();\n  process.on(\"SIGTERM\", async () => await cleanUpTracing());\n}\nasync function cleanUpTracing() {\n  if (!telemetrySDK) {\n    return;\n  }\n  await maybeFlushMetrics();\n  await telemetrySDK.shutdown();\n  import_logging.logger.debug(\"OpenTelemetry SDK shut down.\");\n  telemetrySDK = null;\n}\nfunction createTelemetryServerProcessor() {\n  const exporter = new import_exporter.TraceServerExporter();\n  return (0, import_utils.isDevEnv)() ? new import_sdk_trace_base.SimpleSpanProcessor(exporter) : new import_sdk_trace_base.BatchSpanProcessor(exporter);\n}\nfunction maybeFlushMetrics() {\n  if (nodeOtelConfig?.metricReader) {\n    return nodeOtelConfig.metricReader.forceFlush();\n  }\n  return Promise.resolve();\n}\nasync function flushTracing() {\n  if (nodeOtelConfig?.spanProcessors) {\n    await Promise.all(nodeOtelConfig.spanProcessors.map((p) => p.forceFlush()));\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=tracing.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RyYWNpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLHNCQUFzQixtQkFBTyxDQUFDLDJHQUF5QjtBQUN2RCw0QkFBNEIsbUJBQU8sQ0FBQyx1SEFBK0I7QUFDbkUscUJBQXFCLG1CQUFPLENBQUMsb0ZBQWM7QUFDM0Msc0JBQXNCLG1CQUFPLENBQUMsc0dBQXVCO0FBQ3JELG1CQUFtQixtQkFBTyxDQUFDLGdGQUFZO0FBQ3ZDLDRCQUE0QixtQkFBTyxDQUFDLHNHQUF1QjtBQUMzRCw0QkFBNEIsbUJBQU8sQ0FBQyxvSEFBOEI7QUFDbEUsNEJBQTRCLG1CQUFPLENBQUMsd0dBQXdCO0FBQzVELDRCQUE0QixtQkFBTyxDQUFDLGdHQUFvQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FTTDtBQUNEIiwic291cmNlcyI6WyIvaG9tZS91c2VyL3N0dWRpby9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi90cmFjaW5nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX19yZUV4cG9ydCA9ICh0YXJnZXQsIG1vZCwgc2Vjb25kVGFyZ2V0KSA9PiAoX19jb3B5UHJvcHModGFyZ2V0LCBtb2QsIFwiZGVmYXVsdFwiKSwgc2Vjb25kVGFyZ2V0ICYmIF9fY29weVByb3BzKHNlY29uZFRhcmdldCwgbW9kLCBcImRlZmF1bHRcIikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgdHJhY2luZ19leHBvcnRzID0ge307XG5fX2V4cG9ydCh0cmFjaW5nX2V4cG9ydHMsIHtcbiAgY2xlYW5VcFRyYWNpbmc6ICgpID0+IGNsZWFuVXBUcmFjaW5nLFxuICBlbmFibGVUZWxlbWV0cnk6ICgpID0+IGVuYWJsZVRlbGVtZXRyeSxcbiAgZW5zdXJlQmFzaWNUZWxlbWV0cnlJbnN0cnVtZW50YXRpb246ICgpID0+IGVuc3VyZUJhc2ljVGVsZW1ldHJ5SW5zdHJ1bWVudGF0aW9uLFxuICBmbHVzaFRyYWNpbmc6ICgpID0+IGZsdXNoVHJhY2luZ1xufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyh0cmFjaW5nX2V4cG9ydHMpO1xudmFyIGltcG9ydF9zZGtfbm9kZSA9IHJlcXVpcmUoXCJAb3BlbnRlbGVtZXRyeS9zZGstbm9kZVwiKTtcbnZhciBpbXBvcnRfc2RrX3RyYWNlX2Jhc2UgPSByZXF1aXJlKFwiQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2VcIik7XG52YXIgaW1wb3J0X2xvZ2dpbmcgPSByZXF1aXJlKFwiLi9sb2dnaW5nLmpzXCIpO1xudmFyIGltcG9ydF9leHBvcnRlciA9IHJlcXVpcmUoXCIuL3RyYWNpbmcvZXhwb3J0ZXIuanNcIik7XG52YXIgaW1wb3J0X3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMuanNcIik7XG5fX3JlRXhwb3J0KHRyYWNpbmdfZXhwb3J0cywgcmVxdWlyZShcIi4vdHJhY2luZy9leHBvcnRlci5qc1wiKSwgbW9kdWxlLmV4cG9ydHMpO1xuX19yZUV4cG9ydCh0cmFjaW5nX2V4cG9ydHMsIHJlcXVpcmUoXCIuL3RyYWNpbmcvaW5zdHJ1bWVudGF0aW9uLmpzXCIpLCBtb2R1bGUuZXhwb3J0cyk7XG5fX3JlRXhwb3J0KHRyYWNpbmdfZXhwb3J0cywgcmVxdWlyZShcIi4vdHJhY2luZy9wcm9jZXNzb3IuanNcIiksIG1vZHVsZS5leHBvcnRzKTtcbl9fcmVFeHBvcnQodHJhY2luZ19leHBvcnRzLCByZXF1aXJlKFwiLi90cmFjaW5nL3R5cGVzLmpzXCIpLCBtb2R1bGUuZXhwb3J0cyk7XG5sZXQgdGVsZW1ldHJ5U0RLID0gbnVsbDtcbmxldCBub2RlT3RlbENvbmZpZyA9IG51bGw7XG5jb25zdCBpbnN0cnVtZW50YXRpb25LZXkgPSBcIl9fR0VOS0lUX1RFTEVNRVRSWV9JTlNUUlVNRU5URURcIjtcbmFzeW5jIGZ1bmN0aW9uIGVuc3VyZUJhc2ljVGVsZW1ldHJ5SW5zdHJ1bWVudGF0aW9uKCkge1xuICBpZiAoZ2xvYmFsW2luc3RydW1lbnRhdGlvbktleV0pIHtcbiAgICByZXR1cm4gYXdhaXQgZ2xvYmFsW2luc3RydW1lbnRhdGlvbktleV07XG4gIH1cbiAgYXdhaXQgZW5hYmxlVGVsZW1ldHJ5KHt9KTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGVuYWJsZVRlbGVtZXRyeSh0ZWxlbWV0cnlDb25maWcpIHtcbiAgaWYgKHByb2Nlc3MuZW52LkdFTktJVF9URUxFTUVUUllfU0VSVkVSKSB7XG4gICAgKDAsIGltcG9ydF9leHBvcnRlci5zZXRUZWxlbWV0cnlTZXJ2ZXJVcmwpKHByb2Nlc3MuZW52LkdFTktJVF9URUxFTUVUUllfU0VSVkVSKTtcbiAgfVxuICBnbG9iYWxbaW5zdHJ1bWVudGF0aW9uS2V5XSA9IHRlbGVtZXRyeUNvbmZpZyBpbnN0YW5jZW9mIFByb21pc2UgPyB0ZWxlbWV0cnlDb25maWcgOiBQcm9taXNlLnJlc29sdmUoKTtcbiAgdGVsZW1ldHJ5Q29uZmlnID0gdGVsZW1ldHJ5Q29uZmlnIGluc3RhbmNlb2YgUHJvbWlzZSA/IGF3YWl0IHRlbGVtZXRyeUNvbmZpZyA6IHRlbGVtZXRyeUNvbmZpZztcbiAgbm9kZU90ZWxDb25maWcgPSB0ZWxlbWV0cnlDb25maWcgfHwge307XG4gIGNvbnN0IHByb2Nlc3NvcnMgPSBbY3JlYXRlVGVsZW1ldHJ5U2VydmVyUHJvY2Vzc29yKCldO1xuICBpZiAobm9kZU90ZWxDb25maWcudHJhY2VFeHBvcnRlcikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlBsZWFzZSBzcGVjaWZ5IHNwYW5Qcm9jZXNzb3JzIGluc3RlYWQuXCIpO1xuICB9XG4gIGlmIChub2RlT3RlbENvbmZpZy5zcGFuUHJvY2Vzc29ycykge1xuICAgIHByb2Nlc3NvcnMucHVzaCguLi5ub2RlT3RlbENvbmZpZy5zcGFuUHJvY2Vzc29ycyk7XG4gIH1cbiAgaWYgKG5vZGVPdGVsQ29uZmlnLnNwYW5Qcm9jZXNzb3IpIHtcbiAgICBwcm9jZXNzb3JzLnB1c2gobm9kZU90ZWxDb25maWcuc3BhblByb2Nlc3Nvcik7XG4gICAgZGVsZXRlIG5vZGVPdGVsQ29uZmlnLnNwYW5Qcm9jZXNzb3I7XG4gIH1cbiAgbm9kZU90ZWxDb25maWcuc3BhblByb2Nlc3NvcnMgPSBwcm9jZXNzb3JzO1xuICB0ZWxlbWV0cnlTREsgPSBuZXcgaW1wb3J0X3Nka19ub2RlLk5vZGVTREsobm9kZU90ZWxDb25maWcpO1xuICB0ZWxlbWV0cnlTREsuc3RhcnQoKTtcbiAgcHJvY2Vzcy5vbihcIlNJR1RFUk1cIiwgYXN5bmMgKCkgPT4gYXdhaXQgY2xlYW5VcFRyYWNpbmcoKSk7XG59XG5hc3luYyBmdW5jdGlvbiBjbGVhblVwVHJhY2luZygpIHtcbiAgaWYgKCF0ZWxlbWV0cnlTREspIHtcbiAgICByZXR1cm47XG4gIH1cbiAgYXdhaXQgbWF5YmVGbHVzaE1ldHJpY3MoKTtcbiAgYXdhaXQgdGVsZW1ldHJ5U0RLLnNodXRkb3duKCk7XG4gIGltcG9ydF9sb2dnaW5nLmxvZ2dlci5kZWJ1ZyhcIk9wZW5UZWxlbWV0cnkgU0RLIHNodXQgZG93bi5cIik7XG4gIHRlbGVtZXRyeVNESyA9IG51bGw7XG59XG5mdW5jdGlvbiBjcmVhdGVUZWxlbWV0cnlTZXJ2ZXJQcm9jZXNzb3IoKSB7XG4gIGNvbnN0IGV4cG9ydGVyID0gbmV3IGltcG9ydF9leHBvcnRlci5UcmFjZVNlcnZlckV4cG9ydGVyKCk7XG4gIHJldHVybiAoMCwgaW1wb3J0X3V0aWxzLmlzRGV2RW52KSgpID8gbmV3IGltcG9ydF9zZGtfdHJhY2VfYmFzZS5TaW1wbGVTcGFuUHJvY2Vzc29yKGV4cG9ydGVyKSA6IG5ldyBpbXBvcnRfc2RrX3RyYWNlX2Jhc2UuQmF0Y2hTcGFuUHJvY2Vzc29yKGV4cG9ydGVyKTtcbn1cbmZ1bmN0aW9uIG1heWJlRmx1c2hNZXRyaWNzKCkge1xuICBpZiAobm9kZU90ZWxDb25maWc/Lm1ldHJpY1JlYWRlcikge1xuICAgIHJldHVybiBub2RlT3RlbENvbmZpZy5tZXRyaWNSZWFkZXIuZm9yY2VGbHVzaCgpO1xuICB9XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGZsdXNoVHJhY2luZygpIHtcbiAgaWYgKG5vZGVPdGVsQ29uZmlnPy5zcGFuUHJvY2Vzc29ycykge1xuICAgIGF3YWl0IFByb21pc2UuYWxsKG5vZGVPdGVsQ29uZmlnLnNwYW5Qcm9jZXNzb3JzLm1hcCgocCkgPT4gcC5mb3JjZUZsdXNoKCkpKTtcbiAgfVxufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNsZWFuVXBUcmFjaW5nLFxuICBlbmFibGVUZWxlbWV0cnksXG4gIGVuc3VyZUJhc2ljVGVsZW1ldHJ5SW5zdHJ1bWVudGF0aW9uLFxuICBmbHVzaFRyYWNpbmcsXG4gIC4uLnJlcXVpcmUoXCIuL3RyYWNpbmcvZXhwb3J0ZXIuanNcIiksXG4gIC4uLnJlcXVpcmUoXCIuL3RyYWNpbmcvaW5zdHJ1bWVudGF0aW9uLmpzXCIpLFxuICAuLi5yZXF1aXJlKFwiLi90cmFjaW5nL3Byb2Nlc3Nvci5qc1wiKSxcbiAgLi4ucmVxdWlyZShcIi4vdHJhY2luZy90eXBlcy5qc1wiKVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFjaW5nLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/exporter.js":
/*!**************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/exporter.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar exporter_exports = {};\n__export(exporter_exports, {\n  TraceServerExporter: () => TraceServerExporter,\n  setTelemetryServerUrl: () => setTelemetryServerUrl,\n  telemetryServerUrl: () => telemetryServerUrl\n});\nmodule.exports = __toCommonJS(exporter_exports);\nvar import_api = __webpack_require__(/*! @opentelemetry/api */ \"(action-browser)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nvar import_core = __webpack_require__(/*! @opentelemetry/core */ \"(action-browser)/./node_modules/@opentelemetry/core/build/esm/index.js\");\nvar import_logging = __webpack_require__(/*! ../logging.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/logging.js\");\nvar import_utils = __webpack_require__(/*! ../utils.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/utils.js\");\nlet telemetryServerUrl;\nfunction setTelemetryServerUrl(url) {\n  telemetryServerUrl = url;\n}\nclass TraceServerExporter {\n  /**\n   * Export spans.\n   * @param spans\n   * @param resultCallback\n   */\n  export(spans, resultCallback) {\n    this._sendSpans(spans, resultCallback);\n  }\n  /**\n   * Shutdown the exporter.\n   */\n  shutdown() {\n    this._sendSpans([]);\n    return this.forceFlush();\n  }\n  /**\n   * Converts span info into trace store format.\n   * @param span\n   */\n  _exportInfo(span) {\n    const spanData = {\n      spanId: span.spanContext().spanId,\n      traceId: span.spanContext().traceId,\n      startTime: transformTime(span.startTime),\n      endTime: transformTime(span.endTime),\n      attributes: { ...span.attributes },\n      displayName: span.name,\n      links: span.links,\n      spanKind: import_api.SpanKind[span.kind],\n      parentSpanId: span.parentSpanId,\n      sameProcessAsParentSpan: { value: !span.spanContext().isRemote },\n      status: span.status,\n      timeEvents: {\n        timeEvent: span.events.map((e) => ({\n          time: transformTime(e.time),\n          annotation: {\n            attributes: e.attributes ?? {},\n            description: e.name\n          }\n        }))\n      }\n    };\n    if (span.instrumentationLibrary !== void 0) {\n      spanData.instrumentationLibrary = {\n        name: span.instrumentationLibrary.name\n      };\n      if (span.instrumentationLibrary.schemaUrl !== void 0) {\n        spanData.instrumentationLibrary.schemaUrl = span.instrumentationLibrary.schemaUrl;\n      }\n      if (span.instrumentationLibrary.version !== void 0) {\n        spanData.instrumentationLibrary.version = span.instrumentationLibrary.version;\n      }\n    }\n    (0, import_utils.deleteUndefinedProps)(spanData);\n    return spanData;\n  }\n  /**\n   * Exports any pending spans in exporter\n   */\n  forceFlush() {\n    return Promise.resolve();\n  }\n  async _sendSpans(spans, done) {\n    const traces = {};\n    for (const span of spans) {\n      if (!traces[span.spanContext().traceId]) {\n        traces[span.spanContext().traceId] = [];\n      }\n      traces[span.spanContext().traceId].push(span);\n    }\n    let error = false;\n    for (const traceId of Object.keys(traces)) {\n      try {\n        await this.save(traceId, traces[traceId]);\n      } catch (e) {\n        error = true;\n        import_logging.logger.error(`Failed to save trace ${traceId}`, e);\n      }\n      if (done) {\n        return done({\n          code: error ? import_core.ExportResultCode.FAILED : import_core.ExportResultCode.SUCCESS\n        });\n      }\n    }\n  }\n  async save(traceId, spans) {\n    if (!telemetryServerUrl) {\n      import_logging.logger.debug(\n        `Telemetry server is not configured, trace ${traceId} not saved!`\n      );\n      return;\n    }\n    const data = {\n      traceId,\n      spans: {}\n    };\n    for (const span of spans) {\n      const convertedSpan = this._exportInfo(span);\n      data.spans[convertedSpan.spanId] = convertedSpan;\n      if (!convertedSpan.parentSpanId) {\n        data.displayName = convertedSpan.displayName;\n        data.startTime = convertedSpan.startTime;\n        data.endTime = convertedSpan.endTime;\n      }\n    }\n    await fetch(`${telemetryServerUrl}/api/traces`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n  }\n}\nfunction transformTime(time) {\n  return (0, import_core.hrTimeToMilliseconds)(time);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=exporter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/exporter.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar instrumentation_exports = {};\n__export(instrumentation_exports, {\n  ATTR_PREFIX: () => ATTR_PREFIX,\n  SPAN_TYPE_ATTR: () => SPAN_TYPE_ATTR,\n  appendSpan: () => appendSpan,\n  newTrace: () => newTrace,\n  runInNewSpan: () => runInNewSpan,\n  setCustomMetadataAttribute: () => setCustomMetadataAttribute,\n  setCustomMetadataAttributes: () => setCustomMetadataAttributes,\n  spanMetadataAlsKey: () => spanMetadataAlsKey,\n  toDisplayPath: () => toDisplayPath,\n  traceMetadataAlsKey: () => traceMetadataAlsKey\n});\nmodule.exports = __toCommonJS(instrumentation_exports);\nvar import_api = __webpack_require__(/*! @opentelemetry/api */ \"(action-browser)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nvar import_node_perf_hooks = __webpack_require__(/*! node:perf_hooks */ \"node:perf_hooks\");\nvar import_tracing = __webpack_require__(/*! ../tracing.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing.js\");\nconst spanMetadataAlsKey = \"core.tracing.instrumentation.span\";\nconst traceMetadataAlsKey = \"core.tracing.instrumentation.trace\";\nconst ATTR_PREFIX = \"genkit\";\nconst SPAN_TYPE_ATTR = ATTR_PREFIX + \":type\";\nconst TRACER_NAME = \"genkit-tracer\";\nconst TRACER_VERSION = \"v1\";\nasync function newTrace(registry, opts, fn) {\n  registry = registry.registry ? registry.registry : registry;\n  await (0, import_tracing.ensureBasicTelemetryInstrumentation)();\n  const traceMetadata = registry.asyncStore.getStore(\n    traceMetadataAlsKey\n  ) || {\n    paths: /* @__PURE__ */ new Set(),\n    timestamp: import_node_perf_hooks.performance.now(),\n    featureName: opts.name\n  };\n  return await registry.asyncStore.run(\n    traceMetadataAlsKey,\n    traceMetadata,\n    () => runInNewSpan(\n      registry,\n      {\n        metadata: {\n          name: opts.name\n        },\n        labels: opts.labels,\n        links: opts.links\n      },\n      async (metadata, otSpan) => {\n        return await fn(metadata, otSpan);\n      }\n    )\n  );\n}\nasync function runInNewSpan(registry, opts, fn) {\n  await (0, import_tracing.ensureBasicTelemetryInstrumentation)();\n  const resolvedRegistry = registry.registry ? registry.registry : registry;\n  const tracer = import_api.trace.getTracer(TRACER_NAME, TRACER_VERSION);\n  const parentStep = resolvedRegistry.asyncStore.getStore(spanMetadataAlsKey);\n  const isInRoot = parentStep?.isRoot === true;\n  if (!parentStep) opts.metadata.isRoot ||= true;\n  return await tracer.startActiveSpan(\n    opts.metadata.name,\n    { links: opts.links, root: opts.metadata.isRoot },\n    async (otSpan) => {\n      if (opts.labels) otSpan.setAttributes(opts.labels);\n      try {\n        opts.metadata.path = buildPath(\n          opts.metadata.name,\n          parentStep?.path || \"\",\n          opts.labels\n        );\n        const output = await resolvedRegistry.asyncStore.run(\n          spanMetadataAlsKey,\n          opts.metadata,\n          () => fn(opts.metadata, otSpan, isInRoot)\n        );\n        if (opts.metadata.state !== \"error\") {\n          opts.metadata.state = \"success\";\n        }\n        recordPath(resolvedRegistry, opts.metadata);\n        return output;\n      } catch (e) {\n        recordPath(resolvedRegistry, opts.metadata, e);\n        opts.metadata.state = \"error\";\n        otSpan.setStatus({\n          code: import_api.SpanStatusCode.ERROR,\n          message: getErrorMessage(e)\n        });\n        if (e instanceof Error) {\n          otSpan.recordException(e);\n        }\n        throw e;\n      } finally {\n        otSpan.setAttributes(metadataToAttributes(opts.metadata));\n        otSpan.end();\n      }\n    }\n  );\n}\nasync function appendSpan(traceId, parentSpanId, metadata, labels) {\n  await (0, import_tracing.ensureBasicTelemetryInstrumentation)();\n  const tracer = import_api.trace.getTracer(TRACER_NAME, TRACER_VERSION);\n  const spanContext = import_api.trace.setSpanContext(import_api.ROOT_CONTEXT, {\n    traceId,\n    traceFlags: 1,\n    // sampled\n    spanId: parentSpanId\n  });\n  const span = tracer.startSpan(metadata.name, {}, spanContext);\n  span.setAttributes(metadataToAttributes(metadata));\n  if (labels) {\n    span.setAttributes(labels);\n  }\n  span.end();\n}\nfunction getErrorMessage(e) {\n  if (e instanceof Error) {\n    return e.message;\n  }\n  return `${e}`;\n}\nfunction metadataToAttributes(metadata) {\n  const out = {};\n  Object.keys(metadata).forEach((key) => {\n    if (key === \"metadata\" && typeof metadata[key] === \"object\" && metadata.metadata) {\n      Object.entries(metadata.metadata).forEach(([metaKey, value]) => {\n        out[ATTR_PREFIX + \":metadata:\" + metaKey] = value;\n      });\n    } else if (key === \"input\" || typeof metadata[key] === \"object\") {\n      out[ATTR_PREFIX + \":\" + key] = JSON.stringify(metadata[key]);\n    } else {\n      out[ATTR_PREFIX + \":\" + key] = metadata[key];\n    }\n  });\n  return out;\n}\nfunction setCustomMetadataAttribute(registry, key, value) {\n  const currentStep = getCurrentSpan(registry);\n  if (!currentStep) {\n    return;\n  }\n  if (!currentStep.metadata) {\n    currentStep.metadata = {};\n  }\n  currentStep.metadata[key] = value;\n}\nfunction setCustomMetadataAttributes(registry, values) {\n  const currentStep = getCurrentSpan(registry);\n  if (!currentStep) {\n    return;\n  }\n  if (!currentStep.metadata) {\n    currentStep.metadata = {};\n  }\n  for (const [key, value] of Object.entries(values)) {\n    currentStep.metadata[key] = value;\n  }\n}\nfunction toDisplayPath(path) {\n  const pathPartRegex = /\\{([^\\,}]+),[^\\}]+\\}/g;\n  return Array.from(path.matchAll(pathPartRegex), (m) => m[1]).join(\" > \");\n}\nfunction getCurrentSpan(registry) {\n  const step = registry.asyncStore.getStore(spanMetadataAlsKey);\n  if (!step) {\n    throw new Error(\"running outside step context\");\n  }\n  return step;\n}\nfunction buildPath(name, parentPath, labels) {\n  const stepType = labels && labels[\"genkit:type\"] ? `,t:${labels[\"genkit:metadata:subtype\"] === \"flow\" ? \"flow\" : labels[\"genkit:type\"]}` : \"\";\n  return parentPath + `/{${name}${stepType}}`;\n}\nfunction recordPath(registry, spanMeta, err) {\n  const path = spanMeta.path || \"\";\n  const decoratedPath = decoratePathWithSubtype(spanMeta);\n  const paths = Array.from(\n    registry.asyncStore.getStore(traceMetadataAlsKey)?.paths || /* @__PURE__ */ new Set()\n  );\n  const status = err ? \"failure\" : \"success\";\n  if (!paths.some((p) => p.path.startsWith(path) && p.status === status)) {\n    const now = import_node_perf_hooks.performance.now();\n    const start = registry.asyncStore.getStore(traceMetadataAlsKey)?.timestamp || now;\n    registry.asyncStore.getStore(traceMetadataAlsKey)?.paths?.add({\n      path: decoratedPath,\n      error: err?.name,\n      latency: now - start,\n      status\n    });\n  }\n  spanMeta.path = decoratedPath;\n}\nfunction decoratePathWithSubtype(metadata) {\n  if (!metadata.path) {\n    return \"\";\n  }\n  const pathComponents = metadata.path.split(\"}/{\");\n  if (pathComponents.length == 1) {\n    return metadata.path;\n  }\n  const stepSubtype = metadata.metadata && metadata.metadata[\"subtype\"] ? `,s:${metadata.metadata[\"subtype\"]}` : \"\";\n  const root = `${pathComponents.slice(0, -1).join(\"}/{\")}}/`;\n  const decoratedStep = `{${pathComponents.at(-1)?.slice(0, -1)}${stepSubtype}}`;\n  return root + decoratedStep;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/processor.js":
/*!***************************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/processor.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar processor_exports = {};\n__export(processor_exports, {\n  GenkitSpanProcessorWrapper: () => GenkitSpanProcessorWrapper\n});\nmodule.exports = __toCommonJS(processor_exports);\nvar import_instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/instrumentation.js\");\nclass GenkitSpanProcessorWrapper {\n  constructor(processor) {\n    this.processor = processor;\n  }\n  forceFlush() {\n    return this.processor.forceFlush();\n  }\n  onStart(span, parentContext) {\n    return this.processor.onStart(span, parentContext);\n  }\n  onEnd(span) {\n    if (Object.keys(span.attributes).find((k) => k.startsWith(import_instrumentation.ATTR_PREFIX + \":\"))) {\n      return this.processor.onEnd(new FilteringReadableSpanProxy(span));\n    } else {\n      return this.processor.onEnd(span);\n    }\n  }\n  async shutdown() {\n    return this.processor.shutdown();\n  }\n}\nclass FilteringReadableSpanProxy {\n  constructor(span) {\n    this.span = span;\n  }\n  get name() {\n    return this.span.name;\n  }\n  get kind() {\n    return this.span.kind;\n  }\n  get parentSpanId() {\n    return this.span.parentSpanId;\n  }\n  get startTime() {\n    return this.span.startTime;\n  }\n  get endTime() {\n    return this.span.endTime;\n  }\n  get status() {\n    return this.span.status;\n  }\n  get attributes() {\n    const out = {};\n    for (const [key, value] of Object.entries(this.span.attributes)) {\n      if (!key.startsWith(import_instrumentation.ATTR_PREFIX + \":\")) {\n        out[key] = value;\n      }\n    }\n    return out;\n  }\n  get links() {\n    return this.span.links;\n  }\n  get events() {\n    return this.span.events;\n  }\n  get duration() {\n    return this.span.duration;\n  }\n  get ended() {\n    return this.span.ended;\n  }\n  get resource() {\n    return this.span.resource;\n  }\n  get instrumentationLibrary() {\n    return this.span.instrumentationLibrary;\n  }\n  get droppedAttributesCount() {\n    return this.span.droppedAttributesCount;\n  }\n  get droppedEventsCount() {\n    return this.span.droppedEventsCount;\n  }\n  get droppedLinksCount() {\n    return this.span.droppedLinksCount;\n  }\n  spanContext() {\n    return this.span.spanContext();\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=processor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RyYWNpbmcvcHJvY2Vzc29yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsNkJBQTZCLG1CQUFPLENBQUMsNEdBQXNCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUVMO0FBQ0QiLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvc3R1ZGlvL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RyYWNpbmcvcHJvY2Vzc29yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBwcm9jZXNzb3JfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQocHJvY2Vzc29yX2V4cG9ydHMsIHtcbiAgR2Vua2l0U3BhblByb2Nlc3NvcldyYXBwZXI6ICgpID0+IEdlbmtpdFNwYW5Qcm9jZXNzb3JXcmFwcGVyXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHByb2Nlc3Nvcl9leHBvcnRzKTtcbnZhciBpbXBvcnRfaW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZShcIi4vaW5zdHJ1bWVudGF0aW9uLmpzXCIpO1xuY2xhc3MgR2Vua2l0U3BhblByb2Nlc3NvcldyYXBwZXIge1xuICBjb25zdHJ1Y3Rvcihwcm9jZXNzb3IpIHtcbiAgICB0aGlzLnByb2Nlc3NvciA9IHByb2Nlc3NvcjtcbiAgfVxuICBmb3JjZUZsdXNoKCkge1xuICAgIHJldHVybiB0aGlzLnByb2Nlc3Nvci5mb3JjZUZsdXNoKCk7XG4gIH1cbiAgb25TdGFydChzcGFuLCBwYXJlbnRDb250ZXh0KSB7XG4gICAgcmV0dXJuIHRoaXMucHJvY2Vzc29yLm9uU3RhcnQoc3BhbiwgcGFyZW50Q29udGV4dCk7XG4gIH1cbiAgb25FbmQoc3Bhbikge1xuICAgIGlmIChPYmplY3Qua2V5cyhzcGFuLmF0dHJpYnV0ZXMpLmZpbmQoKGspID0+IGsuc3RhcnRzV2l0aChpbXBvcnRfaW5zdHJ1bWVudGF0aW9uLkFUVFJfUFJFRklYICsgXCI6XCIpKSkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc29yLm9uRW5kKG5ldyBGaWx0ZXJpbmdSZWFkYWJsZVNwYW5Qcm94eShzcGFuKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnByb2Nlc3Nvci5vbkVuZChzcGFuKTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgc2h1dGRvd24oKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvY2Vzc29yLnNodXRkb3duKCk7XG4gIH1cbn1cbmNsYXNzIEZpbHRlcmluZ1JlYWRhYmxlU3BhblByb3h5IHtcbiAgY29uc3RydWN0b3Ioc3Bhbikge1xuICAgIHRoaXMuc3BhbiA9IHNwYW47XG4gIH1cbiAgZ2V0IG5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3Bhbi5uYW1lO1xuICB9XG4gIGdldCBraW5kKCkge1xuICAgIHJldHVybiB0aGlzLnNwYW4ua2luZDtcbiAgfVxuICBnZXQgcGFyZW50U3BhbklkKCkge1xuICAgIHJldHVybiB0aGlzLnNwYW4ucGFyZW50U3BhbklkO1xuICB9XG4gIGdldCBzdGFydFRpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3Bhbi5zdGFydFRpbWU7XG4gIH1cbiAgZ2V0IGVuZFRpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3Bhbi5lbmRUaW1lO1xuICB9XG4gIGdldCBzdGF0dXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3Bhbi5zdGF0dXM7XG4gIH1cbiAgZ2V0IGF0dHJpYnV0ZXMoKSB7XG4gICAgY29uc3Qgb3V0ID0ge307XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5zcGFuLmF0dHJpYnV0ZXMpKSB7XG4gICAgICBpZiAoIWtleS5zdGFydHNXaXRoKGltcG9ydF9pbnN0cnVtZW50YXRpb24uQVRUUl9QUkVGSVggKyBcIjpcIikpIHtcbiAgICAgICAgb3V0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuICBnZXQgbGlua3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3Bhbi5saW5rcztcbiAgfVxuICBnZXQgZXZlbnRzKCkge1xuICAgIHJldHVybiB0aGlzLnNwYW4uZXZlbnRzO1xuICB9XG4gIGdldCBkdXJhdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zcGFuLmR1cmF0aW9uO1xuICB9XG4gIGdldCBlbmRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5zcGFuLmVuZGVkO1xuICB9XG4gIGdldCByZXNvdXJjZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zcGFuLnJlc291cmNlO1xuICB9XG4gIGdldCBpbnN0cnVtZW50YXRpb25MaWJyYXJ5KCkge1xuICAgIHJldHVybiB0aGlzLnNwYW4uaW5zdHJ1bWVudGF0aW9uTGlicmFyeTtcbiAgfVxuICBnZXQgZHJvcHBlZEF0dHJpYnV0ZXNDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5zcGFuLmRyb3BwZWRBdHRyaWJ1dGVzQ291bnQ7XG4gIH1cbiAgZ2V0IGRyb3BwZWRFdmVudHNDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5zcGFuLmRyb3BwZWRFdmVudHNDb3VudDtcbiAgfVxuICBnZXQgZHJvcHBlZExpbmtzQ291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3Bhbi5kcm9wcGVkTGlua3NDb3VudDtcbiAgfVxuICBzcGFuQ29udGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5zcGFuLnNwYW5Db250ZXh0KCk7XG4gIH1cbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBHZW5raXRTcGFuUHJvY2Vzc29yV3JhcHBlclxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9jZXNzb3IuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/processor.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/types.js":
/*!***********************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/tracing/types.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar types_exports = {};\n__export(types_exports, {\n  InstrumentationLibrarySchema: () => InstrumentationLibrarySchema,\n  LinkSchema: () => LinkSchema,\n  PathMetadataSchema: () => PathMetadataSchema,\n  SpanContextSchema: () => SpanContextSchema,\n  SpanDataSchema: () => SpanDataSchema,\n  SpanMetadataSchema: () => SpanMetadataSchema,\n  SpanStatusSchema: () => SpanStatusSchema,\n  TimeEventSchema: () => TimeEventSchema,\n  TraceDataSchema: () => TraceDataSchema,\n  TraceMetadataSchema: () => TraceMetadataSchema\n});\nmodule.exports = __toCommonJS(types_exports);\nvar import_zod = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/lib/index.js\");\nconst PathMetadataSchema = import_zod.z.object({\n  path: import_zod.z.string(),\n  status: import_zod.z.string(),\n  error: import_zod.z.string().optional(),\n  latency: import_zod.z.number()\n});\nconst TraceMetadataSchema = import_zod.z.object({\n  featureName: import_zod.z.string().optional(),\n  paths: import_zod.z.set(PathMetadataSchema).optional(),\n  timestamp: import_zod.z.number()\n});\nconst SpanMetadataSchema = import_zod.z.object({\n  name: import_zod.z.string(),\n  state: import_zod.z.enum([\"success\", \"error\"]).optional(),\n  input: import_zod.z.any().optional(),\n  output: import_zod.z.any().optional(),\n  isRoot: import_zod.z.boolean().optional(),\n  metadata: import_zod.z.record(import_zod.z.string(), import_zod.z.string()).optional(),\n  path: import_zod.z.string().optional()\n});\nconst SpanStatusSchema = import_zod.z.object({\n  code: import_zod.z.number(),\n  message: import_zod.z.string().optional()\n});\nconst TimeEventSchema = import_zod.z.object({\n  time: import_zod.z.number(),\n  annotation: import_zod.z.object({\n    attributes: import_zod.z.record(import_zod.z.string(), import_zod.z.any()),\n    description: import_zod.z.string()\n  })\n});\nconst SpanContextSchema = import_zod.z.object({\n  traceId: import_zod.z.string(),\n  spanId: import_zod.z.string(),\n  isRemote: import_zod.z.boolean().optional(),\n  traceFlags: import_zod.z.number()\n});\nconst LinkSchema = import_zod.z.object({\n  context: SpanContextSchema.optional(),\n  attributes: import_zod.z.record(import_zod.z.string(), import_zod.z.any()).optional(),\n  droppedAttributesCount: import_zod.z.number().optional()\n});\nconst InstrumentationLibrarySchema = import_zod.z.object({\n  name: import_zod.z.string().readonly(),\n  version: import_zod.z.string().optional().readonly(),\n  schemaUrl: import_zod.z.string().optional().readonly()\n});\nconst SpanDataSchema = import_zod.z.object({\n  spanId: import_zod.z.string(),\n  traceId: import_zod.z.string(),\n  parentSpanId: import_zod.z.string().optional(),\n  startTime: import_zod.z.number(),\n  endTime: import_zod.z.number(),\n  attributes: import_zod.z.record(import_zod.z.string(), import_zod.z.any()),\n  displayName: import_zod.z.string(),\n  links: import_zod.z.array(LinkSchema).optional(),\n  instrumentationLibrary: InstrumentationLibrarySchema,\n  spanKind: import_zod.z.string(),\n  sameProcessAsParentSpan: import_zod.z.object({ value: import_zod.z.boolean() }).optional(),\n  status: SpanStatusSchema.optional(),\n  timeEvents: import_zod.z.object({\n    timeEvent: import_zod.z.array(TimeEventSchema)\n  }).optional(),\n  truncated: import_zod.z.boolean().optional()\n});\nconst TraceDataSchema = import_zod.z.object({\n  traceId: import_zod.z.string(),\n  displayName: import_zod.z.string().optional(),\n  startTime: import_zod.z.number().optional().describe(\"trace start time in milliseconds since the epoch\"),\n  endTime: import_zod.z.number().optional().describe(\"end time in milliseconds since the epoch\"),\n  spans: import_zod.z.record(import_zod.z.string(), SpanDataSchema)\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3RyYWNpbmcvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxpQkFBaUIsbUJBQU8sQ0FBQyw2REFBSztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCwrQkFBK0I7QUFDaEY7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLE1BQU0sQ0FXTDtBQUNEIiwic291cmNlcyI6WyIvaG9tZS91c2VyL3N0dWRpby9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9jb3JlL2xpYi90cmFjaW5nL3R5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciB0eXBlc19leHBvcnRzID0ge307XG5fX2V4cG9ydCh0eXBlc19leHBvcnRzLCB7XG4gIEluc3RydW1lbnRhdGlvbkxpYnJhcnlTY2hlbWE6ICgpID0+IEluc3RydW1lbnRhdGlvbkxpYnJhcnlTY2hlbWEsXG4gIExpbmtTY2hlbWE6ICgpID0+IExpbmtTY2hlbWEsXG4gIFBhdGhNZXRhZGF0YVNjaGVtYTogKCkgPT4gUGF0aE1ldGFkYXRhU2NoZW1hLFxuICBTcGFuQ29udGV4dFNjaGVtYTogKCkgPT4gU3BhbkNvbnRleHRTY2hlbWEsXG4gIFNwYW5EYXRhU2NoZW1hOiAoKSA9PiBTcGFuRGF0YVNjaGVtYSxcbiAgU3Bhbk1ldGFkYXRhU2NoZW1hOiAoKSA9PiBTcGFuTWV0YWRhdGFTY2hlbWEsXG4gIFNwYW5TdGF0dXNTY2hlbWE6ICgpID0+IFNwYW5TdGF0dXNTY2hlbWEsXG4gIFRpbWVFdmVudFNjaGVtYTogKCkgPT4gVGltZUV2ZW50U2NoZW1hLFxuICBUcmFjZURhdGFTY2hlbWE6ICgpID0+IFRyYWNlRGF0YVNjaGVtYSxcbiAgVHJhY2VNZXRhZGF0YVNjaGVtYTogKCkgPT4gVHJhY2VNZXRhZGF0YVNjaGVtYVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyh0eXBlc19leHBvcnRzKTtcbnZhciBpbXBvcnRfem9kID0gcmVxdWlyZShcInpvZFwiKTtcbmNvbnN0IFBhdGhNZXRhZGF0YVNjaGVtYSA9IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICBwYXRoOiBpbXBvcnRfem9kLnouc3RyaW5nKCksXG4gIHN0YXR1czogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICBlcnJvcjogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIGxhdGVuY3k6IGltcG9ydF96b2Quei5udW1iZXIoKVxufSk7XG5jb25zdCBUcmFjZU1ldGFkYXRhU2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIGZlYXR1cmVOYW1lOiBpbXBvcnRfem9kLnouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgcGF0aHM6IGltcG9ydF96b2Quei5zZXQoUGF0aE1ldGFkYXRhU2NoZW1hKS5vcHRpb25hbCgpLFxuICB0aW1lc3RhbXA6IGltcG9ydF96b2Quei5udW1iZXIoKVxufSk7XG5jb25zdCBTcGFuTWV0YWRhdGFTY2hlbWEgPSBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgbmFtZTogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICBzdGF0ZTogaW1wb3J0X3pvZC56LmVudW0oW1wic3VjY2Vzc1wiLCBcImVycm9yXCJdKS5vcHRpb25hbCgpLFxuICBpbnB1dDogaW1wb3J0X3pvZC56LmFueSgpLm9wdGlvbmFsKCksXG4gIG91dHB1dDogaW1wb3J0X3pvZC56LmFueSgpLm9wdGlvbmFsKCksXG4gIGlzUm9vdDogaW1wb3J0X3pvZC56LmJvb2xlYW4oKS5vcHRpb25hbCgpLFxuICBtZXRhZGF0YTogaW1wb3J0X3pvZC56LnJlY29yZChpbXBvcnRfem9kLnouc3RyaW5nKCksIGltcG9ydF96b2Quei5zdHJpbmcoKSkub3B0aW9uYWwoKSxcbiAgcGF0aDogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKClcbn0pO1xuY29uc3QgU3BhblN0YXR1c1NjaGVtYSA9IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICBjb2RlOiBpbXBvcnRfem9kLnoubnVtYmVyKCksXG4gIG1lc3NhZ2U6IGltcG9ydF96b2Quei5zdHJpbmcoKS5vcHRpb25hbCgpXG59KTtcbmNvbnN0IFRpbWVFdmVudFNjaGVtYSA9IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICB0aW1lOiBpbXBvcnRfem9kLnoubnVtYmVyKCksXG4gIGFubm90YXRpb246IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICAgIGF0dHJpYnV0ZXM6IGltcG9ydF96b2Quei5yZWNvcmQoaW1wb3J0X3pvZC56LnN0cmluZygpLCBpbXBvcnRfem9kLnouYW55KCkpLFxuICAgIGRlc2NyaXB0aW9uOiBpbXBvcnRfem9kLnouc3RyaW5nKClcbiAgfSlcbn0pO1xuY29uc3QgU3BhbkNvbnRleHRTY2hlbWEgPSBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgdHJhY2VJZDogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICBzcGFuSWQ6IGltcG9ydF96b2Quei5zdHJpbmcoKSxcbiAgaXNSZW1vdGU6IGltcG9ydF96b2Quei5ib29sZWFuKCkub3B0aW9uYWwoKSxcbiAgdHJhY2VGbGFnczogaW1wb3J0X3pvZC56Lm51bWJlcigpXG59KTtcbmNvbnN0IExpbmtTY2hlbWEgPSBpbXBvcnRfem9kLnoub2JqZWN0KHtcbiAgY29udGV4dDogU3BhbkNvbnRleHRTY2hlbWEub3B0aW9uYWwoKSxcbiAgYXR0cmlidXRlczogaW1wb3J0X3pvZC56LnJlY29yZChpbXBvcnRfem9kLnouc3RyaW5nKCksIGltcG9ydF96b2Quei5hbnkoKSkub3B0aW9uYWwoKSxcbiAgZHJvcHBlZEF0dHJpYnV0ZXNDb3VudDogaW1wb3J0X3pvZC56Lm51bWJlcigpLm9wdGlvbmFsKClcbn0pO1xuY29uc3QgSW5zdHJ1bWVudGF0aW9uTGlicmFyeVNjaGVtYSA9IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICBuYW1lOiBpbXBvcnRfem9kLnouc3RyaW5nKCkucmVhZG9ubHkoKSxcbiAgdmVyc2lvbjogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKCkucmVhZG9ubHkoKSxcbiAgc2NoZW1hVXJsOiBpbXBvcnRfem9kLnouc3RyaW5nKCkub3B0aW9uYWwoKS5yZWFkb25seSgpXG59KTtcbmNvbnN0IFNwYW5EYXRhU2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIHNwYW5JZDogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICB0cmFjZUlkOiBpbXBvcnRfem9kLnouc3RyaW5nKCksXG4gIHBhcmVudFNwYW5JZDogaW1wb3J0X3pvZC56LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIHN0YXJ0VGltZTogaW1wb3J0X3pvZC56Lm51bWJlcigpLFxuICBlbmRUaW1lOiBpbXBvcnRfem9kLnoubnVtYmVyKCksXG4gIGF0dHJpYnV0ZXM6IGltcG9ydF96b2Quei5yZWNvcmQoaW1wb3J0X3pvZC56LnN0cmluZygpLCBpbXBvcnRfem9kLnouYW55KCkpLFxuICBkaXNwbGF5TmFtZTogaW1wb3J0X3pvZC56LnN0cmluZygpLFxuICBsaW5rczogaW1wb3J0X3pvZC56LmFycmF5KExpbmtTY2hlbWEpLm9wdGlvbmFsKCksXG4gIGluc3RydW1lbnRhdGlvbkxpYnJhcnk6IEluc3RydW1lbnRhdGlvbkxpYnJhcnlTY2hlbWEsXG4gIHNwYW5LaW5kOiBpbXBvcnRfem9kLnouc3RyaW5nKCksXG4gIHNhbWVQcm9jZXNzQXNQYXJlbnRTcGFuOiBpbXBvcnRfem9kLnoub2JqZWN0KHsgdmFsdWU6IGltcG9ydF96b2Quei5ib29sZWFuKCkgfSkub3B0aW9uYWwoKSxcbiAgc3RhdHVzOiBTcGFuU3RhdHVzU2NoZW1hLm9wdGlvbmFsKCksXG4gIHRpbWVFdmVudHM6IGltcG9ydF96b2Quei5vYmplY3Qoe1xuICAgIHRpbWVFdmVudDogaW1wb3J0X3pvZC56LmFycmF5KFRpbWVFdmVudFNjaGVtYSlcbiAgfSkub3B0aW9uYWwoKSxcbiAgdHJ1bmNhdGVkOiBpbXBvcnRfem9kLnouYm9vbGVhbigpLm9wdGlvbmFsKClcbn0pO1xuY29uc3QgVHJhY2VEYXRhU2NoZW1hID0gaW1wb3J0X3pvZC56Lm9iamVjdCh7XG4gIHRyYWNlSWQ6IGltcG9ydF96b2Quei5zdHJpbmcoKSxcbiAgZGlzcGxheU5hbWU6IGltcG9ydF96b2Quei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBzdGFydFRpbWU6IGltcG9ydF96b2Quei5udW1iZXIoKS5vcHRpb25hbCgpLmRlc2NyaWJlKFwidHJhY2Ugc3RhcnQgdGltZSBpbiBtaWxsaXNlY29uZHMgc2luY2UgdGhlIGVwb2NoXCIpLFxuICBlbmRUaW1lOiBpbXBvcnRfem9kLnoubnVtYmVyKCkub3B0aW9uYWwoKS5kZXNjcmliZShcImVuZCB0aW1lIGluIG1pbGxpc2Vjb25kcyBzaW5jZSB0aGUgZXBvY2hcIiksXG4gIHNwYW5zOiBpbXBvcnRfem9kLnoucmVjb3JkKGltcG9ydF96b2Quei5zdHJpbmcoKSwgU3BhbkRhdGFTY2hlbWEpXG59KTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBJbnN0cnVtZW50YXRpb25MaWJyYXJ5U2NoZW1hLFxuICBMaW5rU2NoZW1hLFxuICBQYXRoTWV0YWRhdGFTY2hlbWEsXG4gIFNwYW5Db250ZXh0U2NoZW1hLFxuICBTcGFuRGF0YVNjaGVtYSxcbiAgU3Bhbk1ldGFkYXRhU2NoZW1hLFxuICBTcGFuU3RhdHVzU2NoZW1hLFxuICBUaW1lRXZlbnRTY2hlbWEsXG4gIFRyYWNlRGF0YVNjaGVtYSxcbiAgVHJhY2VNZXRhZGF0YVNjaGVtYVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/tracing/types.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/core/lib/utils.js":
/*!***************************************************!*\
  !*** ./node_modules/@genkit-ai/core/lib/utils.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar utils_exports = {};\n__export(utils_exports, {\n  deleteUndefinedProps: () => deleteUndefinedProps,\n  featureMetadataPrefix: () => featureMetadataPrefix,\n  getCurrentEnv: () => getCurrentEnv,\n  isDevEnv: () => isDevEnv,\n  stripUndefinedProps: () => stripUndefinedProps\n});\nmodule.exports = __toCommonJS(utils_exports);\nfunction deleteUndefinedProps(obj) {\n  for (const prop in obj) {\n    if (obj[prop] === void 0) {\n      delete obj[prop];\n    } else {\n      if (typeof obj[prop] === \"object\") {\n        deleteUndefinedProps(obj[prop]);\n      }\n    }\n  }\n}\nfunction stripUndefinedProps(input) {\n  if (input === void 0 || input === null || Array.isArray(input) || typeof input !== \"object\") {\n    return input;\n  }\n  const out = {};\n  for (const key in input) {\n    if (input[key] !== void 0) {\n      out[key] = stripUndefinedProps(input[key]);\n    }\n  }\n  return out;\n}\nfunction getCurrentEnv() {\n  return process.env.GENKIT_ENV || \"prod\";\n}\nfunction isDevEnv() {\n  return getCurrentEnv() === \"dev\";\n}\nfunction featureMetadataPrefix(name) {\n  return `feature:${name}`;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2NvcmUvbGliL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixLQUFLO0FBQ3pCO0FBQ0E7QUFDQSxNQUFNLENBTUw7QUFDRCIsInNvdXJjZXMiOlsiL2hvbWUvdXNlci9zdHVkaW8vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvY29yZS9saWIvdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHV0aWxzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHV0aWxzX2V4cG9ydHMsIHtcbiAgZGVsZXRlVW5kZWZpbmVkUHJvcHM6ICgpID0+IGRlbGV0ZVVuZGVmaW5lZFByb3BzLFxuICBmZWF0dXJlTWV0YWRhdGFQcmVmaXg6ICgpID0+IGZlYXR1cmVNZXRhZGF0YVByZWZpeCxcbiAgZ2V0Q3VycmVudEVudjogKCkgPT4gZ2V0Q3VycmVudEVudixcbiAgaXNEZXZFbnY6ICgpID0+IGlzRGV2RW52LFxuICBzdHJpcFVuZGVmaW5lZFByb3BzOiAoKSA9PiBzdHJpcFVuZGVmaW5lZFByb3BzXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHV0aWxzX2V4cG9ydHMpO1xuZnVuY3Rpb24gZGVsZXRlVW5kZWZpbmVkUHJvcHMob2JqKSB7XG4gIGZvciAoY29uc3QgcHJvcCBpbiBvYmopIHtcbiAgICBpZiAob2JqW3Byb3BdID09PSB2b2lkIDApIHtcbiAgICAgIGRlbGV0ZSBvYmpbcHJvcF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqW3Byb3BdID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGRlbGV0ZVVuZGVmaW5lZFByb3BzKG9ialtwcm9wXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBzdHJpcFVuZGVmaW5lZFByb3BzKGlucHV0KSB7XG4gIGlmIChpbnB1dCA9PT0gdm9pZCAwIHx8IGlucHV0ID09PSBudWxsIHx8IEFycmF5LmlzQXJyYXkoaW5wdXQpIHx8IHR5cGVvZiBpbnB1dCAhPT0gXCJvYmplY3RcIikge1xuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuICBjb25zdCBvdXQgPSB7fTtcbiAgZm9yIChjb25zdCBrZXkgaW4gaW5wdXQpIHtcbiAgICBpZiAoaW5wdXRba2V5XSAhPT0gdm9pZCAwKSB7XG4gICAgICBvdXRba2V5XSA9IHN0cmlwVW5kZWZpbmVkUHJvcHMoaW5wdXRba2V5XSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXQ7XG59XG5mdW5jdGlvbiBnZXRDdXJyZW50RW52KCkge1xuICByZXR1cm4gcHJvY2Vzcy5lbnYuR0VOS0lUX0VOViB8fCBcInByb2RcIjtcbn1cbmZ1bmN0aW9uIGlzRGV2RW52KCkge1xuICByZXR1cm4gZ2V0Q3VycmVudEVudigpID09PSBcImRldlwiO1xufVxuZnVuY3Rpb24gZmVhdHVyZU1ldGFkYXRhUHJlZml4KG5hbWUpIHtcbiAgcmV0dXJuIGBmZWF0dXJlOiR7bmFtZX1gO1xufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlbGV0ZVVuZGVmaW5lZFByb3BzLFxuICBmZWF0dXJlTWV0YWRhdGFQcmVmaXgsXG4gIGdldEN1cnJlbnRFbnYsXG4gIGlzRGV2RW52LFxuICBzdHJpcFVuZGVmaW5lZFByb3BzXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/core/lib/utils.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/common.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/common.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar common_exports = {};\n__export(common_exports, {\n  getApiKeyFromEnvVar: () => getApiKeyFromEnvVar\n});\nmodule.exports = __toCommonJS(common_exports);\nvar import_process = __toESM(__webpack_require__(/*! process */ \"process\"));\nfunction getApiKeyFromEnvVar() {\n  return import_process.default.env.GEMINI_API_KEY || import_process.default.env.GOOGLE_API_KEY || import_process.default.env.GOOGLE_GENAI_API_KEY;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9jb21tb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxtR0FBbUc7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsOEJBQThCO0FBQ3ZHO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsNkJBQTZCLG1CQUFPLENBQUMsd0JBQVM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBRUw7QUFDRCIsInNvdXJjZXMiOlsiL2hvbWUvdXNlci9zdHVkaW8vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvZ29vZ2xlYWkvbGliL2NvbW1vbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0VTTSA9IChtb2QsIGlzTm9kZU1vZGUsIHRhcmdldCkgPT4gKHRhcmdldCA9IG1vZCAhPSBudWxsID8gX19jcmVhdGUoX19nZXRQcm90b09mKG1vZCkpIDoge30sIF9fY29weVByb3BzKFxuICAvLyBJZiB0aGUgaW1wb3J0ZXIgaXMgaW4gbm9kZSBjb21wYXRpYmlsaXR5IG1vZGUgb3IgdGhpcyBpcyBub3QgYW4gRVNNXG4gIC8vIGZpbGUgdGhhdCBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYSBDb21tb25KUyBmaWxlIHVzaW5nIGEgQmFiZWwtXG4gIC8vIGNvbXBhdGlibGUgdHJhbnNmb3JtIChpLmUuIFwiX19lc01vZHVsZVwiIGhhcyBub3QgYmVlbiBzZXQpLCB0aGVuIHNldFxuICAvLyBcImRlZmF1bHRcIiB0byB0aGUgQ29tbW9uSlMgXCJtb2R1bGUuZXhwb3J0c1wiIGZvciBub2RlIGNvbXBhdGliaWxpdHkuXG4gIGlzTm9kZU1vZGUgfHwgIW1vZCB8fCAhbW9kLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AodGFyZ2V0LCBcImRlZmF1bHRcIiwgeyB2YWx1ZTogbW9kLCBlbnVtZXJhYmxlOiB0cnVlIH0pIDogdGFyZ2V0LFxuICBtb2RcbikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgY29tbW9uX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGNvbW1vbl9leHBvcnRzLCB7XG4gIGdldEFwaUtleUZyb21FbnZWYXI6ICgpID0+IGdldEFwaUtleUZyb21FbnZWYXJcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoY29tbW9uX2V4cG9ydHMpO1xudmFyIGltcG9ydF9wcm9jZXNzID0gX190b0VTTShyZXF1aXJlKFwicHJvY2Vzc1wiKSk7XG5mdW5jdGlvbiBnZXRBcGlLZXlGcm9tRW52VmFyKCkge1xuICByZXR1cm4gaW1wb3J0X3Byb2Nlc3MuZGVmYXVsdC5lbnYuR0VNSU5JX0FQSV9LRVkgfHwgaW1wb3J0X3Byb2Nlc3MuZGVmYXVsdC5lbnYuR09PR0xFX0FQSV9LRVkgfHwgaW1wb3J0X3Byb2Nlc3MuZGVmYXVsdC5lbnYuR09PR0xFX0dFTkFJX0FQSV9LRVk7XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0QXBpS2V5RnJvbUVudlZhclxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/common.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/constants.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/context-caching/constants.js ***!
  \***************************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar constants_exports = {};\n__export(constants_exports, {\n  CONTEXT_CACHE_SUPPORTED_MODELS: () => CONTEXT_CACHE_SUPPORTED_MODELS,\n  DEFAULT_TTL: () => DEFAULT_TTL,\n  INVALID_ARGUMENT_MESSAGES: () => INVALID_ARGUMENT_MESSAGES\n});\nmodule.exports = __toCommonJS(constants_exports);\nconst CONTEXT_CACHE_SUPPORTED_MODELS = [\n  \"gemini-1.5-flash-001\",\n  \"gemini-1.5-pro-001\"\n];\nconst INVALID_ARGUMENT_MESSAGES = {\n  modelVersion: `Model version is required for context caching, supported only in ${CONTEXT_CACHE_SUPPORTED_MODELS.join(\",\")} models.`,\n  tools: \"Context caching cannot be used simultaneously with tools.\",\n  codeExecution: \"Context caching cannot be used simultaneously with code execution.\"\n};\nconst DEFAULT_TTL = 300;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9jb250ZXh0LWNhY2hpbmcvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0JBQWtCLGFBQWE7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRkFBb0YsMENBQTBDO0FBQzlIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBSUw7QUFDRCIsInNvdXJjZXMiOlsiL2hvbWUvdXNlci9zdHVkaW8vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvZ29vZ2xlYWkvbGliL2NvbnRleHQtY2FjaGluZy9jb25zdGFudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGNvbnN0YW50c19leHBvcnRzID0ge307XG5fX2V4cG9ydChjb25zdGFudHNfZXhwb3J0cywge1xuICBDT05URVhUX0NBQ0hFX1NVUFBPUlRFRF9NT0RFTFM6ICgpID0+IENPTlRFWFRfQ0FDSEVfU1VQUE9SVEVEX01PREVMUyxcbiAgREVGQVVMVF9UVEw6ICgpID0+IERFRkFVTFRfVFRMLFxuICBJTlZBTElEX0FSR1VNRU5UX01FU1NBR0VTOiAoKSA9PiBJTlZBTElEX0FSR1VNRU5UX01FU1NBR0VTXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGNvbnN0YW50c19leHBvcnRzKTtcbmNvbnN0IENPTlRFWFRfQ0FDSEVfU1VQUE9SVEVEX01PREVMUyA9IFtcbiAgXCJnZW1pbmktMS41LWZsYXNoLTAwMVwiLFxuICBcImdlbWluaS0xLjUtcHJvLTAwMVwiXG5dO1xuY29uc3QgSU5WQUxJRF9BUkdVTUVOVF9NRVNTQUdFUyA9IHtcbiAgbW9kZWxWZXJzaW9uOiBgTW9kZWwgdmVyc2lvbiBpcyByZXF1aXJlZCBmb3IgY29udGV4dCBjYWNoaW5nLCBzdXBwb3J0ZWQgb25seSBpbiAke0NPTlRFWFRfQ0FDSEVfU1VQUE9SVEVEX01PREVMUy5qb2luKFwiLFwiKX0gbW9kZWxzLmAsXG4gIHRvb2xzOiBcIkNvbnRleHQgY2FjaGluZyBjYW5ub3QgYmUgdXNlZCBzaW11bHRhbmVvdXNseSB3aXRoIHRvb2xzLlwiLFxuICBjb2RlRXhlY3V0aW9uOiBcIkNvbnRleHQgY2FjaGluZyBjYW5ub3QgYmUgdXNlZCBzaW11bHRhbmVvdXNseSB3aXRoIGNvZGUgZXhlY3V0aW9uLlwiXG59O1xuY29uc3QgREVGQVVMVF9UVEwgPSAzMDA7XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ09OVEVYVF9DQUNIRV9TVVBQT1JURURfTU9ERUxTLFxuICBERUZBVUxUX1RUTCxcbiAgSU5WQUxJRF9BUkdVTUVOVF9NRVNTQUdFU1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/constants.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/context-caching/index.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar context_caching_exports = {};\n__export(context_caching_exports, {\n  handleCacheIfNeeded: () => handleCacheIfNeeded,\n  handleContextCache: () => handleContextCache\n});\nmodule.exports = __toCommonJS(context_caching_exports);\nvar import_server = __webpack_require__(/*! @google/generative-ai/server */ \"(action-browser)/./node_modules/@google/generative-ai/dist/server/index.js\");\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_logging = __webpack_require__(/*! genkit/logging */ \"(action-browser)/./node_modules/genkit/lib/logging.js\");\nvar import_utils = __webpack_require__(/*! ./utils.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/utils.js\");\nasync function handleContextCache(apiKey, request, chatRequest, modelVersion, cacheConfigDetails) {\n  const cacheManager = new import_server.GoogleAICacheManager(apiKey);\n  const { cachedContent, chatRequest: newChatRequest } = (0, import_utils.getContentForCache)(\n    request,\n    chatRequest,\n    modelVersion,\n    cacheConfigDetails\n  );\n  cachedContent.model = modelVersion;\n  const cacheKey = (0, import_utils.generateCacheKey)(cachedContent);\n  cachedContent.displayName = cacheKey;\n  let cache = await (0, import_utils.lookupContextCache)(cacheManager, cacheKey);\n  import_logging.logger.debug(`Cache hit: ${cache ? \"true\" : \"false\"}`);\n  if (!cache) {\n    try {\n      import_logging.logger.debug(\"No cache found, creating one.\");\n      const createParams = {\n        ...cachedContent,\n        ttlSeconds: (0, import_utils.calculateTTL)(cacheConfigDetails)\n      };\n      cache = await cacheManager.create(createParams);\n      import_logging.logger.debug(`Created new cache entry with key: ${cacheKey}`);\n    } catch (cacheError) {\n      import_logging.logger.error(\n        `Failed to create cache with key ${cacheKey}: ${cacheError}`\n      );\n      throw new import_genkit.GenkitError({\n        status: \"INTERNAL\",\n        message: `Failed to create cache: ${cacheError}`\n      });\n    }\n  }\n  if (!cache) {\n    throw new import_genkit.GenkitError({\n      status: \"INTERNAL\",\n      message: \"Failed to use context cache feature\"\n    });\n  }\n  return { cache, newChatRequest };\n}\nasync function handleCacheIfNeeded(apiKey, request, chatRequest, modelVersion, cacheConfigDetails) {\n  if (!cacheConfigDetails || !(0, import_utils.validateContextCacheRequest)(request, modelVersion)) {\n    return { chatRequest, cache: null };\n  }\n  const { cache, newChatRequest } = await handleContextCache(\n    apiKey,\n    request,\n    chatRequest,\n    modelVersion,\n    cacheConfigDetails\n  );\n  return { chatRequest: newChatRequest, cache };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9jb250ZXh0LWNhY2hpbmcvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG9CQUFvQixtQkFBTyxDQUFDLGdIQUE4QjtBQUMxRCxvQkFBb0IsbUJBQU8sQ0FBQyxtRUFBUTtBQUNwQyxxQkFBcUIsbUJBQU8sQ0FBQyw2RUFBZ0I7QUFDN0MsbUJBQW1CLG1CQUFPLENBQUMsb0dBQVk7QUFDdkM7QUFDQTtBQUNBLFVBQVUsNkNBQTZDO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0Qyx5QkFBeUI7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVFQUF1RSxTQUFTO0FBQ2hGLE1BQU07QUFDTjtBQUNBLDJDQUEyQyxTQUFTLElBQUksV0FBVztBQUNuRTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsV0FBVztBQUN2RCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFVBQVUsd0JBQXdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsTUFBTSxDQUdMO0FBQ0QiLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvc3R1ZGlvL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9jb250ZXh0LWNhY2hpbmcvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGNvbnRleHRfY2FjaGluZ19leHBvcnRzID0ge307XG5fX2V4cG9ydChjb250ZXh0X2NhY2hpbmdfZXhwb3J0cywge1xuICBoYW5kbGVDYWNoZUlmTmVlZGVkOiAoKSA9PiBoYW5kbGVDYWNoZUlmTmVlZGVkLFxuICBoYW5kbGVDb250ZXh0Q2FjaGU6ICgpID0+IGhhbmRsZUNvbnRleHRDYWNoZVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhjb250ZXh0X2NhY2hpbmdfZXhwb3J0cyk7XG52YXIgaW1wb3J0X3NlcnZlciA9IHJlcXVpcmUoXCJAZ29vZ2xlL2dlbmVyYXRpdmUtYWkvc2VydmVyXCIpO1xudmFyIGltcG9ydF9nZW5raXQgPSByZXF1aXJlKFwiZ2Vua2l0XCIpO1xudmFyIGltcG9ydF9sb2dnaW5nID0gcmVxdWlyZShcImdlbmtpdC9sb2dnaW5nXCIpO1xudmFyIGltcG9ydF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzLmpzXCIpO1xuYXN5bmMgZnVuY3Rpb24gaGFuZGxlQ29udGV4dENhY2hlKGFwaUtleSwgcmVxdWVzdCwgY2hhdFJlcXVlc3QsIG1vZGVsVmVyc2lvbiwgY2FjaGVDb25maWdEZXRhaWxzKSB7XG4gIGNvbnN0IGNhY2hlTWFuYWdlciA9IG5ldyBpbXBvcnRfc2VydmVyLkdvb2dsZUFJQ2FjaGVNYW5hZ2VyKGFwaUtleSk7XG4gIGNvbnN0IHsgY2FjaGVkQ29udGVudCwgY2hhdFJlcXVlc3Q6IG5ld0NoYXRSZXF1ZXN0IH0gPSAoMCwgaW1wb3J0X3V0aWxzLmdldENvbnRlbnRGb3JDYWNoZSkoXG4gICAgcmVxdWVzdCxcbiAgICBjaGF0UmVxdWVzdCxcbiAgICBtb2RlbFZlcnNpb24sXG4gICAgY2FjaGVDb25maWdEZXRhaWxzXG4gICk7XG4gIGNhY2hlZENvbnRlbnQubW9kZWwgPSBtb2RlbFZlcnNpb247XG4gIGNvbnN0IGNhY2hlS2V5ID0gKDAsIGltcG9ydF91dGlscy5nZW5lcmF0ZUNhY2hlS2V5KShjYWNoZWRDb250ZW50KTtcbiAgY2FjaGVkQ29udGVudC5kaXNwbGF5TmFtZSA9IGNhY2hlS2V5O1xuICBsZXQgY2FjaGUgPSBhd2FpdCAoMCwgaW1wb3J0X3V0aWxzLmxvb2t1cENvbnRleHRDYWNoZSkoY2FjaGVNYW5hZ2VyLCBjYWNoZUtleSk7XG4gIGltcG9ydF9sb2dnaW5nLmxvZ2dlci5kZWJ1ZyhgQ2FjaGUgaGl0OiAke2NhY2hlID8gXCJ0cnVlXCIgOiBcImZhbHNlXCJ9YCk7XG4gIGlmICghY2FjaGUpIHtcbiAgICB0cnkge1xuICAgICAgaW1wb3J0X2xvZ2dpbmcubG9nZ2VyLmRlYnVnKFwiTm8gY2FjaGUgZm91bmQsIGNyZWF0aW5nIG9uZS5cIik7XG4gICAgICBjb25zdCBjcmVhdGVQYXJhbXMgPSB7XG4gICAgICAgIC4uLmNhY2hlZENvbnRlbnQsXG4gICAgICAgIHR0bFNlY29uZHM6ICgwLCBpbXBvcnRfdXRpbHMuY2FsY3VsYXRlVFRMKShjYWNoZUNvbmZpZ0RldGFpbHMpXG4gICAgICB9O1xuICAgICAgY2FjaGUgPSBhd2FpdCBjYWNoZU1hbmFnZXIuY3JlYXRlKGNyZWF0ZVBhcmFtcyk7XG4gICAgICBpbXBvcnRfbG9nZ2luZy5sb2dnZXIuZGVidWcoYENyZWF0ZWQgbmV3IGNhY2hlIGVudHJ5IHdpdGgga2V5OiAke2NhY2hlS2V5fWApO1xuICAgIH0gY2F0Y2ggKGNhY2hlRXJyb3IpIHtcbiAgICAgIGltcG9ydF9sb2dnaW5nLmxvZ2dlci5lcnJvcihcbiAgICAgICAgYEZhaWxlZCB0byBjcmVhdGUgY2FjaGUgd2l0aCBrZXkgJHtjYWNoZUtleX06ICR7Y2FjaGVFcnJvcn1gXG4gICAgICApO1xuICAgICAgdGhyb3cgbmV3IGltcG9ydF9nZW5raXQuR2Vua2l0RXJyb3Ioe1xuICAgICAgICBzdGF0dXM6IFwiSU5URVJOQUxcIixcbiAgICAgICAgbWVzc2FnZTogYEZhaWxlZCB0byBjcmVhdGUgY2FjaGU6ICR7Y2FjaGVFcnJvcn1gXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgaWYgKCFjYWNoZSkge1xuICAgIHRocm93IG5ldyBpbXBvcnRfZ2Vua2l0LkdlbmtpdEVycm9yKHtcbiAgICAgIHN0YXR1czogXCJJTlRFUk5BTFwiLFxuICAgICAgbWVzc2FnZTogXCJGYWlsZWQgdG8gdXNlIGNvbnRleHQgY2FjaGUgZmVhdHVyZVwiXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHsgY2FjaGUsIG5ld0NoYXRSZXF1ZXN0IH07XG59XG5hc3luYyBmdW5jdGlvbiBoYW5kbGVDYWNoZUlmTmVlZGVkKGFwaUtleSwgcmVxdWVzdCwgY2hhdFJlcXVlc3QsIG1vZGVsVmVyc2lvbiwgY2FjaGVDb25maWdEZXRhaWxzKSB7XG4gIGlmICghY2FjaGVDb25maWdEZXRhaWxzIHx8ICEoMCwgaW1wb3J0X3V0aWxzLnZhbGlkYXRlQ29udGV4dENhY2hlUmVxdWVzdCkocmVxdWVzdCwgbW9kZWxWZXJzaW9uKSkge1xuICAgIHJldHVybiB7IGNoYXRSZXF1ZXN0LCBjYWNoZTogbnVsbCB9O1xuICB9XG4gIGNvbnN0IHsgY2FjaGUsIG5ld0NoYXRSZXF1ZXN0IH0gPSBhd2FpdCBoYW5kbGVDb250ZXh0Q2FjaGUoXG4gICAgYXBpS2V5LFxuICAgIHJlcXVlc3QsXG4gICAgY2hhdFJlcXVlc3QsXG4gICAgbW9kZWxWZXJzaW9uLFxuICAgIGNhY2hlQ29uZmlnRGV0YWlsc1xuICApO1xuICByZXR1cm4geyBjaGF0UmVxdWVzdDogbmV3Q2hhdFJlcXVlc3QsIGNhY2hlIH07XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgaGFuZGxlQ2FjaGVJZk5lZWRlZCxcbiAgaGFuZGxlQ29udGV4dENhY2hlXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/types.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/context-caching/types.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar types_exports = {};\n__export(types_exports, {\n  cacheConfigDetailsSchema: () => cacheConfigDetailsSchema,\n  cacheConfigSchema: () => cacheConfigSchema\n});\nmodule.exports = __toCommonJS(types_exports);\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nconst cacheConfigSchema = import_genkit.z.union([\n  import_genkit.z.boolean(),\n  import_genkit.z.object({ ttlSeconds: import_genkit.z.number().optional() }).passthrough()\n]);\nconst cacheConfigDetailsSchema = import_genkit.z.object({\n  cacheConfig: cacheConfigSchema,\n  endOfCachedContents: import_genkit.z.number()\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9jb250ZXh0LWNhY2hpbmcvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG9CQUFvQixtQkFBTyxDQUFDLG1FQUFRO0FBQ3BDO0FBQ0E7QUFDQSwyQkFBMkIsaURBQWlEO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsTUFBTSxDQUdMO0FBQ0QiLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvc3R1ZGlvL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9jb250ZXh0LWNhY2hpbmcvdHlwZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHR5cGVzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHR5cGVzX2V4cG9ydHMsIHtcbiAgY2FjaGVDb25maWdEZXRhaWxzU2NoZW1hOiAoKSA9PiBjYWNoZUNvbmZpZ0RldGFpbHNTY2hlbWEsXG4gIGNhY2hlQ29uZmlnU2NoZW1hOiAoKSA9PiBjYWNoZUNvbmZpZ1NjaGVtYVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyh0eXBlc19leHBvcnRzKTtcbnZhciBpbXBvcnRfZ2Vua2l0ID0gcmVxdWlyZShcImdlbmtpdFwiKTtcbmNvbnN0IGNhY2hlQ29uZmlnU2NoZW1hID0gaW1wb3J0X2dlbmtpdC56LnVuaW9uKFtcbiAgaW1wb3J0X2dlbmtpdC56LmJvb2xlYW4oKSxcbiAgaW1wb3J0X2dlbmtpdC56Lm9iamVjdCh7IHR0bFNlY29uZHM6IGltcG9ydF9nZW5raXQuei5udW1iZXIoKS5vcHRpb25hbCgpIH0pLnBhc3N0aHJvdWdoKClcbl0pO1xuY29uc3QgY2FjaGVDb25maWdEZXRhaWxzU2NoZW1hID0gaW1wb3J0X2dlbmtpdC56Lm9iamVjdCh7XG4gIGNhY2hlQ29uZmlnOiBjYWNoZUNvbmZpZ1NjaGVtYSxcbiAgZW5kT2ZDYWNoZWRDb250ZW50czogaW1wb3J0X2dlbmtpdC56Lm51bWJlcigpXG59KTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBjYWNoZUNvbmZpZ0RldGFpbHNTY2hlbWEsXG4gIGNhY2hlQ29uZmlnU2NoZW1hXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/types.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/utils.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/context-caching/utils.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar utils_exports = {};\n__export(utils_exports, {\n  calculateTTL: () => calculateTTL,\n  extractCacheConfig: () => extractCacheConfig,\n  findLastIndex: () => findLastIndex,\n  generateCacheKey: () => generateCacheKey,\n  getContentForCache: () => getContentForCache,\n  lookupContextCache: () => lookupContextCache,\n  validateContextCacheRequest: () => validateContextCacheRequest\n});\nmodule.exports = __toCommonJS(utils_exports);\nvar import_crypto = __toESM(__webpack_require__(/*! crypto */ \"crypto\"));\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_constants = __webpack_require__(/*! ./constants */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/constants.js\");\nvar import_types = __webpack_require__(/*! ./types */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/types.js\");\nfunction generateCacheKey(request) {\n  return import_crypto.default.createHash(\"sha256\").update(JSON.stringify(request)).digest(\"hex\");\n}\nfunction getContentForCache(request, chatRequest, modelVersion, cacheConfigDetails) {\n  if (!modelVersion) {\n    throw new Error(\"No model version provided for context caching\");\n  }\n  if (!chatRequest.history?.length) {\n    throw new Error(\"No history provided for context caching\");\n  }\n  validateHistoryLength(request, chatRequest);\n  const { endOfCachedContents, cacheConfig } = cacheConfigDetails;\n  const cachedContent = {\n    model: modelVersion,\n    contents: chatRequest.history.slice(0, endOfCachedContents + 1)\n  };\n  chatRequest.history = chatRequest.history.slice(endOfCachedContents + 1);\n  return { cachedContent, chatRequest, cacheConfig };\n}\nfunction validateHistoryLength(request, chatRequest) {\n  if (chatRequest.history?.length !== request.messages.length - 1) {\n    throw new import_genkit.GenkitError({\n      status: \"INTERNAL\",\n      message: \"Genkit request history and Gemini chat request history length do not match\"\n    });\n  }\n}\nasync function lookupContextCache(cacheManager, cacheKey, maxPages = 100, pageSize = 100) {\n  let currentPage = 0;\n  let pageToken;\n  try {\n    while (currentPage < maxPages) {\n      const { cachedContents, nextPageToken } = await cacheManager.list({\n        pageSize,\n        pageToken\n      });\n      const found = cachedContents?.find(\n        (content) => content.displayName === cacheKey\n      );\n      if (found) return found;\n      if (!nextPageToken) break;\n      pageToken = nextPageToken;\n      currentPage++;\n    }\n  } catch (error) {\n    const message = error instanceof Error ? error.message : \"Unknown Network Error\";\n    throw new import_genkit.GenkitError({\n      status: \"INTERNAL\",\n      message: `Error looking up context cache: ${message}`\n    });\n  }\n  return null;\n}\nconst extractCacheConfig = (request) => {\n  const endOfCachedContents = findLastIndex(\n    request.messages,\n    (message) => !!message.metadata?.cache\n  );\n  return endOfCachedContents === -1 ? null : {\n    endOfCachedContents,\n    cacheConfig: import_types.cacheConfigSchema.parse(\n      request.messages[endOfCachedContents].metadata?.cache\n    )\n  };\n};\nfunction validateContextCacheRequest(request, modelVersion) {\n  if (!modelVersion || !import_constants.CONTEXT_CACHE_SUPPORTED_MODELS.includes(modelVersion)) {\n    throw new import_genkit.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: import_constants.INVALID_ARGUMENT_MESSAGES.modelVersion\n    });\n  }\n  if (request.tools?.length)\n    throw new import_genkit.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: import_constants.INVALID_ARGUMENT_MESSAGES.tools\n    });\n  if (request.config?.codeExecution)\n    throw new import_genkit.GenkitError({\n      status: \"INVALID_ARGUMENT\",\n      message: import_constants.INVALID_ARGUMENT_MESSAGES.codeExecution\n    });\n  return true;\n}\nfunction findLastIndex(array, callback) {\n  for (let i = array.length - 1; i >= 0; i--) {\n    if (callback(array[i], i, array)) return i;\n  }\n  return -1;\n}\nfunction calculateTTL(cacheConfig) {\n  if (cacheConfig.cacheConfig === true) {\n    return import_constants.DEFAULT_TTL;\n  }\n  if (cacheConfig.cacheConfig === false) {\n    return 0;\n  }\n  return cacheConfig.cacheConfig.ttlSeconds || import_constants.DEFAULT_TTL;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/utils.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/embedder.js":
/*!**********************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/embedder.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar embedder_exports = {};\n__export(embedder_exports, {\n  GeminiEmbeddingConfigSchema: () => GeminiEmbeddingConfigSchema,\n  SUPPORTED_MODELS: () => SUPPORTED_MODELS,\n  TaskTypeSchema: () => TaskTypeSchema,\n  defineGoogleAIEmbedder: () => defineGoogleAIEmbedder,\n  textEmbedding004: () => textEmbedding004,\n  textEmbeddingGecko001: () => textEmbeddingGecko001\n});\nmodule.exports = __toCommonJS(embedder_exports);\nvar import_generative_ai = __webpack_require__(/*! @google/generative-ai */ \"(action-browser)/./node_modules/@google/generative-ai/dist/index.js\");\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_embedder = __webpack_require__(/*! genkit/embedder */ \"(action-browser)/./node_modules/genkit/lib/embedder.js\");\nvar import_common = __webpack_require__(/*! ./common.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/common.js\");\nconst TaskTypeSchema = import_genkit.z.enum([\n  \"RETRIEVAL_DOCUMENT\",\n  \"RETRIEVAL_QUERY\",\n  \"SEMANTIC_SIMILARITY\",\n  \"CLASSIFICATION\",\n  \"CLUSTERING\"\n]);\nconst GeminiEmbeddingConfigSchema = import_genkit.z.object({\n  /** Override the API key provided at plugin initialization. */\n  apiKey: import_genkit.z.string().optional(),\n  /**\n   * The `task_type` parameter is defined as the intended downstream application to help the model\n   * produce better quality embeddings.\n   **/\n  taskType: TaskTypeSchema.optional(),\n  title: import_genkit.z.string().optional(),\n  version: import_genkit.z.string().optional(),\n  /**\n   * The `outputDimensionality` parameter allows you to specify the dimensionality of the embedding output.\n   * By default, the model generates embeddings with 768 dimensions. Models such as\n   * `text-embedding-004`, `text-embedding-005`, and `text-multilingual-embedding-002`\n   * allow the output dimensionality to be adjusted between 1 and 768.\n   * By selecting a smaller output dimensionality, users can save memory and storage space, leading to more efficient computations.\n   **/\n  outputDimensionality: import_genkit.z.number().min(1).max(768).optional()\n});\nconst textEmbeddingGecko001 = (0, import_embedder.embedderRef)({\n  name: \"googleai/embedding-001\",\n  configSchema: GeminiEmbeddingConfigSchema,\n  info: {\n    dimensions: 768,\n    label: \"Google Gen AI - Text Embedding Gecko (Legacy)\",\n    supports: {\n      input: [\"text\"]\n    }\n  }\n});\nconst textEmbedding004 = (0, import_embedder.embedderRef)({\n  name: \"googleai/text-embedding-004\",\n  configSchema: GeminiEmbeddingConfigSchema,\n  info: {\n    dimensions: 768,\n    label: \"Google Gen AI - Text Embedding 001\",\n    supports: {\n      input: [\"text\"]\n    }\n  }\n});\nconst SUPPORTED_MODELS = {\n  \"embedding-001\": textEmbeddingGecko001,\n  \"text-embedding-004\": textEmbedding004\n};\nfunction defineGoogleAIEmbedder(ai, name, pluginOptions) {\n  let apiKey;\n  if (pluginOptions.apiKey !== false) {\n    apiKey = pluginOptions?.apiKey || (0, import_common.getApiKeyFromEnvVar)();\n    if (!apiKey)\n      throw new Error(\n        \"Please pass in the API key or set either GEMINI_API_KEY or GOOGLE_API_KEY environment variable.\\nFor more details see https://genkit.dev/docs/plugins/google-genai\"\n      );\n  }\n  const embedder = SUPPORTED_MODELS[name] ?? (0, import_embedder.embedderRef)({\n    name,\n    configSchema: GeminiEmbeddingConfigSchema,\n    info: {\n      dimensions: 768,\n      label: `Google AI - ${name}`,\n      supports: {\n        input: [\"text\", \"image\", \"video\"]\n      }\n    }\n  });\n  const apiModelName = embedder.name.startsWith(\"googleai/\") ? embedder.name.substring(\"googleai/\".length) : embedder.name;\n  return ai.defineEmbedder(\n    {\n      name: embedder.name,\n      configSchema: GeminiEmbeddingConfigSchema,\n      info: embedder.info\n    },\n    async (input, options) => {\n      if (pluginOptions.apiKey === false && !options?.apiKey) {\n        throw new import_genkit.GenkitError({\n          status: \"INVALID_ARGUMENT\",\n          message: \"GoogleAI plugin was initialized with {apiKey: false} but no apiKey configuration was passed at call time.\"\n        });\n      }\n      const client = new import_generative_ai.GoogleGenerativeAI(\n        options?.apiKey || apiKey\n      ).getGenerativeModel({\n        model: options?.version || embedder.config?.version || embedder.version || apiModelName\n      });\n      const embeddings = await Promise.all(\n        input.map(async (doc) => {\n          const response = await client.embedContent({\n            taskType: options?.taskType,\n            title: options?.title,\n            content: {\n              role: \"\",\n              parts: [{ text: doc.text }]\n            },\n            outputDimensionality: options?.outputDimensionality\n          });\n          const values = response.embedding.values;\n          return { embedding: values };\n        })\n      );\n      return { embeddings };\n    }\n  );\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=embedder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/embedder.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/gemini.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/gemini.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar gemini_exports = {};\n__export(gemini_exports, {\n  GENERIC_GEMINI_MODEL: () => GENERIC_GEMINI_MODEL,\n  GeminiConfigSchema: () => GeminiConfigSchema,\n  GeminiTtsConfigSchema: () => GeminiTtsConfigSchema,\n  SUPPORTED_GEMINI_MODELS: () => SUPPORTED_GEMINI_MODELS,\n  SUPPORTED_V15_MODELS: () => SUPPORTED_V15_MODELS,\n  aggregateResponses: () => aggregateResponses,\n  cleanSchema: () => cleanSchema,\n  defineGoogleAIModel: () => defineGoogleAIModel,\n  fromGeminiCandidate: () => fromGeminiCandidate,\n  gemini: () => gemini,\n  gemini10Pro: () => gemini10Pro,\n  gemini15Flash: () => gemini15Flash,\n  gemini15Flash8b: () => gemini15Flash8b,\n  gemini15Pro: () => gemini15Pro,\n  gemini20Flash: () => gemini20Flash,\n  gemini20FlashExp: () => gemini20FlashExp,\n  gemini20FlashLite: () => gemini20FlashLite,\n  gemini20ProExp0205: () => gemini20ProExp0205,\n  gemini25FlashPreview0417: () => gemini25FlashPreview0417,\n  gemini25FlashPreviewTts: () => gemini25FlashPreviewTts,\n  gemini25ProExp0325: () => gemini25ProExp0325,\n  gemini25ProPreview0325: () => gemini25ProPreview0325,\n  gemini25ProPreviewTts: () => gemini25ProPreviewTts,\n  toGeminiMessage: () => toGeminiMessage,\n  toGeminiSystemInstruction: () => toGeminiSystemInstruction,\n  toGeminiTool: () => toGeminiTool\n});\nmodule.exports = __toCommonJS(gemini_exports);\nvar import_generative_ai = __webpack_require__(/*! @google/generative-ai */ \"(action-browser)/./node_modules/@google/generative-ai/dist/index.js\");\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_model = __webpack_require__(/*! genkit/model */ \"(action-browser)/./node_modules/genkit/lib/model.js\");\nvar import_middleware = __webpack_require__(/*! genkit/model/middleware */ \"(action-browser)/./node_modules/genkit/lib/middleware.js\");\nvar import_tracing = __webpack_require__(/*! genkit/tracing */ \"(action-browser)/./node_modules/genkit/lib/tracing.js\");\nvar import_common = __webpack_require__(/*! ./common */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/common.js\");\nvar import_context_caching = __webpack_require__(/*! ./context-caching */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/index.js\");\nvar import_utils = __webpack_require__(/*! ./context-caching/utils */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/context-caching/utils.js\");\nconst SafetySettingsSchema = import_genkit.z.object({\n  category: import_genkit.z.enum([\n    \"HARM_CATEGORY_UNSPECIFIED\",\n    \"HARM_CATEGORY_HATE_SPEECH\",\n    \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n    \"HARM_CATEGORY_HARASSMENT\",\n    \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n    \"HARM_CATEGORY_CIVIC_INTEGRITY\"\n  ]),\n  threshold: import_genkit.z.enum([\n    \"BLOCK_LOW_AND_ABOVE\",\n    \"BLOCK_MEDIUM_AND_ABOVE\",\n    \"BLOCK_ONLY_HIGH\",\n    \"BLOCK_NONE\"\n  ])\n});\nconst VoiceConfigSchema = import_genkit.z.object({\n  prebuiltVoiceConfig: import_genkit.z.object({\n    // TODO: Make this an array of objects so we can also specify the description\n    // for each voiceName.\n    voiceName: import_genkit.z.union([\n      import_genkit.z.enum([\n        \"Zephyr\",\n        \"Puck\",\n        \"Charon\",\n        \"Kore\",\n        \"Fenrir\",\n        \"Leda\",\n        \"Orus\",\n        \"Aoede\",\n        \"Callirrhoe\",\n        \"Autonoe\",\n        \"Enceladus\",\n        \"Iapetus\",\n        \"Umbriel\",\n        \"Algieba\",\n        \"Despina\",\n        \"Erinome\",\n        \"Algenib\",\n        \"Rasalgethi\",\n        \"Laomedeia\",\n        \"Achernar\",\n        \"Alnilam\",\n        \"Schedar\",\n        \"Gacrux\",\n        \"Pulcherrima\",\n        \"Achird\",\n        \"Zubenelgenubi\",\n        \"Vindemiatrix\",\n        \"Sadachbia\",\n        \"Sadaltager\",\n        \"Sulafat\"\n      ]),\n      // To allow any new string values\n      import_genkit.z.string()\n    ]).describe(\"Name of the preset voice to use\").optional()\n  }).describe(\"Configuration for the prebuilt speaker to use\").passthrough().optional()\n}).describe(\"Configuration for the voice to use\").passthrough();\nconst GeminiConfigSchema = import_model.GenerationCommonConfigSchema.extend({\n  apiKey: import_genkit.z.string().describe(\"Overrides the plugin-configured API key, if specified.\").optional(),\n  safetySettings: import_genkit.z.array(SafetySettingsSchema).describe(\n    \"Adjust how likely you are to see responses that could be harmful. Content is blocked based on the probability that it is harmful.\"\n  ).optional(),\n  codeExecution: import_genkit.z.union([import_genkit.z.boolean(), import_genkit.z.object({}).strict()]).describe(\"Enables the model to generate and run code.\").optional(),\n  contextCache: import_genkit.z.boolean().describe(\n    \"Context caching allows you to save and reuse precomputed input tokens that you wish to use repeatedly.\"\n  ).optional(),\n  functionCallingConfig: import_genkit.z.object({\n    mode: import_genkit.z.enum([\"MODE_UNSPECIFIED\", \"AUTO\", \"ANY\", \"NONE\"]).optional(),\n    allowedFunctionNames: import_genkit.z.array(import_genkit.z.string()).optional()\n  }).describe(\n    \"Controls how the model uses the provided tools (function declarations). With AUTO (Default) mode, the model decides whether to generate a natural language response or suggest a function call based on the prompt and context. With ANY, the model is constrained to always predict a function call and guarantee function schema adherence. With NONE, the model is prohibited from making function calls.\"\n  ).optional(),\n  responseModalities: import_genkit.z.array(import_genkit.z.enum([\"TEXT\", \"IMAGE\", \"AUDIO\"])).describe(\n    \"The modalities to be used in response. Only supported for 'gemini-2.0-flash-exp' model at present.\"\n  ).optional(),\n  googleSearchRetrieval: import_genkit.z.union([import_genkit.z.boolean(), import_genkit.z.object({}).passthrough()]).describe(\n    \"Retrieve public web data for grounding, powered by Google Search.\"\n  ).optional()\n}).passthrough();\nconst GeminiTtsConfigSchema = GeminiConfigSchema.extend({\n  speechConfig: import_genkit.z.object({\n    voiceConfig: VoiceConfigSchema.optional(),\n    multiSpeakerVoiceConfig: import_genkit.z.object({\n      speakerVoiceConfigs: import_genkit.z.array(\n        import_genkit.z.object({\n          speaker: import_genkit.z.string().describe(\"Name of the speaker to use\"),\n          voiceConfig: VoiceConfigSchema\n        }).describe(\n          \"Configuration for a single speaker in a multi speaker setup\"\n        ).passthrough()\n      ).describe(\"Configuration for all the enabled speaker voices\")\n    }).describe(\"Configuration for multi-speaker setup\").passthrough().optional()\n  }).describe(\"Speech generation config\").passthrough().optional()\n}).passthrough();\nconst gemini10Pro = (0, import_model.modelRef)({\n  name: \"googleai/gemini-1.0-pro\",\n  info: {\n    label: \"Google AI - Gemini Pro\",\n    versions: [\"gemini-pro\", \"gemini-1.0-pro-latest\", \"gemini-1.0-pro-001\"],\n    supports: {\n      multiturn: true,\n      media: false,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini15Pro = (0, import_model.modelRef)({\n  name: \"googleai/gemini-1.5-pro\",\n  info: {\n    label: \"Google AI - Gemini 1.5 Pro\",\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    },\n    versions: [\n      \"gemini-1.5-pro-latest\",\n      \"gemini-1.5-pro-001\",\n      \"gemini-1.5-pro-002\"\n    ]\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini15Flash = (0, import_model.modelRef)({\n  name: \"googleai/gemini-1.5-flash\",\n  info: {\n    label: \"Google AI - Gemini 1.5 Flash\",\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\",\n      // @ts-ignore\n      contextCache: true\n    },\n    versions: [\n      \"gemini-1.5-flash-latest\",\n      \"gemini-1.5-flash-001\",\n      \"gemini-1.5-flash-002\"\n    ]\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini15Flash8b = (0, import_model.modelRef)({\n  name: \"googleai/gemini-1.5-flash-8b\",\n  info: {\n    label: \"Google AI - Gemini 1.5 Flash\",\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    },\n    versions: [\"gemini-1.5-flash-8b-latest\", \"gemini-1.5-flash-8b-001\"]\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini20Flash = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.0-flash\",\n  info: {\n    label: \"Google AI - Gemini 2.0 Flash\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini20FlashExp = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.0-flash-exp\",\n  info: {\n    label: \"Google AI - Gemini 2.0 Flash (Experimental)\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini20FlashLite = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.0-flash-lite\",\n  info: {\n    label: \"Google AI - Gemini 2.0 Flash Lite\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini20ProExp0205 = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.0-pro-exp-02-05\",\n  info: {\n    label: \"Google AI - Gemini 2.0 Pro Exp 02-05\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini25FlashPreview0417 = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.5-flash-preview-04-17\",\n  info: {\n    label: \"Google AI - Gemini 2.5 Flash Preview 04-17\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini25FlashPreviewTts = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.5-flash-preview-tts\",\n  info: {\n    label: \"Google AI - Gemini 2.5 Flash Preview TTS\",\n    versions: [],\n    supports: {\n      multiturn: false,\n      media: false,\n      tools: false,\n      toolChoice: false,\n      systemRole: false,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiTtsConfigSchema\n});\nconst gemini25ProExp0325 = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.5-pro-exp-03-25\",\n  info: {\n    label: \"Google AI - Gemini 2.5 Pro Exp 03-25\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini25ProPreview0325 = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.5-pro-preview-03-25\",\n  info: {\n    label: \"Google AI - Gemini 2.5 Pro Preview 03-25\",\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiConfigSchema\n});\nconst gemini25ProPreviewTts = (0, import_model.modelRef)({\n  name: \"googleai/gemini-2.5-pro-preview-tts\",\n  info: {\n    label: \"Google AI - Gemini 2.5 Pro Preview TTS\",\n    versions: [],\n    supports: {\n      multiturn: false,\n      media: false,\n      tools: false,\n      toolChoice: false,\n      systemRole: false,\n      constrained: \"no-tools\"\n    }\n  },\n  configSchema: GeminiTtsConfigSchema\n});\nconst SUPPORTED_V15_MODELS = {\n  \"gemini-1.5-pro\": gemini15Pro,\n  \"gemini-1.5-flash\": gemini15Flash,\n  \"gemini-1.5-flash-8b\": gemini15Flash8b,\n  \"gemini-2.0-pro-exp-02-05\": gemini20ProExp0205,\n  \"gemini-2.0-flash\": gemini20Flash,\n  \"gemini-2.0-flash-lite\": gemini20FlashLite,\n  \"gemini-2.0-flash-exp\": gemini20FlashExp,\n  \"gemini-2.5-pro-exp-03-25\": gemini25ProExp0325,\n  \"gemini-2.5-pro-preview-03-25\": gemini25ProPreview0325,\n  \"gemini-2.5-pro-preview-tts\": gemini25ProPreviewTts,\n  \"gemini-2.5-flash-preview-04-17\": gemini25FlashPreview0417,\n  \"gemini-2.5-flash-preview-tts\": gemini25FlashPreviewTts\n};\nconst GENERIC_GEMINI_MODEL = (0, import_model.modelRef)({\n  name: \"googleai/gemini\",\n  configSchema: GeminiConfigSchema,\n  info: {\n    label: \"Google Gemini\",\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: \"no-tools\"\n    }\n  }\n});\nconst SUPPORTED_GEMINI_MODELS = {\n  ...SUPPORTED_V15_MODELS\n};\nfunction longestMatchingPrefix(version, potentialMatches) {\n  return potentialMatches.filter((p) => version.startsWith(p)).reduce(\n    (longest, current) => current.length > longest.length ? current : longest,\n    \"\"\n  );\n}\nfunction gemini(version, options = {}) {\n  const nearestModel = nearestGeminiModelRef(version);\n  return (0, import_model.modelRef)({\n    name: `googleai/${version}`,\n    config: options,\n    configSchema: GeminiConfigSchema,\n    info: {\n      ...nearestModel.info,\n      // If exact suffix match for a known model, use its label, otherwise create a new label\n      label: nearestModel.name.endsWith(version) ? nearestModel.info?.label : `Google AI - ${version}`\n    }\n  });\n}\nfunction nearestGeminiModelRef(version, options = {}) {\n  const matchingKey = longestMatchingPrefix(\n    version,\n    Object.keys(SUPPORTED_GEMINI_MODELS)\n  );\n  if (matchingKey) {\n    return SUPPORTED_GEMINI_MODELS[matchingKey].withConfig({\n      ...options,\n      version\n    });\n  }\n  return GENERIC_GEMINI_MODEL.withConfig({ ...options, version });\n}\nfunction toGeminiRole(role, model) {\n  switch (role) {\n    case \"user\":\n      return \"user\";\n    case \"model\":\n      return \"model\";\n    case \"system\":\n      if (model?.info?.supports?.systemRole) {\n        throw new Error(\n          \"system role is only supported for a single message in the first position\"\n        );\n      } else {\n        throw new Error(\"system role is not supported\");\n      }\n    case \"tool\":\n      return \"function\";\n    default:\n      return \"user\";\n  }\n}\nfunction convertSchemaProperty(property) {\n  if (!property || !property.type) {\n    return void 0;\n  }\n  const baseSchema = {};\n  if (property.description) {\n    baseSchema.description = property.description;\n  }\n  if (property.enum) {\n    baseSchema.type = import_generative_ai.SchemaType.STRING;\n    baseSchema.enum = property.enum;\n  }\n  if (property.nullable) {\n    baseSchema.nullable = property.nullable;\n  }\n  let propertyType;\n  if (Array.isArray(property.type)) {\n    const types = property.type;\n    if (types.includes(\"null\")) {\n      baseSchema.nullable = true;\n    }\n    propertyType = types.find((t) => t !== \"null\");\n  } else {\n    propertyType = property.type;\n  }\n  if (propertyType === \"object\") {\n    const nestedProperties = {};\n    Object.keys(property.properties).forEach((key) => {\n      nestedProperties[key] = convertSchemaProperty(property.properties[key]);\n    });\n    return {\n      ...baseSchema,\n      type: import_generative_ai.SchemaType.OBJECT,\n      properties: nestedProperties,\n      required: property.required\n    };\n  } else if (propertyType === \"array\") {\n    return {\n      ...baseSchema,\n      type: import_generative_ai.SchemaType.ARRAY,\n      items: convertSchemaProperty(property.items)\n    };\n  } else {\n    const schemaType = import_generative_ai.SchemaType[propertyType.toUpperCase()];\n    if (!schemaType) {\n      throw new import_genkit.GenkitError({\n        status: \"INVALID_ARGUMENT\",\n        message: `Unsupported property type ${propertyType.toUpperCase()}`\n      });\n    }\n    return {\n      ...baseSchema,\n      type: schemaType\n    };\n  }\n}\nfunction toGeminiTool(tool) {\n  const declaration = {\n    name: tool.name.replace(/\\//g, \"__\"),\n    // Gemini throws on '/' in tool name\n    description: tool.description,\n    parameters: convertSchemaProperty(tool.inputSchema)\n  };\n  return declaration;\n}\nfunction toInlineData(part) {\n  const dataUrl = part.media.url;\n  const b64Data = dataUrl.substring(dataUrl.indexOf(\",\") + 1);\n  const contentType = part.media.contentType || dataUrl.substring(dataUrl.indexOf(\":\") + 1, dataUrl.indexOf(\";\"));\n  return { inlineData: { mimeType: contentType, data: b64Data } };\n}\nfunction toFileData(part) {\n  if (!part.media.contentType)\n    throw new Error(\n      \"Must supply a `contentType` when sending File URIs to Gemini.\"\n    );\n  return {\n    fileData: { mimeType: part.media.contentType, fileUri: part.media.url }\n  };\n}\nfunction fromInlineData(inlinePart) {\n  if (!inlinePart.inlineData || !inlinePart.inlineData.hasOwnProperty(\"mimeType\") || !inlinePart.inlineData.hasOwnProperty(\"data\")) {\n    throw new Error(\"Invalid InlineDataPart: missing required properties\");\n  }\n  const { mimeType, data } = inlinePart.inlineData;\n  const dataUrl = `data:${mimeType};base64,${data}`;\n  return {\n    media: {\n      url: dataUrl,\n      contentType: mimeType\n    }\n  };\n}\nfunction toFunctionCall(part) {\n  if (!part?.toolRequest?.input) {\n    throw Error(\"Invalid ToolRequestPart: input was missing.\");\n  }\n  return {\n    functionCall: {\n      name: part.toolRequest.name,\n      args: part.toolRequest.input\n    }\n  };\n}\nfunction fromFunctionCall(part, ref) {\n  if (!part.functionCall) {\n    throw Error(\"Invalid FunctionCallPart\");\n  }\n  return {\n    toolRequest: {\n      name: part.functionCall.name,\n      input: part.functionCall.args,\n      ref\n    }\n  };\n}\nfunction toFunctionResponse(part) {\n  if (!part?.toolResponse?.output) {\n    throw Error(\"Invalid ToolResponsePart: output was missing.\");\n  }\n  return {\n    functionResponse: {\n      name: part.toolResponse.name,\n      response: {\n        name: part.toolResponse.name,\n        content: part.toolResponse.output\n      }\n    }\n  };\n}\nfunction fromFunctionResponse(part) {\n  if (!part.functionResponse) {\n    throw new Error(\"Invalid FunctionResponsePart.\");\n  }\n  return {\n    toolResponse: {\n      name: part.functionResponse.name.replace(/__/g, \"/\"),\n      // restore slashes\n      output: part.functionResponse.response\n    }\n  };\n}\nfunction fromExecutableCode(part) {\n  if (!part.executableCode) {\n    throw new Error(\"Invalid GeminiPart: missing executableCode\");\n  }\n  return {\n    custom: {\n      executableCode: {\n        language: part.executableCode.language,\n        code: part.executableCode.code\n      }\n    }\n  };\n}\nfunction fromCodeExecutionResult(part) {\n  if (!part.codeExecutionResult) {\n    throw new Error(\"Invalid GeminiPart: missing codeExecutionResult\");\n  }\n  return {\n    custom: {\n      codeExecutionResult: {\n        outcome: part.codeExecutionResult.outcome,\n        output: part.codeExecutionResult.output\n      }\n    }\n  };\n}\nfunction fromThought(part) {\n  return {\n    reasoning: part.text || \"\",\n    metadata: { thoughtSignature: part.thoughtSignature }\n  };\n}\nfunction toCustomPart(part) {\n  if (!part.custom) {\n    throw new Error(\"Invalid GeminiPart: missing custom\");\n  }\n  if (part.custom.codeExecutionResult) {\n    return { codeExecutionResult: part.custom.codeExecutionResult };\n  }\n  if (part.custom.executableCode) {\n    return { executableCode: part.custom.executableCode };\n  }\n  throw new Error(\"Unsupported Custom Part type\");\n}\nfunction toThought(part) {\n  const outPart = { thought: true };\n  if (part.metadata?.thoughtSignature)\n    outPart.thoughtSignature = part.metadata.thoughtSignature;\n  if (part.reasoning?.length) outPart.text = part.reasoning;\n  return outPart;\n}\nfunction toGeminiPart(part) {\n  if (part.text !== void 0) return { text: part.text || \" \" };\n  if (part.media) {\n    if (part.media.url.startsWith(\"data:\")) return toInlineData(part);\n    return toFileData(part);\n  }\n  if (part.toolRequest) return toFunctionCall(part);\n  if (part.toolResponse) return toFunctionResponse(part);\n  if (part.custom) return toCustomPart(part);\n  if (typeof part.reasoning === \"string\") return toThought(part);\n  throw new Error(\"Unsupported Part type\" + JSON.stringify(part));\n}\nfunction fromGeminiPart(part, jsonMode, ref) {\n  if (\"thought\" in part) return fromThought(part);\n  if (typeof part.text === \"string\") return { text: part.text };\n  if (part.inlineData) return fromInlineData(part);\n  if (part.functionCall) return fromFunctionCall(part, ref);\n  if (part.functionResponse) return fromFunctionResponse(part);\n  if (part.executableCode) return fromExecutableCode(part);\n  if (part.codeExecutionResult) return fromCodeExecutionResult(part);\n  throw new Error(\"Unsupported GeminiPart type: \" + JSON.stringify(part));\n}\nfunction toGeminiMessage(message, model) {\n  let sortedParts = message.content;\n  if (message.role === \"tool\") {\n    sortedParts = [...message.content].sort((a, b) => {\n      const aRef = a.toolResponse?.ref;\n      const bRef = b.toolResponse?.ref;\n      if (!aRef && !bRef) return 0;\n      if (!aRef) return 1;\n      if (!bRef) return -1;\n      return Number.parseInt(aRef, 10) - Number.parseInt(bRef, 10);\n    });\n  }\n  return {\n    role: toGeminiRole(message.role, model),\n    parts: sortedParts.map(toGeminiPart)\n  };\n}\nfunction toGeminiSystemInstruction(message) {\n  return {\n    role: \"user\",\n    parts: message.content.map(toGeminiPart)\n  };\n}\nfunction fromGeminiFinishReason(reason) {\n  if (!reason) return \"unknown\";\n  switch (reason) {\n    case \"STOP\":\n      return \"stop\";\n    case \"MAX_TOKENS\":\n      return \"length\";\n    case \"SAFETY\":\n    // blocked for safety\n    case \"RECITATION\":\n      return \"blocked\";\n    default:\n      return \"unknown\";\n  }\n}\nfunction fromGeminiCandidate(candidate, jsonMode = false) {\n  const parts = candidate.content?.parts || [];\n  const genkitCandidate = {\n    index: candidate.index || 0,\n    message: {\n      role: \"model\",\n      content: parts.map(\n        (part, index) => fromGeminiPart(part, jsonMode, index.toString())\n      )\n    },\n    finishReason: fromGeminiFinishReason(candidate.finishReason),\n    finishMessage: candidate.finishMessage,\n    custom: {\n      safetyRatings: candidate.safetyRatings,\n      citationMetadata: candidate.citationMetadata\n    }\n  };\n  return genkitCandidate;\n}\nfunction cleanSchema(schema) {\n  const out = structuredClone(schema);\n  for (const key in out) {\n    if (key === \"$schema\" || key === \"additionalProperties\") {\n      delete out[key];\n      continue;\n    }\n    if (typeof out[key] === \"object\") {\n      out[key] = cleanSchema(out[key]);\n    }\n    if (key === \"type\" && Array.isArray(out[key])) {\n      out[key] = out[key].find((t) => t !== \"null\");\n    }\n  }\n  return out;\n}\nfunction defineGoogleAIModel({\n  ai,\n  name,\n  apiKey: apiKeyOption,\n  apiVersion,\n  baseUrl,\n  info,\n  defaultConfig,\n  debugTraces\n}) {\n  let apiKey;\n  if (apiKeyOption !== false) {\n    apiKey = apiKeyOption || (0, import_common.getApiKeyFromEnvVar)();\n    if (!apiKey) {\n      throw new import_genkit.GenkitError({\n        status: \"FAILED_PRECONDITION\",\n        message: \"Please pass in the API key or set the GEMINI_API_KEY or GOOGLE_API_KEY environment variable.\\nFor more details see https://genkit.dev/docs/plugins/google-genai\"\n      });\n    }\n  }\n  const apiModelName = name.startsWith(\"googleai/\") ? name.substring(\"googleai/\".length) : name;\n  const model = SUPPORTED_GEMINI_MODELS[apiModelName] ?? (0, import_model.modelRef)({\n    name: `googleai/${apiModelName}`,\n    info: {\n      label: `Google AI - ${apiModelName}`,\n      supports: {\n        multiturn: true,\n        media: true,\n        tools: true,\n        systemRole: true,\n        output: [\"text\", \"json\"]\n      },\n      ...info\n    },\n    configSchema: GeminiConfigSchema\n  });\n  const middleware = [];\n  if (model.info?.supports?.media) {\n    middleware.push(\n      (0, import_middleware.downloadRequestMedia)({\n        maxBytes: 1024 * 1024 * 10,\n        // don't downlaod files that have been uploaded using the Files API\n        filter: (part) => {\n          try {\n            const url = new URL(part.media.url);\n            if (\n              // Gemini can handle these URLs\n              [\n                \"generativelanguage.googleapis.com\",\n                \"www.youtube.com\",\n                \"youtube.com\",\n                \"youtu.be\"\n              ].includes(url.hostname)\n            )\n              return false;\n          } catch {\n          }\n          return true;\n        }\n      })\n    );\n  }\n  return ai.defineModel(\n    {\n      name: model.name,\n      ...model.info,\n      configSchema: model.configSchema,\n      use: middleware\n    },\n    async (request, sendChunk) => {\n      const options = { apiClient: import_genkit.GENKIT_CLIENT_HEADER };\n      if (apiVersion) {\n        options.apiVersion = apiVersion;\n      }\n      if (apiVersion) {\n        options.baseUrl = baseUrl;\n      }\n      const requestConfig = {\n        ...defaultConfig,\n        ...request.config\n      };\n      const messages = [...request.messages];\n      if (messages.length === 0) throw new Error(\"No messages provided.\");\n      let systemInstruction = void 0;\n      if (model.info?.supports?.systemRole) {\n        const systemMessage = messages.find((m) => m.role === \"system\");\n        if (systemMessage) {\n          messages.splice(messages.indexOf(systemMessage), 1);\n          systemInstruction = toGeminiSystemInstruction(systemMessage);\n        }\n      }\n      const tools = [];\n      if (request.tools?.length) {\n        tools.push({\n          functionDeclarations: request.tools.map(toGeminiTool)\n        });\n      }\n      const {\n        apiKey: apiKeyFromConfig,\n        safetySettings: safetySettingsFromConfig,\n        codeExecution: codeExecutionFromConfig,\n        version: versionFromConfig,\n        functionCallingConfig,\n        googleSearchRetrieval,\n        tools: toolsFromConfig,\n        ...restOfConfigOptions\n      } = requestConfig;\n      if (codeExecutionFromConfig) {\n        tools.push({\n          codeExecution: request.config.codeExecution === true ? {} : request.config.codeExecution\n        });\n      }\n      if (toolsFromConfig) {\n        tools.push(...toolsFromConfig);\n      }\n      if (googleSearchRetrieval) {\n        tools.push({\n          googleSearch: googleSearchRetrieval === true ? {} : googleSearchRetrieval\n        });\n      }\n      let toolConfig;\n      if (functionCallingConfig) {\n        toolConfig = {\n          functionCallingConfig: {\n            allowedFunctionNames: functionCallingConfig.allowedFunctionNames,\n            mode: toFunctionModeEnum(functionCallingConfig.mode)\n          }\n        };\n      } else if (request.toolChoice) {\n        toolConfig = {\n          functionCallingConfig: {\n            mode: toGeminiFunctionModeEnum(request.toolChoice)\n          }\n        };\n      }\n      const jsonMode = request.output?.format === \"json\" || request.output?.contentType === \"application/json\" && tools.length === 0;\n      const generationConfig = {\n        ...restOfConfigOptions,\n        candidateCount: request.candidates || void 0,\n        responseMimeType: jsonMode ? \"application/json\" : void 0\n      };\n      if (request.output?.constrained && jsonMode) {\n        generationConfig.responseSchema = cleanSchema(request.output.schema);\n      }\n      const msg = toGeminiMessage(messages[messages.length - 1], model);\n      const fromJSONModeScopedGeminiCandidate = (candidate) => {\n        return fromGeminiCandidate(candidate, jsonMode);\n      };\n      const chatRequest = {\n        systemInstruction,\n        generationConfig,\n        tools: tools.length ? tools : void 0,\n        toolConfig,\n        history: messages.slice(0, -1).map((message) => toGeminiMessage(message, model)),\n        safetySettings: safetySettingsFromConfig\n      };\n      const modelVersion = versionFromConfig || model.version || apiModelName;\n      const cacheConfigDetails = (0, import_utils.extractCacheConfig)(request);\n      const { chatRequest: updatedChatRequest, cache } = await (0, import_context_caching.handleCacheIfNeeded)(\n        apiKey,\n        request,\n        chatRequest,\n        modelVersion,\n        cacheConfigDetails\n      );\n      if (!apiKeyFromConfig && !apiKey) {\n        throw new import_genkit.GenkitError({\n          status: \"INVALID_ARGUMENT\",\n          message: \"GoogleAI plugin was initialized with {apiKey: false} but no apiKey configuration was passed at call time.\"\n        });\n      }\n      const client = new import_generative_ai.GoogleGenerativeAI(apiKeyFromConfig || apiKey);\n      let genModel;\n      if (cache) {\n        genModel = client.getGenerativeModelFromCachedContent(\n          cache,\n          {\n            model: modelVersion\n          },\n          options\n        );\n      } else {\n        genModel = client.getGenerativeModel(\n          {\n            model: modelVersion\n          },\n          options\n        );\n      }\n      const callGemini = async () => {\n        let response;\n        if (sendChunk) {\n          const result = await genModel.startChat(updatedChatRequest).sendMessageStream(msg.parts, options);\n          const chunks = [];\n          for await (const item of result.stream) {\n            chunks.push(item);\n            item.candidates?.forEach(\n              (candidate) => {\n                const c = fromJSONModeScopedGeminiCandidate(candidate);\n                sendChunk({\n                  index: c.index,\n                  content: c.message.content\n                });\n              }\n            );\n          }\n          response = aggregateResponses(chunks);\n        } else {\n          const result = await genModel.startChat(updatedChatRequest).sendMessage(msg.parts, options);\n          response = result.response;\n        }\n        const candidates = response.candidates || [];\n        if (response.candidates?.[\"undefined\"]) {\n          candidates.push(response.candidates[\"undefined\"]);\n        }\n        if (!candidates.length) {\n          throw new import_genkit.GenkitError({\n            status: \"FAILED_PRECONDITION\",\n            message: \"No valid candidates returned.\"\n          });\n        }\n        const candidateData = candidates.map(fromJSONModeScopedGeminiCandidate) || [];\n        return {\n          candidates: candidateData,\n          custom: response,\n          usage: {\n            ...(0, import_model.getBasicUsageStats)(request.messages, candidateData),\n            inputTokens: response.usageMetadata?.promptTokenCount,\n            outputTokens: response.usageMetadata?.candidatesTokenCount,\n            totalTokens: response.usageMetadata?.totalTokenCount,\n            cachedContentTokens: response.usageMetadata?.cachedContentTokenCount\n          }\n        };\n      };\n      return debugTraces ? await (0, import_tracing.runInNewSpan)(\n        ai.registry,\n        {\n          metadata: {\n            name: sendChunk ? \"sendMessageStream\" : \"sendMessage\"\n          }\n        },\n        async (metadata) => {\n          metadata.input = {\n            sdk: \"@google/generative-ai\",\n            cache,\n            model: genModel.model,\n            chatOptions: updatedChatRequest,\n            parts: msg.parts,\n            options\n          };\n          const response = await callGemini();\n          metadata.output = response.custom;\n          return response;\n        }\n      ) : await callGemini();\n    }\n  );\n}\nfunction toFunctionModeEnum(configEnum) {\n  if (configEnum === void 0) {\n    return void 0;\n  }\n  switch (configEnum) {\n    case \"MODE_UNSPECIFIED\": {\n      return import_generative_ai.FunctionCallingMode.MODE_UNSPECIFIED;\n    }\n    case \"ANY\": {\n      return import_generative_ai.FunctionCallingMode.ANY;\n    }\n    case \"AUTO\": {\n      return import_generative_ai.FunctionCallingMode.AUTO;\n    }\n    case \"NONE\": {\n      return import_generative_ai.FunctionCallingMode.NONE;\n    }\n    default:\n      throw new Error(`unsupported function calling mode: ${configEnum}`);\n  }\n}\nfunction toGeminiFunctionModeEnum(genkitMode) {\n  if (genkitMode === void 0) {\n    return void 0;\n  }\n  switch (genkitMode) {\n    case \"required\": {\n      return import_generative_ai.FunctionCallingMode.ANY;\n    }\n    case \"auto\": {\n      return import_generative_ai.FunctionCallingMode.AUTO;\n    }\n    case \"none\": {\n      return import_generative_ai.FunctionCallingMode.NONE;\n    }\n    default:\n      throw new Error(`unsupported function calling mode: ${genkitMode}`);\n  }\n}\nfunction aggregateResponses(responses) {\n  const lastResponse = responses[responses.length - 1];\n  const aggregatedResponse = {\n    promptFeedback: lastResponse?.promptFeedback\n  };\n  for (const response of responses) {\n    if (response.candidates) {\n      let candidateIndex = 0;\n      for (const candidate of response.candidates) {\n        if (!aggregatedResponse.candidates) {\n          aggregatedResponse.candidates = [];\n        }\n        if (!aggregatedResponse.candidates[candidateIndex]) {\n          aggregatedResponse.candidates[candidateIndex] = {\n            index: candidateIndex\n          };\n        }\n        aggregatedResponse.candidates[candidateIndex].citationMetadata = candidate.citationMetadata;\n        aggregatedResponse.candidates[candidateIndex].groundingMetadata = candidate.groundingMetadata;\n        aggregatedResponse.candidates[candidateIndex].finishReason = candidate.finishReason;\n        aggregatedResponse.candidates[candidateIndex].finishMessage = candidate.finishMessage;\n        aggregatedResponse.candidates[candidateIndex].safetyRatings = candidate.safetyRatings;\n        if (candidate.content && candidate.content.parts) {\n          if (!aggregatedResponse.candidates[candidateIndex].content) {\n            aggregatedResponse.candidates[candidateIndex].content = {\n              role: candidate.content.role || \"user\",\n              parts: []\n            };\n          }\n          for (const part of candidate.content.parts) {\n            const newPart = {};\n            if (part.text) {\n              newPart.text = part.text;\n            }\n            if (part.functionCall) {\n              newPart.functionCall = part.functionCall;\n            }\n            if (part.executableCode) {\n              newPart.executableCode = part.executableCode;\n            }\n            if (part.codeExecutionResult) {\n              newPart.codeExecutionResult = part.codeExecutionResult;\n            }\n            if (Object.keys(newPart).length === 0) {\n              newPart.text = \"\";\n            }\n            aggregatedResponse.candidates[candidateIndex].content.parts.push(\n              newPart\n            );\n          }\n        }\n      }\n      candidateIndex++;\n    }\n    if (response.usageMetadata) {\n      aggregatedResponse.usageMetadata = response.usageMetadata;\n    }\n  }\n  return aggregatedResponse;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=gemini.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/gemini.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/imagen.js":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/imagen.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar imagen_exports = {};\n__export(imagen_exports, {\n  GENERIC_IMAGEN_INFO: () => GENERIC_IMAGEN_INFO,\n  ImagenConfigSchema: () => ImagenConfigSchema,\n  defineImagenModel: () => defineImagenModel\n});\nmodule.exports = __toCommonJS(imagen_exports);\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_model = __webpack_require__(/*! genkit/model */ \"(action-browser)/./node_modules/genkit/lib/model.js\");\nvar import_common = __webpack_require__(/*! ./common.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/common.js\");\nvar import_predict = __webpack_require__(/*! ./predict.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/predict.js\");\nconst ImagenConfigSchema = import_genkit.z.object({\n  numberOfImages: import_genkit.z.number().describe(\n    \"The number of images to generate, from 1 to 4 (inclusive). The default is 1.\"\n  ).optional(),\n  aspectRatio: import_genkit.z.enum([\"1:1\", \"9:16\", \"16:9\", \"3:4\", \"4:3\"]).describe(\"Desired aspect ratio of the output image.\").optional(),\n  personGeneration: import_genkit.z.enum([\"dont_allow\", \"allow_adult\", \"allow_all\"]).describe(\n    \"Control if/how images of people will be generated by the model.\"\n  ).optional()\n}).passthrough();\nfunction toParameters(request) {\n  const out = {\n    sampleCount: request.config?.numberOfImages ?? 1,\n    ...request?.config\n  };\n  for (const k in out) {\n    if (!out[k]) delete out[k];\n  }\n  return out;\n}\nfunction extractText(request) {\n  return request.messages.at(-1).content.map((c) => c.text || \"\").join(\"\");\n}\nfunction extractBaseImage(request) {\n  return request.messages.at(-1)?.content.find((p) => !!p.media)?.media?.url.split(\",\")[1];\n}\nconst GENERIC_IMAGEN_INFO = {\n  label: `Google AI - Generic Imagen`,\n  supports: {\n    media: true,\n    multiturn: false,\n    tools: false,\n    systemRole: false,\n    output: [\"media\"]\n  }\n};\nfunction defineImagenModel(ai, name, apiKey) {\n  if (apiKey !== false) {\n    apiKey = apiKey || (0, import_common.getApiKeyFromEnvVar)();\n    if (!apiKey) {\n      throw new import_genkit.GenkitError({\n        status: \"FAILED_PRECONDITION\",\n        message: \"Please pass in the API key or set the GEMINI_API_KEY or GOOGLE_API_KEY environment variable.\\nFor more details see https://genkit.dev/docs/plugins/google-genai\"\n      });\n    }\n  }\n  const modelName = `googleai/${name}`;\n  const model = (0, import_model.modelRef)({\n    name: modelName,\n    info: {\n      ...GENERIC_IMAGEN_INFO,\n      label: `Google AI - ${name}`\n    },\n    configSchema: ImagenConfigSchema\n  });\n  return ai.defineModel(\n    {\n      name: modelName,\n      ...model.info,\n      configSchema: ImagenConfigSchema\n    },\n    async (request) => {\n      const instance = {\n        prompt: extractText(request)\n      };\n      const baseImage = extractBaseImage(request);\n      if (baseImage) {\n        instance.image = { bytesBase64Encoded: baseImage };\n      }\n      const predictClient = (0, import_predict.predictModel)(model.version || name, apiKey, \"predict\");\n      const response = await predictClient([instance], toParameters(request));\n      if (!response.predictions || response.predictions.length == 0) {\n        throw new Error(\n          \"Model returned no predictions. Possibly due to content filters.\"\n        );\n      }\n      const message = {\n        role: \"model\",\n        content: []\n      };\n      response.predictions.forEach((p, i) => {\n        const b64data = p.bytesBase64Encoded;\n        const mimeType = p.mimeType;\n        message.content.push({\n          media: {\n            url: `data:${mimeType};base64,${b64data}`,\n            contentType: mimeType\n          }\n        });\n      });\n      return {\n        finishReason: \"stop\",\n        message,\n        usage: (0, import_model.getBasicUsageStats)(request.messages, message),\n        custom: response\n      };\n    }\n  );\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=imagen.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9pbWFnZW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esb0JBQW9CLG1CQUFPLENBQUMsbUVBQVE7QUFDcEMsbUJBQW1CLG1CQUFPLENBQUMseUVBQWM7QUFDekMsb0JBQW9CLG1CQUFPLENBQUMsc0ZBQWE7QUFDekMscUJBQXFCLG1CQUFPLENBQUMsd0ZBQWM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLGdDQUFnQyxLQUFLO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLEtBQUs7QUFDakMsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsVUFBVSxTQUFTLFFBQVE7QUFDcEQ7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBSUw7QUFDRCIsInNvdXJjZXMiOlsiL2hvbWUvdXNlci9zdHVkaW8vbm9kZV9tb2R1bGVzL0BnZW5raXQtYWkvZ29vZ2xlYWkvbGliL2ltYWdlbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgaW1hZ2VuX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGltYWdlbl9leHBvcnRzLCB7XG4gIEdFTkVSSUNfSU1BR0VOX0lORk86ICgpID0+IEdFTkVSSUNfSU1BR0VOX0lORk8sXG4gIEltYWdlbkNvbmZpZ1NjaGVtYTogKCkgPT4gSW1hZ2VuQ29uZmlnU2NoZW1hLFxuICBkZWZpbmVJbWFnZW5Nb2RlbDogKCkgPT4gZGVmaW5lSW1hZ2VuTW9kZWxcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoaW1hZ2VuX2V4cG9ydHMpO1xudmFyIGltcG9ydF9nZW5raXQgPSByZXF1aXJlKFwiZ2Vua2l0XCIpO1xudmFyIGltcG9ydF9tb2RlbCA9IHJlcXVpcmUoXCJnZW5raXQvbW9kZWxcIik7XG52YXIgaW1wb3J0X2NvbW1vbiA9IHJlcXVpcmUoXCIuL2NvbW1vbi5qc1wiKTtcbnZhciBpbXBvcnRfcHJlZGljdCA9IHJlcXVpcmUoXCIuL3ByZWRpY3QuanNcIik7XG5jb25zdCBJbWFnZW5Db25maWdTY2hlbWEgPSBpbXBvcnRfZ2Vua2l0Lnoub2JqZWN0KHtcbiAgbnVtYmVyT2ZJbWFnZXM6IGltcG9ydF9nZW5raXQuei5udW1iZXIoKS5kZXNjcmliZShcbiAgICBcIlRoZSBudW1iZXIgb2YgaW1hZ2VzIHRvIGdlbmVyYXRlLCBmcm9tIDEgdG8gNCAoaW5jbHVzaXZlKS4gVGhlIGRlZmF1bHQgaXMgMS5cIlxuICApLm9wdGlvbmFsKCksXG4gIGFzcGVjdFJhdGlvOiBpbXBvcnRfZ2Vua2l0LnouZW51bShbXCIxOjFcIiwgXCI5OjE2XCIsIFwiMTY6OVwiLCBcIjM6NFwiLCBcIjQ6M1wiXSkuZGVzY3JpYmUoXCJEZXNpcmVkIGFzcGVjdCByYXRpbyBvZiB0aGUgb3V0cHV0IGltYWdlLlwiKS5vcHRpb25hbCgpLFxuICBwZXJzb25HZW5lcmF0aW9uOiBpbXBvcnRfZ2Vua2l0LnouZW51bShbXCJkb250X2FsbG93XCIsIFwiYWxsb3dfYWR1bHRcIiwgXCJhbGxvd19hbGxcIl0pLmRlc2NyaWJlKFxuICAgIFwiQ29udHJvbCBpZi9ob3cgaW1hZ2VzIG9mIHBlb3BsZSB3aWxsIGJlIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwuXCJcbiAgKS5vcHRpb25hbCgpXG59KS5wYXNzdGhyb3VnaCgpO1xuZnVuY3Rpb24gdG9QYXJhbWV0ZXJzKHJlcXVlc3QpIHtcbiAgY29uc3Qgb3V0ID0ge1xuICAgIHNhbXBsZUNvdW50OiByZXF1ZXN0LmNvbmZpZz8ubnVtYmVyT2ZJbWFnZXMgPz8gMSxcbiAgICAuLi5yZXF1ZXN0Py5jb25maWdcbiAgfTtcbiAgZm9yIChjb25zdCBrIGluIG91dCkge1xuICAgIGlmICghb3V0W2tdKSBkZWxldGUgb3V0W2tdO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG5mdW5jdGlvbiBleHRyYWN0VGV4dChyZXF1ZXN0KSB7XG4gIHJldHVybiByZXF1ZXN0Lm1lc3NhZ2VzLmF0KC0xKS5jb250ZW50Lm1hcCgoYykgPT4gYy50ZXh0IHx8IFwiXCIpLmpvaW4oXCJcIik7XG59XG5mdW5jdGlvbiBleHRyYWN0QmFzZUltYWdlKHJlcXVlc3QpIHtcbiAgcmV0dXJuIHJlcXVlc3QubWVzc2FnZXMuYXQoLTEpPy5jb250ZW50LmZpbmQoKHApID0+ICEhcC5tZWRpYSk/Lm1lZGlhPy51cmwuc3BsaXQoXCIsXCIpWzFdO1xufVxuY29uc3QgR0VORVJJQ19JTUFHRU5fSU5GTyA9IHtcbiAgbGFiZWw6IGBHb29nbGUgQUkgLSBHZW5lcmljIEltYWdlbmAsXG4gIHN1cHBvcnRzOiB7XG4gICAgbWVkaWE6IHRydWUsXG4gICAgbXVsdGl0dXJuOiBmYWxzZSxcbiAgICB0b29sczogZmFsc2UsXG4gICAgc3lzdGVtUm9sZTogZmFsc2UsXG4gICAgb3V0cHV0OiBbXCJtZWRpYVwiXVxuICB9XG59O1xuZnVuY3Rpb24gZGVmaW5lSW1hZ2VuTW9kZWwoYWksIG5hbWUsIGFwaUtleSkge1xuICBpZiAoYXBpS2V5ICE9PSBmYWxzZSkge1xuICAgIGFwaUtleSA9IGFwaUtleSB8fCAoMCwgaW1wb3J0X2NvbW1vbi5nZXRBcGlLZXlGcm9tRW52VmFyKSgpO1xuICAgIGlmICghYXBpS2V5KSB7XG4gICAgICB0aHJvdyBuZXcgaW1wb3J0X2dlbmtpdC5HZW5raXRFcnJvcih7XG4gICAgICAgIHN0YXR1czogXCJGQUlMRURfUFJFQ09ORElUSU9OXCIsXG4gICAgICAgIG1lc3NhZ2U6IFwiUGxlYXNlIHBhc3MgaW4gdGhlIEFQSSBrZXkgb3Igc2V0IHRoZSBHRU1JTklfQVBJX0tFWSBvciBHT09HTEVfQVBJX0tFWSBlbnZpcm9ubWVudCB2YXJpYWJsZS5cXG5Gb3IgbW9yZSBkZXRhaWxzIHNlZSBodHRwczovL2dlbmtpdC5kZXYvZG9jcy9wbHVnaW5zL2dvb2dsZS1nZW5haVwiXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgY29uc3QgbW9kZWxOYW1lID0gYGdvb2dsZWFpLyR7bmFtZX1gO1xuICBjb25zdCBtb2RlbCA9ICgwLCBpbXBvcnRfbW9kZWwubW9kZWxSZWYpKHtcbiAgICBuYW1lOiBtb2RlbE5hbWUsXG4gICAgaW5mbzoge1xuICAgICAgLi4uR0VORVJJQ19JTUFHRU5fSU5GTyxcbiAgICAgIGxhYmVsOiBgR29vZ2xlIEFJIC0gJHtuYW1lfWBcbiAgICB9LFxuICAgIGNvbmZpZ1NjaGVtYTogSW1hZ2VuQ29uZmlnU2NoZW1hXG4gIH0pO1xuICByZXR1cm4gYWkuZGVmaW5lTW9kZWwoXG4gICAge1xuICAgICAgbmFtZTogbW9kZWxOYW1lLFxuICAgICAgLi4ubW9kZWwuaW5mbyxcbiAgICAgIGNvbmZpZ1NjaGVtYTogSW1hZ2VuQ29uZmlnU2NoZW1hXG4gICAgfSxcbiAgICBhc3luYyAocmVxdWVzdCkgPT4ge1xuICAgICAgY29uc3QgaW5zdGFuY2UgPSB7XG4gICAgICAgIHByb21wdDogZXh0cmFjdFRleHQocmVxdWVzdClcbiAgICAgIH07XG4gICAgICBjb25zdCBiYXNlSW1hZ2UgPSBleHRyYWN0QmFzZUltYWdlKHJlcXVlc3QpO1xuICAgICAgaWYgKGJhc2VJbWFnZSkge1xuICAgICAgICBpbnN0YW5jZS5pbWFnZSA9IHsgYnl0ZXNCYXNlNjRFbmNvZGVkOiBiYXNlSW1hZ2UgfTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHByZWRpY3RDbGllbnQgPSAoMCwgaW1wb3J0X3ByZWRpY3QucHJlZGljdE1vZGVsKShtb2RlbC52ZXJzaW9uIHx8IG5hbWUsIGFwaUtleSwgXCJwcmVkaWN0XCIpO1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBwcmVkaWN0Q2xpZW50KFtpbnN0YW5jZV0sIHRvUGFyYW1ldGVycyhyZXF1ZXN0KSk7XG4gICAgICBpZiAoIXJlc3BvbnNlLnByZWRpY3Rpb25zIHx8IHJlc3BvbnNlLnByZWRpY3Rpb25zLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBcIk1vZGVsIHJldHVybmVkIG5vIHByZWRpY3Rpb25zLiBQb3NzaWJseSBkdWUgdG8gY29udGVudCBmaWx0ZXJzLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjb25zdCBtZXNzYWdlID0ge1xuICAgICAgICByb2xlOiBcIm1vZGVsXCIsXG4gICAgICAgIGNvbnRlbnQ6IFtdXG4gICAgICB9O1xuICAgICAgcmVzcG9uc2UucHJlZGljdGlvbnMuZm9yRWFjaCgocCwgaSkgPT4ge1xuICAgICAgICBjb25zdCBiNjRkYXRhID0gcC5ieXRlc0Jhc2U2NEVuY29kZWQ7XG4gICAgICAgIGNvbnN0IG1pbWVUeXBlID0gcC5taW1lVHlwZTtcbiAgICAgICAgbWVzc2FnZS5jb250ZW50LnB1c2goe1xuICAgICAgICAgIG1lZGlhOiB7XG4gICAgICAgICAgICB1cmw6IGBkYXRhOiR7bWltZVR5cGV9O2Jhc2U2NCwke2I2NGRhdGF9YCxcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBtaW1lVHlwZVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZpbmlzaFJlYXNvbjogXCJzdG9wXCIsXG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICAgIHVzYWdlOiAoMCwgaW1wb3J0X21vZGVsLmdldEJhc2ljVXNhZ2VTdGF0cykocmVxdWVzdC5tZXNzYWdlcywgbWVzc2FnZSksXG4gICAgICAgIGN1c3RvbTogcmVzcG9uc2VcbiAgICAgIH07XG4gICAgfVxuICApO1xufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIEdFTkVSSUNfSU1BR0VOX0lORk8sXG4gIEltYWdlbkNvbmZpZ1NjaGVtYSxcbiAgZGVmaW5lSW1hZ2VuTW9kZWxcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW1hZ2VuLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/imagen.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/index.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/index.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ index_default),\n/* harmony export */   gemini: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini),\n/* harmony export */   gemini10Pro: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini10Pro),\n/* harmony export */   gemini15Flash: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini15Flash),\n/* harmony export */   gemini15Flash8b: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini15Flash8b),\n/* harmony export */   gemini15Pro: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini15Pro),\n/* harmony export */   gemini20Flash: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini20Flash),\n/* harmony export */   gemini20FlashExp: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini20FlashExp),\n/* harmony export */   gemini20FlashLite: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini20FlashLite),\n/* harmony export */   gemini20ProExp0205: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini20ProExp0205),\n/* harmony export */   gemini25FlashPreview0417: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini25FlashPreview0417),\n/* harmony export */   gemini25ProExp0325: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini25ProExp0325),\n/* harmony export */   gemini25ProPreview0325: () => (/* reexport safe */ _gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini25ProPreview0325),\n/* harmony export */   googleAI: () => (/* binding */ googleAI),\n/* harmony export */   googleAIPlugin: () => (/* binding */ googleAIPlugin),\n/* harmony export */   textEmbedding004: () => (/* reexport safe */ _embedder_js__WEBPACK_IMPORTED_MODULE_5__.textEmbedding004),\n/* harmony export */   textEmbeddingGecko001: () => (/* reexport safe */ _embedder_js__WEBPACK_IMPORTED_MODULE_5__.textEmbeddingGecko001)\n/* harmony export */ });\n/* harmony import */ var genkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.mjs\");\n/* harmony import */ var genkit_logging__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! genkit/logging */ \"(action-browser)/./node_modules/genkit/lib/logging.mjs\");\n/* harmony import */ var genkit_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! genkit/model */ \"(action-browser)/./node_modules/genkit/lib/model.mjs\");\n/* harmony import */ var genkit_plugin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! genkit/plugin */ \"(action-browser)/./node_modules/genkit/lib/plugin.mjs\");\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./common.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/common.js\");\n/* harmony import */ var _embedder_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./embedder.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/embedder.js\");\n/* harmony import */ var _gemini_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./gemini.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/gemini.js\");\n/* harmony import */ var _imagen_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./imagen.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/imagen.js\");\n/* harmony import */ var _list_models_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./list-models.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/list-models.js\");\n/* harmony import */ var _veo_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./veo.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/veo.js\");\n\n\n\n\n\n\n\n\n\n\nasync function initializer(ai, options) {\n  let apiVersions = [\"v1\"];\n  if (options?.apiVersion) {\n    if (Array.isArray(options?.apiVersion)) {\n      apiVersions = options?.apiVersion;\n    } else {\n      apiVersions = [options?.apiVersion];\n    }\n  }\n  if (apiVersions.includes(\"v1beta\")) {\n    Object.keys(_gemini_js__WEBPACK_IMPORTED_MODULE_6__.SUPPORTED_V15_MODELS).forEach(\n      (name) => (0,_gemini_js__WEBPACK_IMPORTED_MODULE_6__.defineGoogleAIModel)({\n        ai,\n        name,\n        apiKey: options?.apiKey,\n        apiVersion: \"v1beta\",\n        baseUrl: options?.baseUrl,\n        debugTraces: options?.experimental_debugTraces\n      })\n    );\n  }\n  if (apiVersions.includes(\"v1\")) {\n    Object.keys(_gemini_js__WEBPACK_IMPORTED_MODULE_6__.SUPPORTED_V15_MODELS).forEach(\n      (name) => (0,_gemini_js__WEBPACK_IMPORTED_MODULE_6__.defineGoogleAIModel)({\n        ai,\n        name,\n        apiKey: options?.apiKey,\n        apiVersion: void 0,\n        baseUrl: options?.baseUrl,\n        debugTraces: options?.experimental_debugTraces\n      })\n    );\n    Object.keys(_embedder_js__WEBPACK_IMPORTED_MODULE_5__.SUPPORTED_MODELS).forEach(\n      (name) => (0,_embedder_js__WEBPACK_IMPORTED_MODULE_5__.defineGoogleAIEmbedder)(ai, name, { apiKey: options?.apiKey })\n    );\n  }\n  if (options?.models) {\n    for (const modelOrRef of options?.models) {\n      const modelName = typeof modelOrRef === \"string\" ? modelOrRef : (\n        // strip out the `googleai/` prefix\n        modelOrRef.name.split(\"/\")[1]\n      );\n      const modelRef2 = typeof modelOrRef === \"string\" ? (0,_gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini)(modelOrRef) : modelOrRef;\n      (0,_gemini_js__WEBPACK_IMPORTED_MODULE_6__.defineGoogleAIModel)({\n        ai,\n        name: modelName,\n        apiKey: options?.apiKey,\n        baseUrl: options?.baseUrl,\n        info: {\n          ...modelRef2.info,\n          label: `Google AI - ${modelName}`\n        },\n        debugTraces: options?.experimental_debugTraces\n      });\n    }\n  }\n}\nasync function resolver(ai, actionType, actionName, options) {\n  if (actionType === \"embedder\") {\n    resolveEmbedder(ai, actionName, options);\n  } else if (actionName.startsWith(\"veo\")) {\n    if (actionType === \"background-model\") {\n      (0,_veo_js__WEBPACK_IMPORTED_MODULE_9__.defineVeoModel)(ai, actionName, options?.apiKey);\n    }\n  } else if (actionType === \"model\") {\n    resolveModel(ai, actionName, options);\n  }\n}\nfunction resolveModel(ai, actionName, options) {\n  if (actionName.startsWith(\"imagen\")) {\n    (0,_imagen_js__WEBPACK_IMPORTED_MODULE_7__.defineImagenModel)(ai, actionName, options?.apiKey);\n    return;\n  }\n  const modelRef2 = (0,_gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini)(actionName);\n  (0,_gemini_js__WEBPACK_IMPORTED_MODULE_6__.defineGoogleAIModel)({\n    ai,\n    name: modelRef2.name,\n    apiKey: options?.apiKey,\n    baseUrl: options?.baseUrl,\n    info: {\n      ...modelRef2.info,\n      label: `Google AI - ${actionName}`\n    },\n    debugTraces: options?.experimental_debugTraces\n  });\n}\nfunction resolveEmbedder(ai, actionName, options) {\n  (0,_embedder_js__WEBPACK_IMPORTED_MODULE_5__.defineGoogleAIEmbedder)(ai, `googleai/${actionName}`, {\n    apiKey: options?.apiKey\n  });\n}\nasync function listActions(options) {\n  const apiKey = options?.apiKey || (0,_common_js__WEBPACK_IMPORTED_MODULE_4__.getApiKeyFromEnvVar)();\n  if (!apiKey) {\n    genkit_logging__WEBPACK_IMPORTED_MODULE_1__.logger.error(\n      \"Pass in the API key or set the GEMINI_API_KEY or GOOGLE_API_KEY environment variable.\"\n    );\n    return [];\n  }\n  const models = await (0,_list_models_js__WEBPACK_IMPORTED_MODULE_8__.listModels)(\n    options?.baseUrl || \"https://generativelanguage.googleapis.com\",\n    apiKey\n  );\n  return [\n    // Imagen\n    ...models.filter(\n      (m) => m.supportedGenerationMethods.includes(\"predict\") && m.name.includes(\"imagen\")\n    ).filter((m) => !m.description || !m.description.includes(\"deprecated\")).map((m) => {\n      const name = m.name.split(\"/\").at(-1);\n      return (0,genkit__WEBPACK_IMPORTED_MODULE_0__.modelActionMetadata)({\n        name: `googleai/${name}`,\n        info: { ..._imagen_js__WEBPACK_IMPORTED_MODULE_7__.GENERIC_IMAGEN_INFO },\n        configSchema: _imagen_js__WEBPACK_IMPORTED_MODULE_7__.ImagenConfigSchema\n      });\n    }),\n    // Veo\n    ...models.filter(\n      (m) => m.supportedGenerationMethods.includes(\"predictLongRunning\") && m.name.includes(\"veo\")\n    ).filter((m) => !m.description || !m.description.includes(\"deprecated\")).map((m) => {\n      const name = m.name.split(\"/\").at(-1);\n      return (0,genkit__WEBPACK_IMPORTED_MODULE_0__.modelActionMetadata)({\n        name: `googleai/${name}`,\n        info: { ..._veo_js__WEBPACK_IMPORTED_MODULE_9__.GENERIC_VEO_INFO },\n        configSchema: _veo_js__WEBPACK_IMPORTED_MODULE_9__.VeoConfigSchema,\n        background: true\n      });\n    }),\n    // Models\n    ...models.filter((m) => m.supportedGenerationMethods.includes(\"generateContent\")).filter((m) => !m.description || !m.description.includes(\"deprecated\")).map((m) => {\n      const ref = (0,_gemini_js__WEBPACK_IMPORTED_MODULE_6__.gemini)(\n        m.name.startsWith(\"models/\") ? m.name.substring(\"models/\".length) : m.name\n      );\n      return (0,genkit__WEBPACK_IMPORTED_MODULE_0__.modelActionMetadata)({\n        name: ref.name,\n        info: ref.info,\n        configSchema: _gemini_js__WEBPACK_IMPORTED_MODULE_6__.GeminiConfigSchema\n      });\n    }),\n    // Embedders\n    ...models.filter((m) => m.supportedGenerationMethods.includes(\"embedContent\")).filter((m) => !m.description || !m.description.includes(\"deprecated\")).map((m) => {\n      const name = \"googleai/\" + (m.name.startsWith(\"models/\") ? m.name.substring(\"models/\".length) : m.name);\n      return (0,genkit__WEBPACK_IMPORTED_MODULE_0__.embedderActionMetadata)({\n        name,\n        configSchema: _embedder_js__WEBPACK_IMPORTED_MODULE_5__.GeminiEmbeddingConfigSchema,\n        info: {\n          dimensions: 768,\n          label: `Google Gen AI - ${name}`,\n          supports: {\n            input: [\"text\"]\n          }\n        }\n      });\n    })\n  ];\n}\nfunction googleAIPlugin(options) {\n  let listActionsCache;\n  return (0,genkit_plugin__WEBPACK_IMPORTED_MODULE_3__.genkitPlugin)(\n    \"googleai\",\n    async (ai) => await initializer(ai, options),\n    async (ai, actionType, actionName) => await resolver(ai, actionType, actionName, options),\n    async () => {\n      if (listActionsCache) return listActionsCache;\n      listActionsCache = await listActions(options);\n      return listActionsCache;\n    }\n  );\n}\nconst googleAI = googleAIPlugin;\ngoogleAI.model = (name, config) => {\n  if (name.startsWith(\"imagen\")) {\n    return (0,genkit_model__WEBPACK_IMPORTED_MODULE_2__.modelRef)({\n      name: `googleai/${name}`,\n      config,\n      configSchema: _imagen_js__WEBPACK_IMPORTED_MODULE_7__.ImagenConfigSchema\n    });\n  }\n  if (name.startsWith(\"veo\")) {\n    return (0,genkit_model__WEBPACK_IMPORTED_MODULE_2__.modelRef)({\n      name: `googleai/${name}`,\n      config,\n      configSchema: _veo_js__WEBPACK_IMPORTED_MODULE_9__.VeoConfigSchema\n    });\n  }\n  return (0,genkit_model__WEBPACK_IMPORTED_MODULE_2__.modelRef)({\n    name: `googleai/${name}`,\n    config,\n    configSchema: _gemini_js__WEBPACK_IMPORTED_MODULE_6__.GeminiConfigSchema\n  });\n};\ngoogleAI.embedder = (name, config) => {\n  return (0,genkit__WEBPACK_IMPORTED_MODULE_0__.embedderRef)({\n    name: `googleai/${name}`,\n    config,\n    configSchema: _embedder_js__WEBPACK_IMPORTED_MODULE_5__.GeminiEmbeddingConfigSchema\n  });\n};\nvar index_default = googleAI;\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSWdCO0FBQ3dCO0FBQ0E7QUFDSztBQUNLO0FBTzNCO0FBaUJGO0FBS0E7QUFDeUI7QUFLNUI7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw0REFBb0I7QUFDcEMsZ0JBQWdCLCtEQUFtQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDREQUFvQjtBQUNwQyxnQkFBZ0IsK0RBQW1CO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLGdCQUFnQiwwREFBZTtBQUMvQixnQkFBZ0Isb0VBQXNCLGFBQWEseUJBQXlCO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsa0RBQU07QUFDL0QsTUFBTSwrREFBbUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLFVBQVU7QUFDMUMsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLE1BQU0sdURBQWM7QUFDcEI7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksNkRBQWlCO0FBQ3JCO0FBQ0E7QUFDQSxvQkFBb0Isa0RBQU07QUFDMUIsRUFBRSwrREFBbUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLFdBQVc7QUFDdkMsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLG9FQUFzQixpQkFBaUIsV0FBVztBQUNwRDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0Esb0NBQW9DLCtEQUFtQjtBQUN2RDtBQUNBLElBQUksa0RBQU07QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QiwyREFBVTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLDJEQUFtQjtBQUNoQywwQkFBMEIsS0FBSztBQUMvQixnQkFBZ0IsR0FBRywyREFBbUIsRUFBRTtBQUN4QyxzQkFBc0IsMERBQWtCO0FBQ3hDLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsMkRBQW1CO0FBQ2hDLDBCQUEwQixLQUFLO0FBQy9CLGdCQUFnQixHQUFHLHFEQUFnQixFQUFFO0FBQ3JDLHNCQUFzQixvREFBZTtBQUNyQztBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBLGtCQUFrQixrREFBTTtBQUN4QjtBQUNBO0FBQ0EsYUFBYSwyREFBbUI7QUFDaEM7QUFDQTtBQUNBLHNCQUFzQiwwREFBa0I7QUFDeEMsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxhQUFhLDhEQUFzQjtBQUNuQztBQUNBLHNCQUFzQixxRUFBMkI7QUFDakQ7QUFDQTtBQUNBLG9DQUFvQyxLQUFLO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsMkRBQVk7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNEQUFRO0FBQ25CLHdCQUF3QixLQUFLO0FBQzdCO0FBQ0Esb0JBQW9CLDBEQUFrQjtBQUN0QyxLQUFLO0FBQ0w7QUFDQTtBQUNBLFdBQVcsc0RBQVE7QUFDbkIsd0JBQXdCLEtBQUs7QUFDN0I7QUFDQSxvQkFBb0Isb0RBQWU7QUFDbkMsS0FBSztBQUNMO0FBQ0EsU0FBUyxzREFBUTtBQUNqQixzQkFBc0IsS0FBSztBQUMzQjtBQUNBLGtCQUFrQiwwREFBa0I7QUFDcEMsR0FBRztBQUNIO0FBQ0E7QUFDQSxTQUFTLG1EQUFXO0FBQ3BCLHNCQUFzQixLQUFLO0FBQzNCO0FBQ0Esa0JBQWtCLHFFQUEyQjtBQUM3QyxHQUFHO0FBQ0g7QUFDQTtBQW1CRTtBQUNGIiwic291cmNlcyI6WyIvaG9tZS91c2VyL3N0dWRpby9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9nb29nbGVhaS9saWIvaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGVtYmVkZGVyQWN0aW9uTWV0YWRhdGEsXG4gIGVtYmVkZGVyUmVmLFxuICBtb2RlbEFjdGlvbk1ldGFkYXRhXG59IGZyb20gXCJnZW5raXRcIjtcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCJnZW5raXQvbG9nZ2luZ1wiO1xuaW1wb3J0IHsgbW9kZWxSZWYgfSBmcm9tIFwiZ2Vua2l0L21vZGVsXCI7XG5pbXBvcnQgeyBnZW5raXRQbHVnaW4gfSBmcm9tIFwiZ2Vua2l0L3BsdWdpblwiO1xuaW1wb3J0IHsgZ2V0QXBpS2V5RnJvbUVudlZhciB9IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xuaW1wb3J0IHtcbiAgU1VQUE9SVEVEX01PREVMUyBhcyBFTUJFRERFUl9NT0RFTFMsXG4gIEdlbWluaUVtYmVkZGluZ0NvbmZpZ1NjaGVtYSxcbiAgZGVmaW5lR29vZ2xlQUlFbWJlZGRlcixcbiAgdGV4dEVtYmVkZGluZzAwNCxcbiAgdGV4dEVtYmVkZGluZ0dlY2tvMDAxXG59IGZyb20gXCIuL2VtYmVkZGVyLmpzXCI7XG5pbXBvcnQge1xuICBHZW1pbmlDb25maWdTY2hlbWEsXG4gIFNVUFBPUlRFRF9WMTVfTU9ERUxTLFxuICBkZWZpbmVHb29nbGVBSU1vZGVsLFxuICBnZW1pbmksXG4gIGdlbWluaTEwUHJvLFxuICBnZW1pbmkxNUZsYXNoLFxuICBnZW1pbmkxNUZsYXNoOGIsXG4gIGdlbWluaTE1UHJvLFxuICBnZW1pbmkyMEZsYXNoLFxuICBnZW1pbmkyMEZsYXNoRXhwLFxuICBnZW1pbmkyMEZsYXNoTGl0ZSxcbiAgZ2VtaW5pMjBQcm9FeHAwMjA1LFxuICBnZW1pbmkyNUZsYXNoUHJldmlldzA0MTcsXG4gIGdlbWluaTI1UHJvRXhwMDMyNSxcbiAgZ2VtaW5pMjVQcm9QcmV2aWV3MDMyNVxufSBmcm9tIFwiLi9nZW1pbmkuanNcIjtcbmltcG9ydCB7XG4gIEdFTkVSSUNfSU1BR0VOX0lORk8sXG4gIEltYWdlbkNvbmZpZ1NjaGVtYSxcbiAgZGVmaW5lSW1hZ2VuTW9kZWxcbn0gZnJvbSBcIi4vaW1hZ2VuLmpzXCI7XG5pbXBvcnQgeyBsaXN0TW9kZWxzIH0gZnJvbSBcIi4vbGlzdC1tb2RlbHMuanNcIjtcbmltcG9ydCB7XG4gIEdFTkVSSUNfVkVPX0lORk8sXG4gIFZlb0NvbmZpZ1NjaGVtYSxcbiAgZGVmaW5lVmVvTW9kZWxcbn0gZnJvbSBcIi4vdmVvLmpzXCI7XG5hc3luYyBmdW5jdGlvbiBpbml0aWFsaXplcihhaSwgb3B0aW9ucykge1xuICBsZXQgYXBpVmVyc2lvbnMgPSBbXCJ2MVwiXTtcbiAgaWYgKG9wdGlvbnM/LmFwaVZlcnNpb24pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zPy5hcGlWZXJzaW9uKSkge1xuICAgICAgYXBpVmVyc2lvbnMgPSBvcHRpb25zPy5hcGlWZXJzaW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGlWZXJzaW9ucyA9IFtvcHRpb25zPy5hcGlWZXJzaW9uXTtcbiAgICB9XG4gIH1cbiAgaWYgKGFwaVZlcnNpb25zLmluY2x1ZGVzKFwidjFiZXRhXCIpKSB7XG4gICAgT2JqZWN0LmtleXMoU1VQUE9SVEVEX1YxNV9NT0RFTFMpLmZvckVhY2goXG4gICAgICAobmFtZSkgPT4gZGVmaW5lR29vZ2xlQUlNb2RlbCh7XG4gICAgICAgIGFpLFxuICAgICAgICBuYW1lLFxuICAgICAgICBhcGlLZXk6IG9wdGlvbnM/LmFwaUtleSxcbiAgICAgICAgYXBpVmVyc2lvbjogXCJ2MWJldGFcIixcbiAgICAgICAgYmFzZVVybDogb3B0aW9ucz8uYmFzZVVybCxcbiAgICAgICAgZGVidWdUcmFjZXM6IG9wdGlvbnM/LmV4cGVyaW1lbnRhbF9kZWJ1Z1RyYWNlc1xuICAgICAgfSlcbiAgICApO1xuICB9XG4gIGlmIChhcGlWZXJzaW9ucy5pbmNsdWRlcyhcInYxXCIpKSB7XG4gICAgT2JqZWN0LmtleXMoU1VQUE9SVEVEX1YxNV9NT0RFTFMpLmZvckVhY2goXG4gICAgICAobmFtZSkgPT4gZGVmaW5lR29vZ2xlQUlNb2RlbCh7XG4gICAgICAgIGFpLFxuICAgICAgICBuYW1lLFxuICAgICAgICBhcGlLZXk6IG9wdGlvbnM/LmFwaUtleSxcbiAgICAgICAgYXBpVmVyc2lvbjogdm9pZCAwLFxuICAgICAgICBiYXNlVXJsOiBvcHRpb25zPy5iYXNlVXJsLFxuICAgICAgICBkZWJ1Z1RyYWNlczogb3B0aW9ucz8uZXhwZXJpbWVudGFsX2RlYnVnVHJhY2VzXG4gICAgICB9KVxuICAgICk7XG4gICAgT2JqZWN0LmtleXMoRU1CRURERVJfTU9ERUxTKS5mb3JFYWNoKFxuICAgICAgKG5hbWUpID0+IGRlZmluZUdvb2dsZUFJRW1iZWRkZXIoYWksIG5hbWUsIHsgYXBpS2V5OiBvcHRpb25zPy5hcGlLZXkgfSlcbiAgICApO1xuICB9XG4gIGlmIChvcHRpb25zPy5tb2RlbHMpIHtcbiAgICBmb3IgKGNvbnN0IG1vZGVsT3JSZWYgb2Ygb3B0aW9ucz8ubW9kZWxzKSB7XG4gICAgICBjb25zdCBtb2RlbE5hbWUgPSB0eXBlb2YgbW9kZWxPclJlZiA9PT0gXCJzdHJpbmdcIiA/IG1vZGVsT3JSZWYgOiAoXG4gICAgICAgIC8vIHN0cmlwIG91dCB0aGUgYGdvb2dsZWFpL2AgcHJlZml4XG4gICAgICAgIG1vZGVsT3JSZWYubmFtZS5zcGxpdChcIi9cIilbMV1cbiAgICAgICk7XG4gICAgICBjb25zdCBtb2RlbFJlZjIgPSB0eXBlb2YgbW9kZWxPclJlZiA9PT0gXCJzdHJpbmdcIiA/IGdlbWluaShtb2RlbE9yUmVmKSA6IG1vZGVsT3JSZWY7XG4gICAgICBkZWZpbmVHb29nbGVBSU1vZGVsKHtcbiAgICAgICAgYWksXG4gICAgICAgIG5hbWU6IG1vZGVsTmFtZSxcbiAgICAgICAgYXBpS2V5OiBvcHRpb25zPy5hcGlLZXksXG4gICAgICAgIGJhc2VVcmw6IG9wdGlvbnM/LmJhc2VVcmwsXG4gICAgICAgIGluZm86IHtcbiAgICAgICAgICAuLi5tb2RlbFJlZjIuaW5mbyxcbiAgICAgICAgICBsYWJlbDogYEdvb2dsZSBBSSAtICR7bW9kZWxOYW1lfWBcbiAgICAgICAgfSxcbiAgICAgICAgZGVidWdUcmFjZXM6IG9wdGlvbnM/LmV4cGVyaW1lbnRhbF9kZWJ1Z1RyYWNlc1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5hc3luYyBmdW5jdGlvbiByZXNvbHZlcihhaSwgYWN0aW9uVHlwZSwgYWN0aW9uTmFtZSwgb3B0aW9ucykge1xuICBpZiAoYWN0aW9uVHlwZSA9PT0gXCJlbWJlZGRlclwiKSB7XG4gICAgcmVzb2x2ZUVtYmVkZGVyKGFpLCBhY3Rpb25OYW1lLCBvcHRpb25zKTtcbiAgfSBlbHNlIGlmIChhY3Rpb25OYW1lLnN0YXJ0c1dpdGgoXCJ2ZW9cIikpIHtcbiAgICBpZiAoYWN0aW9uVHlwZSA9PT0gXCJiYWNrZ3JvdW5kLW1vZGVsXCIpIHtcbiAgICAgIGRlZmluZVZlb01vZGVsKGFpLCBhY3Rpb25OYW1lLCBvcHRpb25zPy5hcGlLZXkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChhY3Rpb25UeXBlID09PSBcIm1vZGVsXCIpIHtcbiAgICByZXNvbHZlTW9kZWwoYWksIGFjdGlvbk5hbWUsIG9wdGlvbnMpO1xuICB9XG59XG5mdW5jdGlvbiByZXNvbHZlTW9kZWwoYWksIGFjdGlvbk5hbWUsIG9wdGlvbnMpIHtcbiAgaWYgKGFjdGlvbk5hbWUuc3RhcnRzV2l0aChcImltYWdlblwiKSkge1xuICAgIGRlZmluZUltYWdlbk1vZGVsKGFpLCBhY3Rpb25OYW1lLCBvcHRpb25zPy5hcGlLZXkpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBtb2RlbFJlZjIgPSBnZW1pbmkoYWN0aW9uTmFtZSk7XG4gIGRlZmluZUdvb2dsZUFJTW9kZWwoe1xuICAgIGFpLFxuICAgIG5hbWU6IG1vZGVsUmVmMi5uYW1lLFxuICAgIGFwaUtleTogb3B0aW9ucz8uYXBpS2V5LFxuICAgIGJhc2VVcmw6IG9wdGlvbnM/LmJhc2VVcmwsXG4gICAgaW5mbzoge1xuICAgICAgLi4ubW9kZWxSZWYyLmluZm8sXG4gICAgICBsYWJlbDogYEdvb2dsZSBBSSAtICR7YWN0aW9uTmFtZX1gXG4gICAgfSxcbiAgICBkZWJ1Z1RyYWNlczogb3B0aW9ucz8uZXhwZXJpbWVudGFsX2RlYnVnVHJhY2VzXG4gIH0pO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUVtYmVkZGVyKGFpLCBhY3Rpb25OYW1lLCBvcHRpb25zKSB7XG4gIGRlZmluZUdvb2dsZUFJRW1iZWRkZXIoYWksIGBnb29nbGVhaS8ke2FjdGlvbk5hbWV9YCwge1xuICAgIGFwaUtleTogb3B0aW9ucz8uYXBpS2V5XG4gIH0pO1xufVxuYXN5bmMgZnVuY3Rpb24gbGlzdEFjdGlvbnMob3B0aW9ucykge1xuICBjb25zdCBhcGlLZXkgPSBvcHRpb25zPy5hcGlLZXkgfHwgZ2V0QXBpS2V5RnJvbUVudlZhcigpO1xuICBpZiAoIWFwaUtleSkge1xuICAgIGxvZ2dlci5lcnJvcihcbiAgICAgIFwiUGFzcyBpbiB0aGUgQVBJIGtleSBvciBzZXQgdGhlIEdFTUlOSV9BUElfS0VZIG9yIEdPT0dMRV9BUElfS0VZIGVudmlyb25tZW50IHZhcmlhYmxlLlwiXG4gICAgKTtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgY29uc3QgbW9kZWxzID0gYXdhaXQgbGlzdE1vZGVscyhcbiAgICBvcHRpb25zPy5iYXNlVXJsIHx8IFwiaHR0cHM6Ly9nZW5lcmF0aXZlbGFuZ3VhZ2UuZ29vZ2xlYXBpcy5jb21cIixcbiAgICBhcGlLZXlcbiAgKTtcbiAgcmV0dXJuIFtcbiAgICAvLyBJbWFnZW5cbiAgICAuLi5tb2RlbHMuZmlsdGVyKFxuICAgICAgKG0pID0+IG0uc3VwcG9ydGVkR2VuZXJhdGlvbk1ldGhvZHMuaW5jbHVkZXMoXCJwcmVkaWN0XCIpICYmIG0ubmFtZS5pbmNsdWRlcyhcImltYWdlblwiKVxuICAgICkuZmlsdGVyKChtKSA9PiAhbS5kZXNjcmlwdGlvbiB8fCAhbS5kZXNjcmlwdGlvbi5pbmNsdWRlcyhcImRlcHJlY2F0ZWRcIikpLm1hcCgobSkgPT4ge1xuICAgICAgY29uc3QgbmFtZSA9IG0ubmFtZS5zcGxpdChcIi9cIikuYXQoLTEpO1xuICAgICAgcmV0dXJuIG1vZGVsQWN0aW9uTWV0YWRhdGEoe1xuICAgICAgICBuYW1lOiBgZ29vZ2xlYWkvJHtuYW1lfWAsXG4gICAgICAgIGluZm86IHsgLi4uR0VORVJJQ19JTUFHRU5fSU5GTyB9LFxuICAgICAgICBjb25maWdTY2hlbWE6IEltYWdlbkNvbmZpZ1NjaGVtYVxuICAgICAgfSk7XG4gICAgfSksXG4gICAgLy8gVmVvXG4gICAgLi4ubW9kZWxzLmZpbHRlcihcbiAgICAgIChtKSA9PiBtLnN1cHBvcnRlZEdlbmVyYXRpb25NZXRob2RzLmluY2x1ZGVzKFwicHJlZGljdExvbmdSdW5uaW5nXCIpICYmIG0ubmFtZS5pbmNsdWRlcyhcInZlb1wiKVxuICAgICkuZmlsdGVyKChtKSA9PiAhbS5kZXNjcmlwdGlvbiB8fCAhbS5kZXNjcmlwdGlvbi5pbmNsdWRlcyhcImRlcHJlY2F0ZWRcIikpLm1hcCgobSkgPT4ge1xuICAgICAgY29uc3QgbmFtZSA9IG0ubmFtZS5zcGxpdChcIi9cIikuYXQoLTEpO1xuICAgICAgcmV0dXJuIG1vZGVsQWN0aW9uTWV0YWRhdGEoe1xuICAgICAgICBuYW1lOiBgZ29vZ2xlYWkvJHtuYW1lfWAsXG4gICAgICAgIGluZm86IHsgLi4uR0VORVJJQ19WRU9fSU5GTyB9LFxuICAgICAgICBjb25maWdTY2hlbWE6IFZlb0NvbmZpZ1NjaGVtYSxcbiAgICAgICAgYmFja2dyb3VuZDogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSksXG4gICAgLy8gTW9kZWxzXG4gICAgLi4ubW9kZWxzLmZpbHRlcigobSkgPT4gbS5zdXBwb3J0ZWRHZW5lcmF0aW9uTWV0aG9kcy5pbmNsdWRlcyhcImdlbmVyYXRlQ29udGVudFwiKSkuZmlsdGVyKChtKSA9PiAhbS5kZXNjcmlwdGlvbiB8fCAhbS5kZXNjcmlwdGlvbi5pbmNsdWRlcyhcImRlcHJlY2F0ZWRcIikpLm1hcCgobSkgPT4ge1xuICAgICAgY29uc3QgcmVmID0gZ2VtaW5pKFxuICAgICAgICBtLm5hbWUuc3RhcnRzV2l0aChcIm1vZGVscy9cIikgPyBtLm5hbWUuc3Vic3RyaW5nKFwibW9kZWxzL1wiLmxlbmd0aCkgOiBtLm5hbWVcbiAgICAgICk7XG4gICAgICByZXR1cm4gbW9kZWxBY3Rpb25NZXRhZGF0YSh7XG4gICAgICAgIG5hbWU6IHJlZi5uYW1lLFxuICAgICAgICBpbmZvOiByZWYuaW5mbyxcbiAgICAgICAgY29uZmlnU2NoZW1hOiBHZW1pbmlDb25maWdTY2hlbWFcbiAgICAgIH0pO1xuICAgIH0pLFxuICAgIC8vIEVtYmVkZGVyc1xuICAgIC4uLm1vZGVscy5maWx0ZXIoKG0pID0+IG0uc3VwcG9ydGVkR2VuZXJhdGlvbk1ldGhvZHMuaW5jbHVkZXMoXCJlbWJlZENvbnRlbnRcIikpLmZpbHRlcigobSkgPT4gIW0uZGVzY3JpcHRpb24gfHwgIW0uZGVzY3JpcHRpb24uaW5jbHVkZXMoXCJkZXByZWNhdGVkXCIpKS5tYXAoKG0pID0+IHtcbiAgICAgIGNvbnN0IG5hbWUgPSBcImdvb2dsZWFpL1wiICsgKG0ubmFtZS5zdGFydHNXaXRoKFwibW9kZWxzL1wiKSA/IG0ubmFtZS5zdWJzdHJpbmcoXCJtb2RlbHMvXCIubGVuZ3RoKSA6IG0ubmFtZSk7XG4gICAgICByZXR1cm4gZW1iZWRkZXJBY3Rpb25NZXRhZGF0YSh7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIGNvbmZpZ1NjaGVtYTogR2VtaW5pRW1iZWRkaW5nQ29uZmlnU2NoZW1hLFxuICAgICAgICBpbmZvOiB7XG4gICAgICAgICAgZGltZW5zaW9uczogNzY4LFxuICAgICAgICAgIGxhYmVsOiBgR29vZ2xlIEdlbiBBSSAtICR7bmFtZX1gLFxuICAgICAgICAgIHN1cHBvcnRzOiB7XG4gICAgICAgICAgICBpbnB1dDogW1widGV4dFwiXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSlcbiAgXTtcbn1cbmZ1bmN0aW9uIGdvb2dsZUFJUGx1Z2luKG9wdGlvbnMpIHtcbiAgbGV0IGxpc3RBY3Rpb25zQ2FjaGU7XG4gIHJldHVybiBnZW5raXRQbHVnaW4oXG4gICAgXCJnb29nbGVhaVwiLFxuICAgIGFzeW5jIChhaSkgPT4gYXdhaXQgaW5pdGlhbGl6ZXIoYWksIG9wdGlvbnMpLFxuICAgIGFzeW5jIChhaSwgYWN0aW9uVHlwZSwgYWN0aW9uTmFtZSkgPT4gYXdhaXQgcmVzb2x2ZXIoYWksIGFjdGlvblR5cGUsIGFjdGlvbk5hbWUsIG9wdGlvbnMpLFxuICAgIGFzeW5jICgpID0+IHtcbiAgICAgIGlmIChsaXN0QWN0aW9uc0NhY2hlKSByZXR1cm4gbGlzdEFjdGlvbnNDYWNoZTtcbiAgICAgIGxpc3RBY3Rpb25zQ2FjaGUgPSBhd2FpdCBsaXN0QWN0aW9ucyhvcHRpb25zKTtcbiAgICAgIHJldHVybiBsaXN0QWN0aW9uc0NhY2hlO1xuICAgIH1cbiAgKTtcbn1cbmNvbnN0IGdvb2dsZUFJID0gZ29vZ2xlQUlQbHVnaW47XG5nb29nbGVBSS5tb2RlbCA9IChuYW1lLCBjb25maWcpID0+IHtcbiAgaWYgKG5hbWUuc3RhcnRzV2l0aChcImltYWdlblwiKSkge1xuICAgIHJldHVybiBtb2RlbFJlZih7XG4gICAgICBuYW1lOiBgZ29vZ2xlYWkvJHtuYW1lfWAsXG4gICAgICBjb25maWcsXG4gICAgICBjb25maWdTY2hlbWE6IEltYWdlbkNvbmZpZ1NjaGVtYVxuICAgIH0pO1xuICB9XG4gIGlmIChuYW1lLnN0YXJ0c1dpdGgoXCJ2ZW9cIikpIHtcbiAgICByZXR1cm4gbW9kZWxSZWYoe1xuICAgICAgbmFtZTogYGdvb2dsZWFpLyR7bmFtZX1gLFxuICAgICAgY29uZmlnLFxuICAgICAgY29uZmlnU2NoZW1hOiBWZW9Db25maWdTY2hlbWFcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbW9kZWxSZWYoe1xuICAgIG5hbWU6IGBnb29nbGVhaS8ke25hbWV9YCxcbiAgICBjb25maWcsXG4gICAgY29uZmlnU2NoZW1hOiBHZW1pbmlDb25maWdTY2hlbWFcbiAgfSk7XG59O1xuZ29vZ2xlQUkuZW1iZWRkZXIgPSAobmFtZSwgY29uZmlnKSA9PiB7XG4gIHJldHVybiBlbWJlZGRlclJlZih7XG4gICAgbmFtZTogYGdvb2dsZWFpLyR7bmFtZX1gLFxuICAgIGNvbmZpZyxcbiAgICBjb25maWdTY2hlbWE6IEdlbWluaUVtYmVkZGluZ0NvbmZpZ1NjaGVtYVxuICB9KTtcbn07XG52YXIgaW5kZXhfZGVmYXVsdCA9IGdvb2dsZUFJO1xuZXhwb3J0IHtcbiAgaW5kZXhfZGVmYXVsdCBhcyBkZWZhdWx0LFxuICBnZW1pbmksXG4gIGdlbWluaTEwUHJvLFxuICBnZW1pbmkxNUZsYXNoLFxuICBnZW1pbmkxNUZsYXNoOGIsXG4gIGdlbWluaTE1UHJvLFxuICBnZW1pbmkyMEZsYXNoLFxuICBnZW1pbmkyMEZsYXNoRXhwLFxuICBnZW1pbmkyMEZsYXNoTGl0ZSxcbiAgZ2VtaW5pMjBQcm9FeHAwMjA1LFxuICBnZW1pbmkyNUZsYXNoUHJldmlldzA0MTcsXG4gIGdlbWluaTI1UHJvRXhwMDMyNSxcbiAgZ2VtaW5pMjVQcm9QcmV2aWV3MDMyNSxcbiAgZ29vZ2xlQUksXG4gIGdvb2dsZUFJUGx1Z2luLFxuICB0ZXh0RW1iZWRkaW5nMDA0LFxuICB0ZXh0RW1iZWRkaW5nR2Vja28wMDFcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/index.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/list-models.js":
/*!*************************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/list-models.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar list_models_exports = {};\n__export(list_models_exports, {\n  listModels: () => listModels\n});\nmodule.exports = __toCommonJS(list_models_exports);\nasync function listModels(baseUrl, apiKey) {\n  const res = await fetch(\n    `${baseUrl}/v1beta/models?pageSize=1000&key=${apiKey}`,\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  );\n  const modelResponse = JSON.parse(await res.text());\n  return modelResponse.models;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=list-models.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9saXN0LW1vZGVscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxPQUFPLFFBQVEsbUNBQW1DLE9BQU87QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FFTDtBQUNEIiwic291cmNlcyI6WyIvaG9tZS91c2VyL3N0dWRpby9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9nb29nbGVhaS9saWIvbGlzdC1tb2RlbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIGxpc3RfbW9kZWxzX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KGxpc3RfbW9kZWxzX2V4cG9ydHMsIHtcbiAgbGlzdE1vZGVsczogKCkgPT4gbGlzdE1vZGVsc1xufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhsaXN0X21vZGVsc19leHBvcnRzKTtcbmFzeW5jIGZ1bmN0aW9uIGxpc3RNb2RlbHMoYmFzZVVybCwgYXBpS2V5KSB7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKFxuICAgIGAke2Jhc2VVcmx9L3YxYmV0YS9tb2RlbHM/cGFnZVNpemU9MTAwMCZrZXk9JHthcGlLZXl9YCxcbiAgICB7XG4gICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgICB9XG4gICAgfVxuICApO1xuICBjb25zdCBtb2RlbFJlc3BvbnNlID0gSlNPTi5wYXJzZShhd2FpdCByZXMudGV4dCgpKTtcbiAgcmV0dXJuIG1vZGVsUmVzcG9uc2UubW9kZWxzO1xufVxuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIGxpc3RNb2RlbHNcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlzdC1tb2RlbHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/list-models.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/predict.js":
/*!*********************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/predict.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar predict_exports = {};\n__export(predict_exports, {\n  checkOp: () => checkOp,\n  predictModel: () => predictModel\n});\nmodule.exports = __toCommonJS(predict_exports);\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nfunction predictEndpoint(options) {\n  return `https://generativelanguage.googleapis.com/${options.apiVersion}/models/${options.model}:${options.method}?key=${options.apiKey}`;\n}\nfunction opCheckEndpoint(options) {\n  return `https://generativelanguage.googleapis.com/${options.apiVersion}/${options.operation}?key=${options.apiKey}`;\n}\nfunction predictModel(model, apiKey, method) {\n  return async (instances, parameters) => {\n    const fetch = (await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/node-fetch\"), __webpack_require__.e(\"vendor-chunks/fetch-blob\"), __webpack_require__.e(\"vendor-chunks/formdata-polyfill\"), __webpack_require__.e(\"vendor-chunks/data-uri-to-buffer\"), __webpack_require__.e(\"vendor-chunks/web-streams-polyfill\"), __webpack_require__.e(\"vendor-chunks/node-domexception\")]).then(__webpack_require__.bind(__webpack_require__, /*! node-fetch */ \"(action-browser)/./node_modules/node-fetch/src/index.js\"))).default;\n    const req = {\n      instances,\n      parameters\n    };\n    const response = await fetch(\n      predictEndpoint({\n        model,\n        apiVersion: \"v1beta\",\n        apiKey,\n        method\n      }),\n      {\n        method: \"POST\",\n        body: JSON.stringify(req),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-Goog-Api-Client\": import_genkit.GENKIT_CLIENT_HEADER\n        }\n      }\n    );\n    if (!response.ok) {\n      throw new Error(\n        `Error from Gemini AI predict: HTTP ${response.status}: ${await response.text()}`\n      );\n    }\n    return await response.json();\n  };\n}\nasync function checkOp(operation, apiKey) {\n  const fetch = (await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/node-fetch\"), __webpack_require__.e(\"vendor-chunks/fetch-blob\"), __webpack_require__.e(\"vendor-chunks/formdata-polyfill\"), __webpack_require__.e(\"vendor-chunks/data-uri-to-buffer\"), __webpack_require__.e(\"vendor-chunks/web-streams-polyfill\"), __webpack_require__.e(\"vendor-chunks/node-domexception\")]).then(__webpack_require__.bind(__webpack_require__, /*! node-fetch */ \"(action-browser)/./node_modules/node-fetch/src/index.js\"))).default;\n  const response = await fetch(\n    opCheckEndpoint({\n      apiVersion: \"v1beta\",\n      operation,\n      apiKey\n    }),\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-Goog-Api-Client\": import_genkit.GENKIT_CLIENT_HEADER\n      }\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Error from operation API: HTTP ${response.status}: ${await response.text()}`\n    );\n  }\n  return await response.json();\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=predict.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZ2Vua2l0LWFpL2dvb2dsZWFpL2xpYi9wcmVkaWN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0EsbUdBQW1HO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLDhCQUE4QjtBQUN2RztBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esb0JBQW9CLG1CQUFPLENBQUMsbUVBQVE7QUFDcEM7QUFDQSxzREFBc0QsbUJBQW1CLFVBQVUsY0FBYyxHQUFHLGVBQWUsT0FBTyxlQUFlO0FBQ3pJO0FBQ0E7QUFDQSxzREFBc0QsbUJBQW1CLEdBQUcsa0JBQWtCLE9BQU8sZUFBZTtBQUNwSDtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsK2VBQW9CO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsZ0JBQWdCLElBQUksc0JBQXNCO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QiwrZUFBb0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxnQkFBZ0IsSUFBSSxzQkFBc0I7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sQ0FHTDtBQUNEIiwic291cmNlcyI6WyIvaG9tZS91c2VyL3N0dWRpby9ub2RlX21vZHVsZXMvQGdlbmtpdC1haS9nb29nbGVhaS9saWIvcHJlZGljdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0VTTSA9IChtb2QsIGlzTm9kZU1vZGUsIHRhcmdldCkgPT4gKHRhcmdldCA9IG1vZCAhPSBudWxsID8gX19jcmVhdGUoX19nZXRQcm90b09mKG1vZCkpIDoge30sIF9fY29weVByb3BzKFxuICAvLyBJZiB0aGUgaW1wb3J0ZXIgaXMgaW4gbm9kZSBjb21wYXRpYmlsaXR5IG1vZGUgb3IgdGhpcyBpcyBub3QgYW4gRVNNXG4gIC8vIGZpbGUgdGhhdCBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYSBDb21tb25KUyBmaWxlIHVzaW5nIGEgQmFiZWwtXG4gIC8vIGNvbXBhdGlibGUgdHJhbnNmb3JtIChpLmUuIFwiX19lc01vZHVsZVwiIGhhcyBub3QgYmVlbiBzZXQpLCB0aGVuIHNldFxuICAvLyBcImRlZmF1bHRcIiB0byB0aGUgQ29tbW9uSlMgXCJtb2R1bGUuZXhwb3J0c1wiIGZvciBub2RlIGNvbXBhdGliaWxpdHkuXG4gIGlzTm9kZU1vZGUgfHwgIW1vZCB8fCAhbW9kLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AodGFyZ2V0LCBcImRlZmF1bHRcIiwgeyB2YWx1ZTogbW9kLCBlbnVtZXJhYmxlOiB0cnVlIH0pIDogdGFyZ2V0LFxuICBtb2RcbikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgcHJlZGljdF9leHBvcnRzID0ge307XG5fX2V4cG9ydChwcmVkaWN0X2V4cG9ydHMsIHtcbiAgY2hlY2tPcDogKCkgPT4gY2hlY2tPcCxcbiAgcHJlZGljdE1vZGVsOiAoKSA9PiBwcmVkaWN0TW9kZWxcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMocHJlZGljdF9leHBvcnRzKTtcbnZhciBpbXBvcnRfZ2Vua2l0ID0gcmVxdWlyZShcImdlbmtpdFwiKTtcbmZ1bmN0aW9uIHByZWRpY3RFbmRwb2ludChvcHRpb25zKSB7XG4gIHJldHVybiBgaHR0cHM6Ly9nZW5lcmF0aXZlbGFuZ3VhZ2UuZ29vZ2xlYXBpcy5jb20vJHtvcHRpb25zLmFwaVZlcnNpb259L21vZGVscy8ke29wdGlvbnMubW9kZWx9OiR7b3B0aW9ucy5tZXRob2R9P2tleT0ke29wdGlvbnMuYXBpS2V5fWA7XG59XG5mdW5jdGlvbiBvcENoZWNrRW5kcG9pbnQob3B0aW9ucykge1xuICByZXR1cm4gYGh0dHBzOi8vZ2VuZXJhdGl2ZWxhbmd1YWdlLmdvb2dsZWFwaXMuY29tLyR7b3B0aW9ucy5hcGlWZXJzaW9ufS8ke29wdGlvbnMub3BlcmF0aW9ufT9rZXk9JHtvcHRpb25zLmFwaUtleX1gO1xufVxuZnVuY3Rpb24gcHJlZGljdE1vZGVsKG1vZGVsLCBhcGlLZXksIG1ldGhvZCkge1xuICByZXR1cm4gYXN5bmMgKGluc3RhbmNlcywgcGFyYW1ldGVycykgPT4ge1xuICAgIGNvbnN0IGZldGNoID0gKGF3YWl0IGltcG9ydChcIm5vZGUtZmV0Y2hcIikpLmRlZmF1bHQ7XG4gICAgY29uc3QgcmVxID0ge1xuICAgICAgaW5zdGFuY2VzLFxuICAgICAgcGFyYW1ldGVyc1xuICAgIH07XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcbiAgICAgIHByZWRpY3RFbmRwb2ludCh7XG4gICAgICAgIG1vZGVsLFxuICAgICAgICBhcGlWZXJzaW9uOiBcInYxYmV0YVwiLFxuICAgICAgICBhcGlLZXksXG4gICAgICAgIG1ldGhvZFxuICAgICAgfSksXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcSksXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICBcIlgtR29vZy1BcGktQ2xpZW50XCI6IGltcG9ydF9nZW5raXQuR0VOS0lUX0NMSUVOVF9IRUFERVJcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgRXJyb3IgZnJvbSBHZW1pbmkgQUkgcHJlZGljdDogSFRUUCAke3Jlc3BvbnNlLnN0YXR1c306ICR7YXdhaXQgcmVzcG9uc2UudGV4dCgpfWBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gIH07XG59XG5hc3luYyBmdW5jdGlvbiBjaGVja09wKG9wZXJhdGlvbiwgYXBpS2V5KSB7XG4gIGNvbnN0IGZldGNoID0gKGF3YWl0IGltcG9ydChcIm5vZGUtZmV0Y2hcIikpLmRlZmF1bHQ7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG4gICAgb3BDaGVja0VuZHBvaW50KHtcbiAgICAgIGFwaVZlcnNpb246IFwidjFiZXRhXCIsXG4gICAgICBvcGVyYXRpb24sXG4gICAgICBhcGlLZXlcbiAgICB9KSxcbiAgICB7XG4gICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICBcIlgtR29vZy1BcGktQ2xpZW50XCI6IGltcG9ydF9nZW5raXQuR0VOS0lUX0NMSUVOVF9IRUFERVJcbiAgICAgIH1cbiAgICB9XG4gICk7XG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgRXJyb3IgZnJvbSBvcGVyYXRpb24gQVBJOiBIVFRQICR7cmVzcG9uc2Uuc3RhdHVzfTogJHthd2FpdCByZXNwb25zZS50ZXh0KCl9YFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBjaGVja09wLFxuICBwcmVkaWN0TW9kZWxcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJlZGljdC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/predict.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@genkit-ai/googleai/lib/veo.js":
/*!*****************************************************!*\
  !*** ./node_modules/@genkit-ai/googleai/lib/veo.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar veo_exports = {};\n__export(veo_exports, {\n  GENERIC_VEO_INFO: () => GENERIC_VEO_INFO,\n  VeoConfigSchema: () => VeoConfigSchema,\n  defineVeoModel: () => defineVeoModel\n});\nmodule.exports = __toCommonJS(veo_exports);\nvar import_genkit = __webpack_require__(/*! genkit */ \"(action-browser)/./node_modules/genkit/lib/index.js\");\nvar import_model = __webpack_require__(/*! genkit/model */ \"(action-browser)/./node_modules/genkit/lib/model.js\");\nvar import_common = __webpack_require__(/*! ./common.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/common.js\");\nvar import_predict = __webpack_require__(/*! ./predict.js */ \"(action-browser)/./node_modules/@genkit-ai/googleai/lib/predict.js\");\nconst VeoConfigSchema = import_genkit.z.object({\n  numberOfVideos: import_genkit.z.number().describe(\n    \"The number of video to generate, from 1 to 2 (inclusive). The default is 1.\"\n  ).optional(),\n  negativePrompt: import_genkit.z.string().optional(),\n  aspectRatio: import_genkit.z.enum([\"9:16\", \"16:9\"]).describe(\"Desired aspect ratio of the output video.\").optional(),\n  personGeneration: import_genkit.z.enum([\"dont_allow\", \"allow_adult\", \"allow_all\"]).describe(\n    \"Control if/how images of people will be generated by the model.\"\n  ).optional(),\n  durationSeconds: import_genkit.z.number().describe(\"Length of each output video in seconds, between 5 and 8.\").optional(),\n  enhance_prompt: import_genkit.z.boolean().describe(\"Enable or disable the prompt rewriter. Enabled by default.\").optional()\n}).passthrough();\nfunction extractText(request) {\n  return request.messages.at(-1).content.map((c) => c.text || \"\").join(\"\");\n}\nfunction toParameters(request) {\n  const out = {\n    ...request?.config\n  };\n  for (const k in out) {\n    if (!out[k]) delete out[k];\n  }\n  return out;\n}\nfunction extractImage(request) {\n  const media = request.messages.at(-1)?.content.find((p) => !!p.media)?.media;\n  if (media) {\n    const img = media?.url.split(\",\")[1];\n    return {\n      bytesBase64Encoded: img,\n      mimeType: media.contentType\n    };\n  }\n  return void 0;\n}\nconst GENERIC_VEO_INFO = {\n  label: `Google AI - Generic Veo`,\n  supports: {\n    media: true,\n    multiturn: false,\n    tools: false,\n    systemRole: false,\n    output: [\"media\"],\n    longRunning: true\n  }\n};\nfunction defineVeoModel(ai, name, apiKey) {\n  if (apiKey !== false) {\n    apiKey = apiKey || (0, import_common.getApiKeyFromEnvVar)();\n    if (!apiKey) {\n      throw new import_genkit.GenkitError({\n        status: \"FAILED_PRECONDITION\",\n        message: \"Please pass in the API key or set the GEMINI_API_KEY or GOOGLE_API_KEY environment variable.\\nFor more details see https://genkit.dev/docs/plugins/google-genai\"\n      });\n    }\n  }\n  const modelName = `googleai/${name}`;\n  const model = (0, import_model.modelRef)({\n    name: modelName,\n    info: {\n      ...GENERIC_VEO_INFO,\n      label: `Google AI - ${name}`\n    },\n    configSchema: VeoConfigSchema\n  });\n  return ai.defineBackgroundModel({\n    name: modelName,\n    ...model.info,\n    configSchema: VeoConfigSchema,\n    async start(request) {\n      const instance = {\n        prompt: extractText(request)\n      };\n      const image = extractImage(request);\n      if (image) {\n        instance.image = image;\n      }\n      const predictClient = (0, import_predict.predictModel)(model.version || name, apiKey, \"predictLongRunning\");\n      const response = await predictClient([instance], toParameters(request));\n      return toGenkitOp(response);\n    },\n    async check(operation) {\n      const newOp = await (0, import_predict.checkOp)(operation.id, apiKey);\n      return toGenkitOp(newOp);\n    }\n  });\n}\nfunction toGenkitOp(apiOp) {\n  const res = { id: apiOp.name };\n  if (apiOp.done !== void 0) {\n    res.done = apiOp.done;\n  }\n  if (apiOp.error) {\n    res.error = { message: apiOp.error.message };\n  }\n  if (apiOp.response && apiOp.response.generateVideoResponse && apiOp.response.generateVideoResponse.generatedSamples) {\n    res.output = {\n      finishReason: \"stop\",\n      raw: apiOp.response,\n      message: {\n        role: \"model\",\n        content: apiOp.response.generateVideoResponse.generatedSamples.map(\n          (s) => {\n            return {\n              media: {\n                url: s.video.uri\n              }\n            };\n          }\n        )\n      }\n    };\n  }\n  return res;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=veo.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@genkit-ai/googleai/lib/veo.js\n");

/***/ })

};
;